<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Thu Oct 10 2024 00:00:00 GMT+0000 (Coordinated Universal Time)</title>
      <link href="/posts/100fa4d8.html"/>
      <url>/posts/100fa4d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码题1"><a href="#代码题1" class="headerlink" title="代码题1"></a>代码题1</h2><p>给定一个数列，其中可能有正数也可能有负数，我们的任务是找出其中连续的一个子数列(不允许空序列)，使它们的和尽可能小。<br>输入描述<br>第一行:一个数字N，N&lt;1000<br>第二行:N个数字，每个数字X，-10000&lt;x&lt;10000<br>输出描述<br>子数列最小和<br>示例<br>输入<br>8<br>-2 6 -1 -5 4 -7 -2 3<br>输出<br>-11</p><h3 id="暴力思路"><a href="#暴力思路" class="headerlink" title="暴力思路"></a>暴力思路</h3><p>暴力法是直接遍历所有可能的子数组并计算它们的和。这种方法简单，但时间复杂度是 O(N2)O(N^2)O(N2)，对于 N&lt;1000N &lt; 1000N&lt;1000 仍然可以接受。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> min_sum = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力法：遍历所有子数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> current_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class="line">            current_sum += arr[j];</span><br><span class="line">            min_sum = <span class="built_in">min</span>(min_sum, current_sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    cout &lt;&lt; min_sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划思路"><a href="#动态规划思路" class="headerlink" title="动态规划思路"></a>动态规划思路</h3><ul><li>遍历数组，使用一个变量 <code>current_min_sum</code> 来跟踪当前子数组的最小和。</li><li>使用另一个变量 <code>min_sum</code> 来存储全局的最小和。</li><li>如果 <code>current_min_sum</code> 大于当前元素加上 <code>current_min_sum</code>，则更新 <code>current_min_sum</code> 为当前元素。</li><li>每次更新 <code>min_sum</code> 为当前的 <code>current_min_sum</code> 和当前的 <code>min_sum</code> 中的较小值。</li></ul><p><code>current_min_sum</code> 记录当前子数组的最小和。</p><p><code>min_sum</code> 记录全局的最小子数组和。</p><p>每次更新 <code>current_min_sum</code> 时，选择当前元素和 <code>current_min_sum + 当前元素</code> 中的较小值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="type">int</span> current_min_sum = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> min_sum = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组求最小子数组和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 选择继续累加或从当前元素重新开始</span></span><br><span class="line">        current_min_sum = <span class="built_in">min</span>(arr[i], current_min_sum + arr[i]);</span><br><span class="line">        <span class="comment">// 更新全局最小值</span></span><br><span class="line">        min_sum = <span class="built_in">min</span>(min_sum, current_min_sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    cout &lt;&lt; min_sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力法适用于小规模数据，但对于更大的数据集性能不佳。<br>动态规划是更高效的方案，具有 O(N) 的复杂度。</p><h2 id="http-缓存机制-强制缓存-对比缓存"><a href="#http-缓存机制-强制缓存-对比缓存" class="headerlink" title="http 缓存机制(强制缓存/对比缓存)"></a>http 缓存机制(强制缓存/对比缓存)</h2><p>http报文就是浏览器和服务器间通信时发送及响应的数据块</p><p>浏览器向服务器请求数据，发送请求（request）报文</p><p>服务器向浏览器返回数据，返回响应（response）报文</p><p>报文信息主要分为两部分：</p><ol><li>包含属性的首部header —- 附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在header中</li><li>包含数据的主体部分（body）—- http请求真正想要传输的部分</li></ol><p>为什么需要使用缓存？</p><p>HITP 缓存机制作为 web 性能优化的重要手段，它可以通过复用获取过的资源，降低服务器压力、减少等待时间、节约网络流量</p><p>缓存规则解析</p><p>为了方便理解，我们认为浏览器提供了一个<strong>缓存数据库</strong>，用于存储缓存数据和信息</p><p>在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>在强制缓存规则下 ，分为缓存命中，和缓存未命中</p><p>缓存命中，直接从缓存数据库中去缓存数据</p><p>缓存未命中，先是去缓存数据库中访问，发现缓存数据失效，然后服务器往服务器发送请求数据，服务器返回数据和缓存规则到客户端，客户端获得数据的同时，将数据和缓存规则存入缓存系统中。</p><p>强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，浏览器是如何判断缓存数据是否失效呢?</p><p>在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。</p><p>对于强制缓存来说，响应header中会有两个字段来标明失效规则(Expires/Cache-Control)使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况:取资源是是from disk cache</p><h3 id="对比缓存（协商缓存）"><a href="#对比缓存（协商缓存）" class="headerlink" title="对比缓存（协商缓存）"></a>对比缓存（协商缓存）</h3><p>与强缓存最主要的区别是，不管缓存是否命中，都会向服务器发送请求</p><p>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。</p><p>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。</p><p>PLUS：</p><p>使用命令上次gitee</p><blockquote><p>注意：第一次上传的时候，不要有readme（和仓库里面同名的文件）</p></blockquote><ul><li>git init 创建仓库</li><li>git remote add origin 具体仓库地址</li><li>git push origin master</li><li>git add .</li><li>git commit -m “first commit”</li><li>git push origin master</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-10-9</title>
      <link href="/posts/100fa4d7.html"/>
      <url>/posts/100fa4d7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP2和HTTP3的区别"><a href="#1-HTTP2和HTTP3的区别" class="headerlink" title="1.HTTP2和HTTP3的区别"></a>1.HTTP2和HTTP3的区别</h2><p>HTTP/1.0、HTTP/2 和 HTTP/3（实际上是基于 QUIC 协议）</p><p>HTTP 协议经历了多次更新以适应不断增长的需求，提高性能、安全性和效率</p><h3 id="http1-0"><a href="#http1-0" class="headerlink" title="http1.0"></a>http1.0</h3><p>特点：</p><ul><li>每个请求都需要建立一个新的 TCP 连接。</li><li>无状态：每个请求之间是独立的。</li><li>支持基本的身份验证和缓存机制。</li></ul><p>限制：由于每次请求都要重新建立连接，导致了较高的延迟和资源消耗。</p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>特点：</p><ul><li>引入了持久连接，允许在一个 TCP 连接上发送多个请求。</li><li>支持管道化，即客户端可以在一个连接中发送多个请求而无需等待每个请求的响应。</li><li>增加了 Host 头部，支持在同一 IP 地址上托管多个域名。</li></ul><p>改进：显著减少了因频繁建立连接而产生的开销，提高了网页加载速度。</p><h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><p>特点：</p><ul><li>多路复用（Multiplexing）：允许多个请求同时在一个连接上进行，减少了阻塞。</li><li>二进制分帧层（Binary Framing Layer）：将数据分割成更小的消息和帧，提高了效率。</li><li>服务器推送（Server Push）：服务器可以主动向客户端推送资源，而不需要客户端先发起请求。</li><li>请求优先级（Request Prioritization）：客户端可以指定哪些资源优先加载。</li></ul><p>安全性：虽然 HTTP/2 不强制要求加密，但大多数实现都默认使用 HTTPS（即 TLS 加密）。</p><h3 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h3><p>特点：</p><ul><li>基于 QUIC 协议：QUIC 是一个基于 UDP 的多路复用网络传输协议，旨在减少延迟并提供更好的拥塞控制。</li><li>减少握手延迟：QUIC 允许零往返时间（0-RTT）连接建立，这意味着如果客户端之前与服务器通信过，则可以立即开始发送数据。</li><li>更好的网络条件适应性：QUIC 包含先进的拥塞控制算法，可以更好地适应不同的网络环境。</li></ul><p>优势：相比 HTTP/2，HTTP/3 在减少延迟、提高可靠性和安全性方面有了进一步的提升。</p><p>演进过程：</p><ul><li><strong>从 HTTP/1.0 到 HTTP/1.1</strong>：主要是解决了连接效率的问题，通过引入持久连接和管道化来减少延迟。</li><li><strong>从 HTTP/1.1 到 HTTP/2</strong>：重点在于提高并发处理能力和优化数据传输效率，引入了多路复用等关键技术。</li><li><strong>从 HTTP/2 到 HTTP/3</strong>：目标是进一步降低延迟和提高网络稳定性，特别是针对移动网络和高延迟网络环境进行了优化。</li></ul><h2 id="2-强缓存与协商缓存"><a href="#2-强缓存与协商缓存" class="headerlink" title="2.强缓存与协商缓存"></a>2.强缓存与协商缓存</h2><p>缓存可以减少对服务器的请求次数，减轻服务器负载，加快页面加载速度。根据缓存策略的不同，通常可以分为强缓存（Strong Caching）和协商缓存（Negotiated Caching）两种类型。</p><h3 id="强缓存（Strong-Caching）"><a href="#强缓存（Strong-Caching）" class="headerlink" title="强缓存（Strong Caching）"></a>强缓存（Strong Caching）</h3><p>强缓存是指浏览器直接从本地缓存中读取资源，而不需要与服务器进行任何通信。当用户再次访问同一个资源时，如果该资源在强缓存的有效期内，浏览器会直接使用缓存中的版本，不会向服务器发送请求。</p><p>强缓存主要依赖于以下两个HTTP头部字段：</p><p><strong>Expires</strong>：这个字段指定了资源的过期时间，是一个绝对时间点。如果 <code>Cache-Control</code> 和 <code>Expires</code> 同时存在，<code>Cache-Control</code> 的优先级更高。</p><p><strong>Cache-Control</strong>：这个字段用于指定缓存策略</p><h3 id="协商缓存（Negotiated-Caching）"><a href="#协商缓存（Negotiated-Caching）" class="headerlink" title="协商缓存（Negotiated Caching）"></a>协商缓存（Negotiated Caching）</h3><p>协商缓存是指当强缓存失效后，浏览器会向服务器发送一个带有特定头部的请求，询问资源是否有更新。如果资源没有变化，服务器会返回一个 304 Not Modified 状态码，告诉浏览器继续使用缓存中的资源；如果有更新，服务器则会返回新的资源。协商缓存主要依赖于以下两个HTTP头部字段：</p><p><strong>ETag (Entity Tag)</strong>：服务器为每个资源生成一个唯一的标识符（ETag）。当资源发生变化时，ETag 也会相应改变。客户端在请求时可以通过 <code>If-None-Match</code> 头部发送上次获取的 ETag 值，服务器根据这个值判断资源是否已更改。</p><p><strong>Last-Modified / If-Modified-Since</strong>：服务器在响应头中包含 <code>Last-Modified</code> 字段，表示资源最后修改的时间。客户端在下次请求时通过 <code>If-Modified-Since</code> 头部发送这个时间戳，服务器根据这个时间戳判断资源是否已更改。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><strong>强缓存</strong>：适用于那些很少或永远不会改变的静态资源，如图片、CSS 文件、JavaScript 文件等。通过设置较长的 <code>max-age</code>，可以显著减少这些资源的加载时间。</li><li><strong>协商缓存</strong>：适用于那些可能会定期更新的动态资源。虽然每次请求都会与服务器进行一次简短的通信，但只有当资源确实发生变化时才会重新下载，因此仍然可以有效减少带宽使用和服务器负载。</li></ul><h2 id="3-304状态码和403状态码"><a href="#3-304状态码和403状态码" class="headerlink" title="3. 304状态码和403状态码"></a>3. 304状态码和403状态码</h2><h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><ul><li>304状态码表示客户端请求的资源未被修改。这通常发生在客户端使用了协商缓存机制的情况下。</li><li>当客户端请求一个资源时，如果该资源在服务器上的最后修改时间与客户端缓存中的资源相同，服务器会返回304状态码，而不是重新发送资源内容。</li></ul><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><ul><li>403状态码表示服务器理解请求客户端的请求，但拒绝执行此请求。通常是因为客户端没有足够的权限访问请求的资源。</li><li>这个状态码表明请求本身没有问题，但服务器出于某种原因不允许访问。</li></ul><p><strong>使用场景</strong>：</p><ul><li>客户端尝试访问受保护的资源，但没有提供正确的认证信息或权限不足。</li><li>服务器配置禁止访问某些目录或文件。</li><li>客户端的IP地址被服务器列入黑名单。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>304 Not Modified</strong>：表示资源未被修改，客户端可以从缓存中读取资源。</li><li><strong>403 Forbidden</strong>：表示客户端没有权限访问请求的资源。</li></ul><h2 id="4-cdn缓存"><a href="#4-cdn缓存" class="headerlink" title="4.cdn缓存"></a>4.cdn缓存</h2><p>CDN（Content Delivery Network，内容分发网络）是一种用于加速互联网内容传输的技术。通过在全球范围内分布的服务器节点，CDN 可以将内容缓存到离用户最近的节点，从而减少数据传输的延迟和带宽消耗，提高用户的访问速度和体验。</p><p><strong>内容上传</strong>：原始服务器（Origin Server）将内容上传到 CDN 的中心节点。内容可以是静态资源（如图片、CSS、JavaScript 文件）或动态内容（如视频流、API 响应）。</p><p><strong>内容分发</strong>：就近访问内容</p><p><strong>用户请求</strong>：用户向 CDN 发起请求，通常是通过 DNS 解析将请求重定向到最近的边缘节点。边缘节点接收到请求后，首先检查本地缓存中是否有请求的资源</p><p><strong>缓存命中</strong>：如果边缘节点的缓存中有请求的资源，并且资源未过期，边缘节点直接将资源返回给用户。这种情况下，请求不会到达原始服务器，减少了原始服务器的负载。</p><p><strong>缓存未命中</strong>：</p><ul><li>如果边缘节点的缓存中没有请求的资源或资源已过期，边缘节点会向原始服务器发起请求。</li><li>原始服务器返回资源后，边缘节点将其缓存起来，并返回给用户。</li><li>下次有相同的请求时，边缘节点可以直接从缓存中提供资源。</li></ul><p>CDN 缓存通过将内容缓存到离用户最近的边缘节点，显著提高了内容的访问速度和用户体验。合理的缓存策略和管理方法可以进一步优化 CDN 的性能，减少原始服务器的负载，提高整体系统的稳定性和可靠性。</p><h2 id="5-css盒模型"><a href="#5-css盒模型" class="headerlink" title="5.css盒模型"></a>5.css盒模型</h2><p>盒子由四个部分组成：内容区域（content）、内边距（padding）、边框（border）和外边距（margin）。</p><p>在标准盒模型（Standard Box Model）中，元素的总宽度和高度计算如下：</p><ul><li><strong>总宽度</strong> = <code>content width</code> + <code>padding left</code> + <code>padding right</code> + <code>border left</code> + <code>border right</code> + <code>margin left</code> + <code>margin right</code></li></ul><p>为了更方便地控制元素的尺寸，CSS 提供了一个 <code>box-sizing</code> 属性，可以改变盒模型的计算方式。</p><ul><li><strong>content-box</strong>（默认值）：使用标准盒模型，宽度和高度仅包括内容区域。</li><li><strong>border-box</strong>：宽度和高度包括内容区域、内边距和边框，但不包括外边距。</li></ul><h2 id="6-给行内元素设置margin和padding"><a href="#6-给行内元素设置margin和padding" class="headerlink" title="6.给行内元素设置margin和padding"></a>6.给行内元素设置margin和padding</h2><h3 id="行内元素（inline-elements）"><a href="#行内元素（inline-elements）" class="headerlink" title="行内元素（inline elements）"></a>行内元素（inline elements）</h3><p>行内元素（inline elements）和块级元素（block elements）在CSS中的行为有所不同。行内元素通常用于文本中的内容，如 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code> 等。对于行内元素，设置 <code>margin</code> 和 <code>padding</code> 的效果有一些限制，但并不是完全没有作用。下面详细说明行内元素设置 <code>margin</code> 和 <code>padding</code> 的效果和用法。</p><ul><li>行内元素的水平方向 <code>margin</code>（<code>margin-left</code> 和 <code>margin-right</code>）是有效的，可以用来增加元素之间的间距。</li></ul><ul><li>行内元素的垂直方向 <code>margin</code>（<code>margin-top</code> 和 <code>margin-bottom</code>）通常不起作用，因为行内元素不会影响其所在行的高度。</li></ul><ul><li>行内元素的水平方向 <code>padding</code>（<code>padding-left</code> 和 <code>padding-right</code>）是有效的，可以用来增加元素内部的间距。</li><li>行内元素的垂直方向 <code>padding</code>（<code>padding-top</code> 和 <code>padding-bottom</code>）也是有效的，但它们不会增加元素的高度，而是会影响行高的计算。</li></ul><h3 id="行内块级元素（inline-block）"><a href="#行内块级元素（inline-block）" class="headerlink" title="行内块级元素（inline-block）"></a>行内块级元素（inline-block）</h3><p>如果你希望行内元素的行为更像块级元素，可以将它们的 <code>display</code> 属性设置为 <code>inline-block</code>。这样，行内元素就可以同时具有行内元素和块级元素的特性，包括垂直方向的 <code>margin</code> 和 <code>padding</code> 也会生效。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>行内元素</strong>：<ul><li>水平方向的 <code>margin</code> 和 <code>padding</code> 是有效的。</li><li>垂直方向的 <code>margin</code> 通常不起作用。</li><li>垂直方向的 <code>padding</code> 是有效的，但不会增加元素的高度，而是影响行高的计算。</li></ul></li><li><strong>行内块级元素（display: inline-block）</strong>：<ul><li>所有方向的 <code>margin</code> 和 <code>padding</code> 都是有效的。</li></ul></li></ul><p>通过合理使用 <code>display: inline-block</code>，你可以更灵活地控制行内元素的布局和间距。</p><h2 id="7-js数据类型"><a href="#7-js数据类型" class="headerlink" title="7.js数据类型"></a>7.js数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><strong>Undefined</strong>  <strong>Null</strong> <strong>Boolean</strong> <strong>Number </strong> <strong>String</strong>  <strong>Symbol</strong>    <strong>BigInt</strong></p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p><strong>Object</strong> <strong>Array</strong>  <strong>Function</strong>  <strong>Date</strong>  <strong>RegExp</strong> </p><p>JavaScript 的数据类型分为基本数据类型和引用数据类型。基本数据类型包括 <code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>symbol</code> 和 <code>bigint</code>，引用数据类型包括 <code>object</code>、<code>array</code>、<code>function</code>、<code>date</code> 和 <code>regexp</code>。</p><h2 id="8-es6新增特性"><a href="#8-es6新增特性" class="headerlink" title="8.es6新增特性"></a>8.es6新增特性</h2><h3 id="1-块级作用域"><a href="#1-块级作用域" class="headerlink" title="1. 块级作用域"></a>1. 块级作用域</h3><p><strong>let 和 const 关键字</strong>：</p><ul><li><code>let</code>：声明块级作用域的变量，避免了 <code>var</code> 的变量提升问题。</li><li><code>const</code>：声明块级作用域的常量，一旦赋值就不能再改变。</li></ul><h3 id="2-解构赋值（Destructuring-Assignment）"><a href="#2-解构赋值（Destructuring-Assignment）" class="headerlink" title="2. 解构赋值（Destructuring Assignment）"></a>2. 解构赋值（Destructuring Assignment）</h3><ul><li>从数组和对象中提取数据并赋值给变量，使代码更简洁。</li></ul><h3 id="3-模板字符串（Template-Literals）"><a href="#3-模板字符串（Template-Literals）" class="headerlink" title="3.模板字符串（Template Literals）"></a>3.模板字符串（Template Literals）</h3><ul><li>使用反引号（`）来创建多行字符串，并嵌入表达式。</li></ul><h3 id="4-默认参数（Default-Parameters）"><a href="#4-默认参数（Default-Parameters）" class="headerlink" title="4. 默认参数（Default Parameters）"></a>4. 默认参数（Default Parameters）</h3><ul><li>函数参数可以有默认值，如果调用时没有传入相应的参数，就使用默认值。</li></ul><h3 id="5-箭头函数（Arrow-Functions）"><a href="#5-箭头函数（Arrow-Functions）" class="headerlink" title="5.箭头函数（Arrow Functions）"></a>5.箭头函数（Arrow Functions）</h3><ul><li>简化函数的书写方式，没有自己的 <code>this</code> 上下文，继承外层函数的 <code>this</code> 值。</li></ul><h3 id="6-类（Classes）"><a href="#6-类（Classes）" class="headerlink" title="6. 类（Classes）"></a>6. 类（Classes）</h3><ul><li>提供了一种更清晰的面向对象编程方式，简化了构造函数和原型链的使用。</li></ul><h3 id="7-模块（Modules）"><a href="#7-模块（Modules）" class="headerlink" title="7. 模块（Modules）"></a>7. 模块（Modules）</h3><ul><li>支持模块化编程，可以导入和导出模块。</li></ul><h3 id="8-扩展运算符（Spread-Operator）"><a href="#8-扩展运算符（Spread-Operator）" class="headerlink" title="8. 扩展运算符（Spread Operator）"></a>8. 扩展运算符（Spread Operator）</h3><ul><li>用于展开数组或对象，方便操作和传递参数。</li></ul><h3 id="9-剩余参数（Rest-Parameters）"><a href="#9-剩余参数（Rest-Parameters）" class="headerlink" title="9. 剩余参数（Rest Parameters）"></a>9. 剩余参数（Rest Parameters）</h3><ul><li>用于收集函数中的多余参数，形成一个数组。</li></ul><h3 id="10-Set-和-Map"><a href="#10-Set-和-Map" class="headerlink" title="10. Set 和 Map"></a>10. Set 和 Map</h3><ul><li><strong>Set</strong>：表示一个值的集合，其中的值唯一且不重复。</li><li><strong>Map</strong>：表示一个键值对的集合，其中键的类型不受限制。</li></ul><h3 id="11-Promise"><a href="#11-Promise" class="headerlink" title="11. Promise"></a>11. Promise</h3><ul><li>用于异步操作的处理，提供更清晰的错误处理和链式调用。</li></ul><h3 id="12-Symbol"><a href="#12-Symbol" class="headerlink" title="12. Symbol"></a>12. Symbol</h3><ul><li>表示独一无二的值，常用于对象属性的键，避免命名冲突。</li></ul><h3 id="13-Iterator-和-For-of-循环"><a href="#13-Iterator-和-For-of-循环" class="headerlink" title="13. Iterator 和 For-of 循环"></a>13. Iterator 和 For-of 循环</h3><ul><li><strong>Iterator</strong>：提供了一种统一的遍历接口。</li><li><strong>For-of 循环</strong>：用于遍历可迭代对象（如数组、字符串、Map、Set 等）。</li></ul><h3 id="14-Generator-函数"><a href="#14-Generator-函数" class="headerlink" title="14. Generator 函数"></a>14. Generator 函数</h3><ul><li>生成器函数可以暂停和恢复执行，提供了一种更灵活的异步编程方式。</li></ul><h2 id="9-深浅拷贝-以及实现的方式"><a href="#9-深浅拷贝-以及实现的方式" class="headerlink" title="9.深浅拷贝  以及实现的方式"></a>9.深浅拷贝  以及实现的方式</h2><h3 id="1-浅拷贝（Shallow-Copy）"><a href="#1-浅拷贝（Shallow-Copy）" class="headerlink" title="1. 浅拷贝（Shallow Copy）"></a>1. 浅拷贝（Shallow Copy）</h3><p>浅拷贝只复制对象的第一层属性，对于嵌套的对象或数组，它只是复制了引用，而不是实际的数据。因此，修改拷贝后的对象会影响到原对象。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><strong>使用 Object.assign()</strong></p><p><strong>使用扩展运算符 …</strong></p><p><strong>使用 Array.prototype.slice() 或 Array.prototype.concat()</strong></p><h3 id="2-深拷贝（Deep-Copy）"><a href="#2-深拷贝（Deep-Copy）" class="headerlink" title="2.深拷贝（Deep Copy）"></a>2.深拷贝（Deep Copy）</h3><p>深拷贝会递归地复制对象的所有层级，确保拷贝后的对象与原对象完全独立，修改拷贝后的对象不会影响原对象。</p><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><p><strong>使用 JSON.parse() 和 JSON.stringify()</strong></p><ul><li>这是最简单的方法，但有一定的局限性，例如不能处理函数、循环引用和 <code>undefined</code>。</li></ul><p><strong>使用递归函数</strong></p><ul><li>这种方法可以处理更复杂的情况，包括函数、循环引用等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) <span class="keyword">return</span> obj; <span class="comment">// null or undefined</span></span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj);</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Function</span>) <span class="keyword">return</span> obj; <span class="comment">// 或者可以选择不复制函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj); <span class="comment">// 处理循环引用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  hash.<span class="title function_">set</span>(obj, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepCopy</span>(obj[key], hash);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125;, <span class="attr">d</span>: [<span class="number">3</span>, <span class="number">4</span>] &#125;;</span><br><span class="line"><span class="keyword">const</span> deepCopy = <span class="title function_">deepCopy</span>(original);</span><br><span class="line"></span><br><span class="line">deepCopy.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125;, d: [3, 4] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepCopy); <span class="comment">// &#123; a: 1, b: &#123; c: 3 &#125;, d: [3, 4] &#125;</span></span><br></pre></td></tr></table></figure><p><strong>使用第三方库</strong></p><ul><li>有许多第三方库提供了深拷贝的功能，如 <code>lodash</code> 的 <code>_.cloneDeep</code>。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>浅拷贝</strong>：只复制对象的第一层属性，对于嵌套的对象或数组，复制的是引用。修改拷贝后的对象可能会影响到原对象。</li><li>实现方式：<code>Object.assign()</code>、扩展运算符 <code>...</code>、<code>Array.prototype.slice()</code> 或 <code>Array.prototype.concat()</code>。</li><li><strong>深拷贝</strong>：递归地复制对象的所有层级，确保拷贝后的对象与原对象完全独立。修改拷贝后的对象不会影响原对象。</li><li>实现方式：<code>JSON.parse()</code> 和 <code>JSON.stringify()</code>、递归函数、第三方库（如 <code>lodash</code> 的 <code>_.cloneDeep</code>）。</li></ul><h2 id="10-实现promisify"><a href="#10-实现promisify" class="headerlink" title="10.实现promisify"></a>10.实现promisify</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **实现一个promisify()方法** </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promisify</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">fn</span>(...args,<span class="function">(<span class="params">err,reslut</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(reslut)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用promisify前</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.js&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用promisify后</span></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;./index.js&#x27;</span>)</span><br><span class="line">   .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">   &#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error:&#x27;</span>, err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-10-8</title>
      <link href="/posts/100fa4d6.html"/>
      <url>/posts/100fa4d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-canvas实现贪吃蛇"><a href="#1-canvas实现贪吃蛇" class="headerlink" title="1.canvas实现贪吃蛇"></a>1.canvas实现贪吃蛇</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#mycanvas</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>:<span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mycanvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> direction=<span class="number">2</span>;  <span class="comment">//方向 0表示左，1表示上，2表示右，3表示下</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">//计时器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> len = <span class="number">10</span>; <span class="comment">//蛇的长度</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 蛇的初始位置</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> x=<span class="number">8</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> y=<span class="number">8</span>; </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> speed = <span class="number">100</span>;  <span class="comment">//速度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> size = <span class="number">8</span>; <span class="comment">// 每一节蛇的大小</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> map=[]; <span class="comment">//用于存储蛇的运动轨迹</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 食物坐标</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> foodX;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> foodY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">game</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span>=<span class="string">&#x27;green&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置运动方向进行绘制</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">switch</span>(direction)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="language-javascript">            x=x-size;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="language-javascript">            y=y-size;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="language-javascript">            x=x+size;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="language-javascript">            y=y+size;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 边界碰撞检测</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(x&gt;=canvas.<span class="property">width</span> || x&lt;<span class="number">0</span> || y&gt;=canvas.<span class="property">height</span> || y&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;game over&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 自身碰撞检测</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> carch = map.<span class="title function_">some</span>(<span class="function"><span class="params">ele</span>=&gt;</span>ele.<span class="property">x</span>===x&amp;&amp;ele.<span class="property">y</span>===y);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(carch)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;game over&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(map.<span class="property">length</span>&gt;len)&#123; <span class="comment">//数据长度大于蛇的长度</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 删除数组中的第一个元素 并且 擦除画板该区域</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> first = map.<span class="title function_">shift</span>();</span></span><br><span class="line"><span class="language-javascript">          ctx.<span class="title function_">clearRect</span>(first.<span class="property">x</span>,first.<span class="property">y</span>,size,size);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        map.<span class="title function_">push</span>(&#123;x,y&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">fillRect</span>(x,y,size,size);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(map);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断蛇是否吃到食物</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(foodX==x&amp;&amp; foodY==y)&#123;</span></span><br><span class="line"><span class="language-javascript">          len++;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">getFood</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getFood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        foodX = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">50</span>)*<span class="number">8</span>;</span></span><br><span class="line"><span class="language-javascript">        foodY = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">50</span>)*<span class="number">8</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> has = map.<span class="title function_">some</span>(<span class="function"><span class="params">ele</span>=&gt;</span>ele.<span class="property">x</span>===foodX &amp;&amp; ele.<span class="property">y</span>===foodY);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(has)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">getFood</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span>=<span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">fillRect</span>(foodX,foodY,size,size);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getFood</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      timer = <span class="built_in">setInterval</span>(game,speed);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 键盘时间用于改变方向</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">onkeyup</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(e.<span class="property">keyCode</span>&gt;=<span class="number">37</span> &amp;&amp; e.<span class="property">keyCode</span>&lt;=<span class="number">40</span>)</span></span><br><span class="line"><span class="language-javascript">          direction=e.<span class="property">keyCode</span>-<span class="number">37</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;mycanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-字符串的排列"><a href="#2-字符串的排列" class="headerlink" title="2.字符串的排列"></a>2.字符串的排列</h2><p>详细描述<br>给你两个字符串 s1和s2，写一个函数来判断s2 是否包含 s1的排列。如果是，返回 true;否则，返回 false 。换句话说，s1的排列之一是 s2的子串 。<br>提示:<br>1&lt;= s1 .length, s2.length &lt;= 104。s1和 s2 仅包含小写字母<br>示例1<br>输入  “ab”,”eidbaooo”<br>输出 true<br>说明 s2 包含 s1的排列之一(“ba”)</p><p>可以使用滑动窗口和哈希计数的方法来解决</p><p>思路</p><ol><li>使用两个频率数组 <code>count1</code> 和 <code>count2</code> 来存储 <code>s1</code> 和 <code>s2</code> 中相应窗口内字符的频率。</li></ol><p><code>count1</code> 记录 <code>s1</code> 中每个字符的频率。</p><p><code>count2</code> 记录 <code>s2</code> 中当前窗口的字符频率。</p><ol><li>初始时，设置一个长度为 <code>s1.length()</code> 的窗口在 <code>s2</code> 上，然后滑动这个窗口检查 <code>count2</code> 是否和 <code>count1</code> 相等。 如果相等，说明当前窗口中的字符是 <code>s1</code> 的一个排列，返回 <code>true</code>。</li><li>如果整个 <code>s2</code> 都没有找到符合条件的子串，返回 <code>false</code>。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">length</span>() &gt; s2.<span class="built_in">length</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count1</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span>, <span class="title">count2</span><span class="params">(<span class="number">26</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化数组 s1 和 s2 中的第一个窗口</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">        count1[s1[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        count2[s2[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否初始窗口匹配</span></span><br><span class="line">    <span class="keyword">if</span> (count1 == count2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在s2上进行窗口滑动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = s1.<span class="built_in">length</span>(); i &lt; s2.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 增加新的字符到滑动窗口中</span></span><br><span class="line">        count2[s2[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="comment">// 移除旧的字符（窗口中的第一个）</span></span><br><span class="line">        count2[s2[i - s1.<span class="built_in">length</span>()] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (count1 == count2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s1 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    string s2 = <span class="string">&quot;eidbaooo&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkInclusion</span>(s1, s2)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;false&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-寻找目标值"><a href="#3-寻找目标值" class="headerlink" title="3.寻找目标值"></a>3.寻找目标值</h2><p>详细描述<br>m*n的二维数组 plants 记录了园林景观的植物排布情况，具有以下特性:<br>每行中，每棵植物的右侧相邻植物不矮于该植物;<br>每列中，每棵植物的下侧相邻植物不矮于该植物。<br>请判断 plants 中是否存在目标高度值 target.提示:<br>0&lt;=n&lt;=1000<br>0&lt;=m&lt;=1000<br>示例1<br>输入<br>[[2,3,6,8],[4,5,8,9],[5,9,10,12]],8<br>输出<br>true</p><p>这个问题的二维数组有行和列都递增的性质，可以使用一种高效的算法——从矩阵的右上角或者左下角开始搜索，以避免线性搜索。</p><p><strong>1. 从右上角开始</strong>：在矩阵的右上角元素 <code>(0, n-1)</code> 开始，如果这个元素等于目标值 <code>target</code>，则返回 <code>true</code>。如果这个元素大于 <code>target</code>，那么可以排除当前列，向左移动；如果这个元素小于 <code>target</code>，则可以排除当前行，向下移动。</p><p><strong>2.不断移动</strong>直到找到目标值或者移动到矩阵的边界之外，此时可以确定目标值不存在于矩阵中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; plants, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (plants.<span class="built_in">empty</span>() || plants[<span class="number">0</span>].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m = plants.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> n = plants[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从右上角开始搜索</span></span><br><span class="line">    <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> col = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (row &lt; m &amp;&amp; col &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (plants[row][col] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (plants[row][col] &gt; target) &#123;</span><br><span class="line">            col--; <span class="comment">// 移动到左边一列</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row++; <span class="comment">// 移动到下一行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 没有找到目标值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; plants = &#123;</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">searchMatrix</span>(plants, target)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;false&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在while循环中</p><ul><li>如果当前元素等于 <code>target</code>，返回 <code>true</code>。</li><li>如果当前元素大于 <code>target</code>，向左移动一列。</li><li>如果当前元素小于 <code>target</code>，向下移动一行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-10-2</title>
      <link href="/posts/100fa4d5.html"/>
      <url>/posts/100fa4d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>WebSocket是一种协议  实时通讯利器</p><p>设计用于提供低延迟、全双工和长期运行的连接</p><p>WebSocket出现前的解决方案</p><p>轮询：客户端定期向服务器发送请求</p><p>长轮询：在客户端发出请求后，保持连接打开，等待新数据响应后再关闭连接</p><p>Comet：保持长连接，在返回请求后继续保持连接打开</p><p>WebSocket的优势</p><p>双向实时通信：允许在单个、长时间的连接上进行双向实时通信。在需要快速实时更新的应用程序里，比http更加高效</p><p>降低延迟：链接一旦建立便会保持开放，数据可以在客户端和服务器之间以比http更低的延迟进行传输</p><p>更高效的资源利用：可以减少重复请求和响应的开销，因为它的连接只需要建立一次</p><p>为什么需要心跳机制？</p><p>为了保持 WebSocket 稳定的长连接，在连接建立之后，服务器和客户端之间通过心跳包来保持连接状态，以防止连接因为长时间没有数据传输而被切断。</p><p>一种特殊的数据包!</p><p>不包含任何实际数据，仅用来维持连接状态</p><p>一个空数据帧</p><p>定期发送，确保链接仍然有效，避免长时间没有数据传输而被中断</p><p>如果一段时间内没有收到对方的心跳包，就可以认为连接已经断开</p><p>WebSocket 的限制</p><p>不提供加密功能：如果有安全上的需求，需采用其他方式来确保安全性，如:SSL协议，设置黑白名单</p><p>不支持古老的浏览器：不支持IE10 以前的版本。需要使用 AJAX或者其他方式来进行替代</p><p>优化很重要：保持长连接需要服务器不断地维护和处理连接状态，需要优化性能</p><h2 id="什么是promise？"><a href="#什么是promise？" class="headerlink" title="什么是promise？"></a>什么是promise？</h2><p>是一种用于管理异步操作的对象基于状态机的概念，可以处于三种状态</p><p>Pending-等待中</p><p>Fulfilled-已完成</p><p>Rejected-已拒绝</p><p>Promise引入链式调用</p><p>更流程地处理多个异步操作，避免深陷层层嵌套的回调函数中</p><p>promise.all</p><p>使用场景：</p><p>需求：处理多个可能出现错误的异步操作，如果其中任何一个失败，就记录错误。</p><p>社交媒体应用发帖：</p><ul><li>用户可以创建帖子并上传多张照片</li><li>当用户提交时，同时上传所有照片</li><li>所有图片上传完成后，才能创建帖子</li></ul><p>promise.race</p><p>参数也是一个数组，返回结果是一个Promise对象，Promise状态为数组中最先返回结果的状态</p><p>实际应用：</p><ul><li>先尝试本地缓存</li><li>如果时间过久则获取服务器</li></ul><h2 id="浏览器存储-Cookie-Local-Storage-Session-Storage"><a href="#浏览器存储-Cookie-Local-Storage-Session-Storage" class="headerlink" title="浏览器存储: Cookie + Local Storage + Session Storage"></a>浏览器存储: Cookie + Local Storage + Session Storage</h2><p>http是一种无状态的协议 实际web应用中需要保存状态信息</p><p>cookie 是由服务端产生的内容，发送到浏览器保存本地，Cookie被来回传递，所以它主要就用于记录用户的 会话状态、身份验证和跟踪用户的行为等。</p><p>Cookie优点：</p><ul><li>在浏览器和服务器间来回传递，适用于跟踪用户行为</li><li>可以手动设置过期时间，灵活调节存储时间</li></ul><p>缺点：</p><ul><li>每次请求都会携带Cookie数据，增加流量浪费性能</li><li>在http中明文传输不够安全，容易被篡改</li><li>存储容量小，一般为4KB</li></ul><p>localStorage优点：</p><ul><li>存储容量较大，一般为 5M</li><li>存储的数据在客户端浏览器可以永久保存，不担心丢失</li><li>操作方便，API友好能通过 JavaScript 直接访问</li></ul><p>缺点：</p><ul><li>一网站只能访问自己域下的 LS</li><li>不支持在不同浏览器间共享数据</li></ul><p>sessionStorage优点：</p><ul><li>数据只存储在客户端</li><li>刷新页面仍有原来会话数据</li><li>每个标签/窗口间数据独立</li></ul><p>缺点：</p><ul><li>不适合长期存储</li><li>数据不共享，使用场景有限</li></ul><p>什么时候能用到SessionStorage</p><ul><li>假设有一个多步骤表单流程</li><li>用户在填写过程中可以点击 上一步/下一步 修改数据</li><li>使用 Session Storage 暂存内容</li></ul><p>三者相同点：都保存在浏览器端、不支持跨域</p><p>不同点</p><div class="table-container"><table><thead><tr><th></th><th>Cookie</th><th>localstorage</th><th>SessionStorage</th></tr></thead><tbody><tr><td>存储内容是否发送到服务器</td><td>每次请求都会发送</td><td>只保存本地，不与服务器发送任何交互</td><td>只保存本地，不与服务器发送任何交互</td></tr><tr><td>数据存储大小上的不同</td><td>不能超过4KB</td><td>可以达到5MB</td><td>可以达到5MB</td></tr><tr><td>存储数据有效期限不同</td><td>需要自行设置失效时间</td><td>永久有效</td><td>关闭浏览器前有效</td></tr><tr><td>作用域不同</td><td>同源同窗口都是共享的</td><td>同源同窗口都是共享的</td><td>不同窗口不共享</td></tr></tbody></table></div><p>选择Cookie：在客户端和服务器之间共享数据+长期存储<br>选择Local Storage：只在客户端长期存储 +无需与服务器交互<br>选择Session Storage：只在客户端 + 会话期间暂存</p><h2 id="https-网络传输协议"><a href="#https-网络传输协议" class="headerlink" title="https:网络传输协议"></a>https:网络传输协议</h2><p>加密的两种基本类型</p><p>对称加密：加密方与解密方共用一套秘钥</p><p>非对称加密：基于成对的密钥对，加密方与解密方分别持有公钥与私钥</p><p>对称加密弊端：很难安全地告知双方这套秘钥</p><p>非对称加密弊端：所需算力远大于对称加密</p><p>重点：HTTPS 正是通过先利用非对称加密传输对称加密的密钥</p><p>再利用对称加密传输实际内容这样的方式，保证了它的安全性</p><p>电子证书：就是由第三方机构开具的证明，其中写明了xx公钥属于xx域名</p><p>如果你要访问的是这个域名，证书上就是你要使用的公钥</p><p>明文传输密码没什么安全隐患？当然也不是，  https 网络传输一个基本的安全保障</p><p>https下依然会受到中间人攻击，采用更多层次的加密手段，代表着更高的破解成本，也会带来更安全地信息传输 </p><p>HTTPS 是个应用层的协议，在明文内容离开和到达浏览器的时候，浏览器已经分别完成了加密与解密</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-9-27</title>
      <link href="/posts/100fa4d4.html"/>
      <url>/posts/100fa4d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-实现-两列布局-左边固定，右边自适应-两边高度随内容自适应"><a href="#1-实现-两列布局-左边固定，右边自适应-两边高度随内容自适应" class="headerlink" title="1.实现 两列布局  左边固定，右边自适应 两边高度随内容自适应"></a>1.实现 两列布局  左边固定，右边自适应 两边高度随内容自适应</h2><ul><li><strong>Flexbox</strong> 和 <strong>Grid</strong>：现代布局方法，易于实现和维护。</li><li><strong>浮动（Float）</strong>：传统方法，适用于简单的布局。</li><li><strong>绝对定位（Absolute Positioning）</strong>：适用于需要精确控制位置的布局。</li><li><strong>表格布局（Table Layout）</strong>：模拟表格的布局方式，适用于需要对齐的布局。</li><li><strong>多列布局（Multi-column Layout）</strong>：主要用于文本内容的多列显示，也可以用来实现两列布局。</li></ul><p>选择哪种方法取决于你的具体需求和个人偏好。现代项目中，推荐使用 Flexbox 或 Grid 布局，因为它们提供了更多的灵活性和更好的浏览器支持。</p><h2 id="2-ul中包含两个-li-再生成-里面是，h1中的内容是Hello！然后将这个li插入到ul的头部"><a href="#2-ul中包含两个-li-再生成-里面是，h1中的内容是Hello！然后将这个li插入到ul的头部" class="headerlink" title="2.ul中包含两个 li 再生成,里面是，h1中的内容是Hello！然后将这个li插入到ul的头部"></a>2.ul中包含两个 li 再生成<li>,里面是<h1>，h1中的内容是Hello！然后将这个li插入到ul的头部</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert LI at the Top of UL<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertLiAtTop()&quot;</span>&gt;</span>Insert LI at Top<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">insertLiAtTop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建新的 &lt;li&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> newLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建新的 &lt;h1&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> newH1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            newH1.<span class="property">textContent</span> = <span class="string">&#x27;Hello!&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将 &lt;h1&gt; 插入到 &lt;li&gt; 中</span></span></span><br><span class="line"><span class="language-javascript">            newLi.<span class="title function_">appendChild</span>(newH1);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 &lt;ul&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将新的 &lt;li&gt; 插入到 &lt;ul&gt; 的头部</span></span></span><br><span class="line"><span class="language-javascript">            ul.<span class="title function_">insertBefore</span>(newLi, ul.<span class="property">firstChild</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后面是我的思路  代码简单 思路清晰 hhh</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert LI at the Top of UL<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertLiAtTop()&quot;</span>&gt;</span>Insert LI at Top<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">insertLiAtTop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 &lt;ul&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用 innerHTML 方法将新的 &lt;li&gt; 插入到 &lt;ul&gt; 的头部</span></span></span><br><span class="line"><span class="language-javascript">            list.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;li&gt;&lt;h1&gt;Hello!&lt;/h1&gt;&lt;/li&gt;&#x27;</span> + list.<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert LI at the Top of UL<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertLiAtTop()&quot;</span>&gt;</span>Insert LI at Top<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">insertLiAtTop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 &lt;ul&gt; 元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myList&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用 insertAdjacentHTML 方法将新的 &lt;li&gt; 插入到 &lt;ul&gt; 的头部</span></span></span><br><span class="line"><span class="language-javascript">            list.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterbegin&#x27;</span>, <span class="string">&#x27;&lt;li&gt;&lt;h1&gt;Hello!&lt;/h1&gt;&lt;/li&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-在微前端架构中，为了避免父级项目和子集项目之间的样式冲突"><a href="#3-在微前端架构中，为了避免父级项目和子集项目之间的样式冲突" class="headerlink" title="3.在微前端架构中，为了避免父级项目和子集项目之间的样式冲突"></a>3.在微前端架构中，为了避免父级项目和子集项目之间的样式冲突</h2><p>可以采取以下措施：</p><ol><li><strong>使用 CSS Modules</strong>：将样式作用域化。</li><li><strong>使用 scoped 样式</strong>：限制样式的作用范围。</li><li><strong>使用命名空间</strong>：为样式添加前缀或命名空间。</li><li><strong>使用 Shadow DOM</strong>：完全隔离样式。</li><li><strong>使用第三方库</strong>：利用微前端框架提供的工具和配置。</li></ol><p>通过这些方法，可以有效地管理和避免样式冲突，确保微前端项目的顺利运行。</p><h2 id="4-基于canvas技术实现在线签名和画板功能"><a href="#4-基于canvas技术实现在线签名和画板功能" class="headerlink" title="4.基于canvas技术实现在线签名和画板功能"></a>4.基于canvas技术实现在线签名和画板功能</h2><p>项目输出：</p><p>分为主画板，悬浮板，签名板 三块内容</p><p>功能从签名画板开始，一般是需要先获取签名画板并且初始化canvas画布（首先获取canvas元素，canvas元素.getContext(‘2d’)获取到的是canvas对象）</p><p>然后签名板功能需要监听鼠标事件，来完成书写。从以下三部分去考虑：</p><ol><li>当鼠标按下mousedown的时候，先确定起点位置 moveTo可以确定起点，但也要注意一个问题（clientX是相对屏幕的位置，我们需要的是相对于画板的位置 这里得用 offsetX）</li></ol><p>注意：此处 每次按下 beginPath() 每次绘制需要是一条新路径（如果不考虑这点 后面什么改变颜色 线条粗细 会有问题</p><ol><li>鼠标移动mousemove的时候，并且是在鼠标按下的时候 需要不断的加新点，光加点还不行，要连点成线。一边lineTo一边stroke</li><li>当鼠标松开的时候 关闭开关 不再回绘制了</li></ol><p>画完之后，是确认与清除功能</p><p>清除整个签名画板 用clearRect函数，从起点开始，清除一个宽高多少的矩形范围</p><p>确认的话，将绘制的签名转绘到悬浮板上，floatCtx.drawImage(sign,0,0,200,80)</p><p>然后通过拖动浮层板调整签名在主画板的位置</p><p>在点击确认导出的时候，将浮层画板的签名转绘到主画板上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">save</span>(<span class="params"></span>)&#123;</span><br><span class="line">mainCtx.<span class="title function_">drawImage</span>(float,left.<span class="property">value</span>,top.<span class="property">value</span>,<span class="number">200</span>,<span class="number">80</span>)</span><br><span class="line">    <span class="keyword">let</span> base64=main.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(base64);</span><br><span class="line">    <span class="comment">// 把拿到的base64发送给后端保存起来就行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浅谈前端拖拽功能</p><p>前端组件 VueDraggable VueDraggablePlus  完全继承了 之前的Sortable.js的所有功能</p><p><a href="https://search.bilibili.com/all?from_source=webcommentline_search&amp;keyword=element%20plus&amp;seid=9318871269317883971">element plus</a>的拖拽实现不错，不借助定位  packages/hooks/use-draggable</p><p><a href="https://github.com/element-plus/element-plus/blob/dev/packages/hooks/use-draggable/index.ts">https://github.com/element-plus/element-plus/blob/dev/packages/hooks/use-draggable/index.ts</a></p><p>而传统实现拖拽的思路是：大方向主要是在mousedown，mousemove，mouseup的状态下，记录当前鼠标的坐标<code>startX=e.clientX</code>,<code>startY=e.clientY</code>;当前元素的左上角坐标<code>this.initialX=this.$refs.draggable.offsetLeft;</code> <code>this.initialY=this.$refs.draggable.offsetTop;</code></p><p>而后 在鼠标移动的过程中，需要去计算 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const deltaX = e.clientX - this.startX;</span><br><span class="line">const deltaY = e.clientY - this.startY; // 通过鼠标移动的距离计算</span><br><span class="line">const newX = this.initalX+deltaX;</span><br><span class="line">const newY = this.initalY+deltaY;</span><br></pre></td></tr></table></figure><p>鼠标松开时，解除拖拽状态</p><h2 id="5-页面输入-url-到页面渲染都发生了什么"><a href="#5-页面输入-url-到页面渲染都发生了什么" class="headerlink" title="5.页面输入 url 到页面渲染都发生了什么"></a>5.页面输入 url 到页面渲染都发生了什么</h2><ol><li>输入url </li><li>DNS解析</li><li>建立tcp连接</li><li>SSL/TLS握手（https）</li><li>发送http请求</li><li>服务器处理请求生成响应</li><li>浏览器接收http响应</li><li>解析html（构建 DOM树 CSSOM树  渲染树）</li><li>布局和绘制</li><li>加载资源</li></ol><h2 id="6-包装对象"><a href="#6-包装对象" class="headerlink" title="6.包装对象"></a>6.包装对象</h2><ul><li>String()</li><li>Number()</li><li>Boolean()</li><li>Array()</li><li>Object()</li><li>Function()</li><li>RegExp()</li><li>Date()</li><li>Error()</li><li>Symbol()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 构造函数创建出来的对象，封装了基本类型值 abc</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// &quot;object&quot;</span></span><br><span class="line">a.<span class="property">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>valueOf - 拿到封装对象里的基本类型数据</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-9-26</title>
      <link href="/posts/100fa4d3.html"/>
      <url>/posts/100fa4d3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-场景：对象里有a、b、c、d四个属性，当a属性被修改时，需要联动的修改c、d两个属性，应该怎么做？"><a href="#1-场景：对象里有a、b、c、d四个属性，当a属性被修改时，需要联动的修改c、d两个属性，应该怎么做？" class="headerlink" title="1.场景：对象里有a、b、c、d四个属性，当a属性被修改时，需要联动的修改c、d两个属性，应该怎么做？"></a>1.场景：对象里有a、b、c、d四个属性，当a属性被修改时，需要联动的修改c、d两个属性，应该怎么做？</h3><p> 可以使用 <strong>getter/setter</strong> 或 <strong>Proxy</strong> 来监控属性的变化 </p><ol><li>通过定义对象的 getter 和 setter 来监控 <code>a</code> 的变化，并在其被修改时更新 <code>c</code> 和 <code>d</code>。   </li><li>通过 Proxy 可以拦截对对象的所有操作，包括属性的读取和写入。  </li></ol><h3 id="2-场景：实现两行两列"><a href="#2-场景：实现两行两列" class="headerlink" title="2.场景：实现两行两列"></a>2.场景：实现两行两列</h3><p>grid flex float table  通常推荐使用 Flexbox 或 Grid</p><h3 id="3-弹性布局里面，flex：1是哪些参数的缩写？都表示什么意思"><a href="#3-弹性布局里面，flex：1是哪些参数的缩写？都表示什么意思" class="headerlink" title="3.弹性布局里面，flex：1是哪些参数的缩写？都表示什么意思"></a>3.弹性布局里面，flex：1是哪些参数的缩写？都表示什么意思</h3><p>它实际上包含了三个属性：<code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code>。具体来说，<code>flex: 1;</code> 的完整形式是 <code>flex: 1 1 0;</code>。</p><p><strong>flex-grow：</strong>默认值是0，定义了子元素在主轴方向上的增长比例。如果可用空间多于所需空间，子元素将根据这个比例增长。设置值为<code>1</code> 表示该子元素可以增长，增长的比例为1。如果有多个子元素都设置了相同的 <code>flex-grow</code> 值，它们将平均分配剩余空间。</p><p><strong>flex-shrink</strong>：默认值1，定义了子元素在主轴方向上的收缩比例。如果可用空间不足，子元素将根据这个比例收缩。设置值为<code>1</code> 表示该子元素可以收缩，收缩的比例为1。如果有多个子元素都设置了相同的 <code>flex-shrink</code> 值，它们将平均分配不足的空间。</p><p><strong>flex-basis</strong>：默认值是auto，定义了子元素在主轴方向上的初始大小，可以是固定值（如 <code>100px</code>）或百分比（如 <code>50%</code>），也可以是 <code>auto</code>。设置值为<code>0</code> 表示子元素的初始大小为0。这意味着子元素将完全依赖于 <code>flex-grow</code> 和 <code>flex-shrink</code> 来确定其最终大小。</p><h3 id="4-同源策略是什么？CORS涉及到的参数有哪些？"><a href="#4-同源策略是什么？CORS涉及到的参数有哪些？" class="headerlink" title="4.同源策略是什么？CORS涉及到的参数有哪些？"></a>4.同源策略是什么？CORS涉及到的参数有哪些？</h3><p>仅当它们的协议、域名和端口号都相同，两个URL被认为是同源的</p><p>同源策略的主要目的是防止恶意网站读取其他网站的敏感数据。例如，当用户在一个浏览器窗口中登录了银行网站，而同时打开了另一个窗口访问了恶意网站，如果没有同源策略的保护，恶意网站可能尝试通过 JavaScript 访问银行网站的数据，从而导致用户信息泄露。</p><p>CORS（跨源资源共享）：是一种机制，它使用额外的 HTTP 头来告诉浏览器允许一个域上的 Web 应用程序去请求另一个域上的选定资源。这种机制为服务器提供了更细粒度的控制，允许它们指定哪些外部来源可以访问它们的资源。</p><h3 id="5-ES6中你知道哪些数据结构？"><a href="#5-ES6中你知道哪些数据结构？" class="headerlink" title="5.ES6中你知道哪些数据结构？"></a>5.ES6中你知道哪些数据结构？</h3><p><code>Map</code>是一个键值对的集合，其中键和值可以是任意类型。</p><p><code>Set</code>是一个存储唯一值的集合，不允许重复。</p><p><code>WeakMap</code>是一个键值对的集合，其中键必须是对象，值可以是任意类型。</p><p><code>WeakSet</code> 是一个存储唯一对象的集合，不允许重复。</p><p>Array数组，虽然数组不是 ES6 新引入的数据结构，但在 ES6 中，数组新增了一些有用的方法，如 <code>find</code>、<code>findIndex</code>、<code>includes</code> 等。</p><p>String字符串，虽然字符串也不是新的数据结构，但 ES6 为字符串增加了一些新的方法，如 <code>startsWith</code>、<code>endsWith</code>、<code>includes</code> 等。</p><p><code>Symbol</code>是一种新的原始数据类型，用于创建唯一的标识符。</p><p>主要用途是确保对象属性的名称不会发生冲突，特别是在大型应用程序或多个模块协同工作时。</p><p><code>Symbol</code> 可以用于创建私有属性，这些属性不会被意外地访问或修改。</p><h3 id="6-map和set的区别？以及map的key值可以是什么"><a href="#6-map和set的区别？以及map的key值可以是什么" class="headerlink" title="6.map和set的区别？以及map的key值可以是什么"></a>6.map和set的区别？以及map的key值可以是什么</h3><p><code>Map</code> 是一个键值对的集合，其中键和值可以是任意类型。</p><p><code>Set</code> 是一个存储唯一值的集合，不允许重复。</p><ul><li><code>Map</code> 提供了 <code>set</code>、<code>get</code> 、<code>has</code>等方法。</li><li><code>Set</code> 提供了 <code>add</code>、<code>delete</code>、<code>has</code> 等方法。</li></ul><h3 id="7-weakSet和Set有什么区别？"><a href="#7-weakSet和Set有什么区别？" class="headerlink" title="7.weakSet和Set有什么区别？"></a>7.weakSet和Set有什么区别？</h3><p><code>Set</code> 和 <code>WeakSet</code> 都是用于存储唯一值的集合，但 <code>Set</code> 更通用，可以存储任何类型的值，而 <code>WeakSet</code> 只能存储对象且对象是弱引用的。选择使用哪一个取决于你的具体需求。如果你需要存储任意类型的唯一值并且需要强引用，使用 <code>Set</code>；如果你需要存储对象且希望这些对象在没有其他引用时可以被垃圾回收，使用 <code>WeakSet</code>。</p><h3 id="8-Vue的双向绑定的原理"><a href="#8-Vue的双向绑定的原理" class="headerlink" title="8.Vue的双向绑定的原理"></a>8.Vue的双向绑定的原理</h3><p>Vue 的双向绑定主要依赖于两个关键技术：<strong>数据劫持</strong>（Data Binding）<strong>和发布订阅模式</strong>（Observer Pattern）</p><ol><li>数据劫持<ul><li>Vue使用Object.defineProperty(vue3中使用proxy)来劫持对象的属性，从而在数据发生变化时触发相应的更新操作。</li><li>在 Vue 2.x 中，Vue 使用 <code>Object.defineProperty</code> 来劫持对象的属性。每当数据对象的属性被访问或修改时，Vue 都能捕获到这些操作，并执行相应的逻辑。</li><li>在 Vue 3 中，Vue 使用 <code>Proxy</code> 来劫持对象的属性。<code>Proxy</code> 相比 <code>Object.defineProperty</code> 更加强大，可以拦截更多的操作，并且不需要递归遍历对象的所有属性。</li></ul></li><li>发布/订阅模式<ul><li>Vue 使用发布/订阅模式来实现视图和数据之间的通信。当数据发生变化时，Vue 会通知所有订阅者（即视图中的相关部分），这些订阅者会根据新的数据重新渲染视图。</li><li>观察者负责监听数据的变化。当数据发生变化时，观察者会通知所有订阅者。</li><li>订阅者负责更新视图。当数据发生变化时，订阅者会接收到通知并更新视图。</li></ul></li><li>模版编译<ul><li>Vue 的模板编译器会解析模板中的指令和表达式，并生成相应的渲染函数。在渲染过程中，Vue 会创建观察者和订阅者，从而实现数据和视图的双向绑定。</li></ul></li></ol><p>Vue 的双向数据绑定主要通过数据劫持和发布/订阅模式实现。数据劫持通过 <code>Object.defineProperty</code> 或 <code>Proxy</code> 劫持对象的属性，使其在数据变化时能够触发相应的更新操作。发布/订阅模式通过观察者和订阅者实现数据和视图之间的通信，确保数据变化时视图能够及时更新。模板编译器则负责解析模板中的指令和表达式，生成渲染函数，并创建观察者和订阅者。</p><h3 id="9-浏览器事件循环"><a href="#9-浏览器事件循环" class="headerlink" title="9.浏览器事件循环"></a>9.浏览器事件循环</h3><p>事件循环是浏览器处理异步任务的一种机制。它确保了浏览器可以在处理用户交互、网络请求、定时器等异步任务的同时，还能保持页面的响应性。</p><p>在单线程的 JavaScript 环境中，所有的代码都是按顺序执行的。但是，有些任务（如网络请求、定时器、用户输入等）需要等待一段时间才能完成。如果没有事件循环，浏览器就会在等待这些任务完成时阻塞，导致页面卡顿。事件循环的作用就是让这些异步任务在后台执行，不会阻塞主线程，从而保持页面的流畅。</p><ul><li><strong>任务队列</strong>：存放宏任务，如 <code>setTimeout</code>、点击事件、事件请求等。</li><li><strong>微任务队列</strong>：存放微任务，如 <code>Promise</code> 回调等。</li><li><strong>事件循环</strong>：每次执行一个宏任务后，清空微任务队列，然后进行渲染，再取下一个宏任务，如此循环。</li></ul><h3 id="10-浏览器缓存"><a href="#10-浏览器缓存" class="headerlink" title="10.浏览器缓存"></a>10.浏览器缓存</h3><p><strong>缓存类型：</strong></p><p><strong>强缓存</strong></p><p>强缓存是指浏览器在请求资源时，直接从本地缓存中读取资源，而不会向服务器发送请求。强缓存主要依赖于 HTTP 响应头中的 <code>Cache-Control</code> 和 <code>Expires</code> 字段。</p><p>Cache-Control</p><ul><li><code>max-age=&lt;seconds&gt;</code>：表示资源在本地缓存中的最大有效时间（以秒为单位）。例如，<code>Cache-Control: max-age=3600</code> 表示资源在本地缓存中有效 1 小时。</li><li><code>no-cache</code>：表示在每次请求资源时，浏览器都会向服务器发送请求，但服务器可能会返回 304 Not Modified 状态码，告诉浏览器使用缓存中的资源。</li><li><code>no-store</code>：表示浏览器不应缓存该资源。</li></ul><p>Expires</p><ul><li>表示资源在本地缓存中的过期时间，是一个具体的日期和时间。例如，<code>Expires: Wed, 21 Oct 2021 07:28:00 GMT</code>。如果同时存在 <code>Cache-Control</code> 和 <code>Expires</code>，优先使用 <code>Cache-Control</code>。</li></ul><p><strong>协商缓存</strong></p><p>协商缓存是指浏览器在请求资源时，会向服务器发送请求，但服务器可以根据资源的最新状态决定是否返回新的资源。协商缓存主要依赖于 HTTP 请求头中的 <code>If-None-Match</code> 和 <code>If-Modified-Since</code> 字段，以及响应头中的 <code>ETag</code> 和 <code>Last-Modified</code> 字段。</p><p><strong>缓存策略</strong>：</p><ul><li><strong>强缓存优先</strong>：浏览器首先检查强缓存是否有效，如果有效则直接使用缓存中的资源；如果无效，则进入协商缓存阶段。</li><li><strong>协商缓存</strong>：浏览器向服务器发送请求，服务器根据资源的最新状态决定是否返回新的资源。</li></ul><h3 id="11-怎么做缓存？前端这块怎么实现？"><a href="#11-怎么做缓存？前端这块怎么实现？" class="headerlink" title="11.怎么做缓存？前端这块怎么实现？"></a>11.怎么做缓存？前端这块怎么实现？</h3><p>前端实现缓存的方式有很多，主要包括通过 HTTP 缓存、Service Worker、本地存储（如 localStorage、sessionStorage、IndexedDB）等。下面详细介绍这些方法及其具体实现。</p><ol><li>HTTP 缓存是最常见的缓存方式，通过设置 HTTP 响应头来控制浏览器的缓存行为。</li><li>强缓存和协商缓存属于http缓存中的</li><li>Service Worker 是一种运行在浏览器后台的脚本，可以拦截和处理网络请求，实现离线缓存和资源预加载。</li><li>本地存储，<code>localStorage</code> 和 <code>sessionStorage</code> 是两种简单的键值对存储方式，适合存储少量数据。</li><li><code>IndexedDB</code> 是一种更复杂的本地存储方式，适合存储大量结构化数据。</li></ol><h3 id="12-箭头函数的特点"><a href="#12-箭头函数的特点" class="headerlink" title="12.箭头函数的特点"></a>12.箭头函数的特点</h3><ol><li>简洁的语法</li><li>没有自己的this</li><li>不能作为构造函数</li><li>没有arguments对象</li><li>没有原型属性</li><li>this绑定不可变</li><li>不能使用yield命令</li></ol><h3 id="13-HTTP2和HTTP3新增了哪些功能"><a href="#13-HTTP2和HTTP3新增了哪些功能" class="headerlink" title="13.HTTP2和HTTP3新增了哪些功能"></a>13.HTTP2和HTTP3新增了哪些功能</h3><p>HTTP/2 主要关注于提高现有网络基础设施上的性能，通过多路复用、头部压缩和服务端推送等技术显著改善了用户体验。而 HTTP/3 则是在此基础上进一步利用新的传输层协议 QUIC，解决了 TCP 协议的一些固有问题，如握手延迟和连接迁移等，从而提供了更加流畅和高效的网络体验。</p><h3 id="14-websocket是什么-它的应用场景是什么"><a href="#14-websocket是什么-它的应用场景是什么" class="headerlink" title="14.websocket是什么? 它的应用场景是什么"></a>14.websocket是什么? 它的应用场景是什么</h3><p>WebSocket 作为一种高效、低延迟的双向通信协议，特别适合于需要实时交互的应用场景。</p><p><strong>主要特点</strong></p><ol><li><strong>全双工通信</strong>：</li></ol><ul><li><ul><li>WebSocket 提供了真正的双向通信能力，即客户端和服务器可以同时发送和接收数据，而不需要像传统 HTTP 那样每次通信都需要发起一个新的请求。</li></ul></li></ul><ol><li><strong>低延迟</strong>：</li></ol><ul><li><ul><li>由于 WebSocket 连接是一直保持打开状态的，因此数据交换几乎是即时的，消除了 HTTP 请求/响应模型中的延迟。</li></ul></li></ul><ol><li><strong>轻量级</strong>：</li></ol><ul><li><ul><li>相比于传统的 HTTP 协议，WebSocket 的头部信息更小，减少了不必要的网络流量。</li></ul></li></ul><ol><li><strong>支持多种数据格式</strong>：</li></ol><ul><li><ul><li>WebSocket 可以传输文本数据和二进制数据，这使得它可以适用于各种应用场景。</li></ul></li></ul><p><strong>应用场景</strong></p><ol><li><strong>实时聊天应用</strong>：</li></ol><ul><li><ul><li>实时聊天是最常见的 WebSocket 应用场景之一。无论是个人聊天还是群聊，WebSocket 都能确保消息的即时传递。</li></ul></li></ul><ol><li><strong>在线游戏</strong>：</li></ol><ul><li><ul><li>在线多人游戏通常需要低延迟和高频率的数据交换，WebSocket 能够很好地满足这一需求，提供流畅的游戏体验。</li></ul></li></ul><ol><li><strong>实时协作工具</strong>：</li></ol><ul><li><ul><li>如在线文档编辑器、代码协作平台等，需要多个用户同时操作同一个文件或项目，WebSocket 可以实现实时同步更新。</li></ul></li></ul><ol><li><strong>实时数据分析和监控</strong>：</li></ol><ul><li><ul><li>对于需要实时更新数据的仪表盘或监控系统，WebSocket 可以快速地将最新的数据推送到客户端，使用户能够及时做出反应。</li></ul></li></ul><h3 id="15-CSS动画-怎么实现一个位置到另一个位置的移动？动画怎么设置不循环播放？"><a href="#15-CSS动画-怎么实现一个位置到另一个位置的移动？动画怎么设置不循环播放？" class="headerlink" title="15.CSS动画  怎么实现一个位置到另一个位置的移动？动画怎么设置不循环播放？"></a>15.CSS动画  怎么实现一个位置到另一个位置的移动？动画怎么设置不循环播放？</h3><ol><li>定义关键帧动画：使用 <code>@keyframes</code> 规则来定义动画的关键帧。关键帧指定了动画在特定时间点的状态。</li></ol><ol><li>应用动画：使用 <code>animation</code> 属性将定义好的动画应用到元素上，并设置动画的播放次数。</li><li>控制动画播放次数<ul><li><code>animation-iteration-count</code> 属性可以设置动画的播放次数。默认值是 <code>1</code>，表示只播放一次。</li><li><code>forwards</code> 值可以确保动画结束后保持最后一个关键帧的状态。</li></ul></li></ol><h3 id="16-JS原型链-怎么给Array原型数组添加方法"><a href="#16-JS原型链-怎么给Array原型数组添加方法" class="headerlink" title="16.JS原型链   怎么给Array原型数组添加方法"></a>16.JS原型链   怎么给Array原型数组添加方法</h3><p><strong>原型链</strong>：当尝试访问一个对象的属性时，JavaScript 会首先在对象本身上查找该属性。如果找不到，就会在对象的原型上查找，依此类推，直到找到该属性或到达原型链的末端（即 <code>null</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 average 方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">average</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 处理空数组</span></span><br><span class="line">  <span class="keyword">const</span> total = <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> total / <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">average</span>()); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure><h3 id="17-闭包"><a href="#17-闭包" class="headerlink" title="17.闭包"></a>17.闭包</h3><p>闭包是在一个函数内部创建另一个函数，并且内部函数可以访问外部函数的变量和参数。即使外部函数已经执行完毕，内部函数仍然可以访问这些变量。</p><h4 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h4><ol><li><strong>数据封装</strong>：闭包可以用来封装变量，防止外部直接访问和修改。</li><li><strong>持久状态</strong>：闭包可以保持函数执行后的状态，使得函数可以记住之前的执行情况。</li><li><strong>模块化</strong>：闭包可以用于实现模块化编程，隐藏内部实现细节。</li></ol><h4 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h4><ol><li><strong>内存泄漏</strong>：如果闭包不当使用，可能会导致内存泄漏，因为闭包会持有对外部变量的引用，使得这些变量不能被垃圾回收。</li><li><strong>性能影响</strong>：闭包可能会增加内存和性能开销，特别是在大量使用闭包的情况下。</li></ol><p>闭包的核心在于内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。</p><h3 id="18-v-model的原理"><a href="#18-v-model的原理" class="headerlink" title="18.v-model的原理"></a>18.v-model的原理</h3><p><code>v-model</code> 是 Vue.js 中实现双向数据绑定的一种便捷方式。它通过 <code>v-bind</code> 和 <code>v-on</code> 的组合，将表单元素的值与 Vue 实例的数据属性绑定在一起，实现了数据的双向同步。</p><p>响应式设计的核心原理包括使用媒体查询来根据设 备特性应用不同的样式，使用灵活的布局技术（如百分比单位、弹性单位、Flexbox 和 Grid）来创建可伸缩的布局，以及确保图像和其他媒体元素在不同屏幕尺寸下保持比例并自动调整大小。通过这些技术，可以确保网页在不同设备和屏幕尺寸上提供良好的用户体验。</p><h3 id="代码题"><a href="#代码题" class="headerlink" title="代码题"></a>代码题</h3><ol><li>给一个数，判断是斐波那契数列数列的第几个数，如果不存在于斐波那契数列中，则返回-1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.生成斐波那契数列，直到生成的数大于或等于给定的数。</span></span><br><span class="line"><span class="comment">// 2.检查生成的数列中是否存在给定的数。</span></span><br><span class="line"><span class="comment">// 3.如果存在，返回它的位置；如果不存在，返回 -1。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 生成斐波那契数列，直到生成的数大于或等于 n</span></span><br><span class="line">    <span class="keyword">let</span> fibSequence = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (fibSequence[fibSequence.<span class="property">length</span> - <span class="number">1</span>] &lt; n) &#123;</span><br><span class="line">        fibSequence.<span class="title function_">push</span>(fibSequence[fibSequence.<span class="property">length</span> - <span class="number">1</span>] + fibSequence[fibSequence.<span class="property">length</span> - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 n 是否在斐波那契数列中</span></span><br><span class="line">    <span class="keyword">const</span> index = fibSequence.<span class="title function_">indexOf</span>(n);</span><br><span class="line">    <span class="keyword">return</span> index !== -<span class="number">1</span> ? index : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>压缩字符串 aaaabbbaaacccdd =&gt; a4b3a3c3d2  怎么实现</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compressString</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> currentChar = s[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === currentChar) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += <span class="string">`<span class="subst">$&#123;currentChar&#125;</span><span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line">            currentChar = s[i];</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加最后一个字符及其计数</span></span><br><span class="line">    result += <span class="string">`<span class="subst">$&#123;currentChar&#125;</span><span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> inputStr = <span class="string">&quot;aaaabbbaaacccdd&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> compressedStr = <span class="title function_">compressString</span>(inputStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(compressedStr);  <span class="comment">// 输出: a4b3a3c3d2</span></span><br></pre></td></tr></table></figure><ol><li>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</li></ol><p>说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例: 输入:  </span></span><br><span class="line"><span class="comment">// nums1 = [1,2,3,0,0,0], m = 3  </span></span><br><span class="line"><span class="comment">// nums2 = [2,5,6], n = 3  </span></span><br><span class="line"><span class="comment">// 输出: [1,2,2,3,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>)&#123;</span><br><span class="line">  <span class="comment">// 初始化两个指针的指向，初始化 nums1 尾部索引k</span></span><br><span class="line">  <span class="keyword">let</span> i = m-<span class="number">1</span>, j = n-<span class="number">1</span>, k = m + n -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当两个数组都没遍历完时，指针同步移动</span></span><br><span class="line">  <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 取较大的值，从末尾往前填补</span></span><br><span class="line">    <span class="keyword">if</span>(nums1[i] &gt;= nums2[j])&#123;</span><br><span class="line">      nums1[k] = nums1[i]</span><br><span class="line">      i--;</span><br><span class="line">      k--;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      nums1[k] = nums2[j]</span><br><span class="line">      j--;</span><br><span class="line">      k--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// nums2 留下的情况，特殊处理一下</span></span><br><span class="line">  <span class="keyword">while</span>(j &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    nums1[k] = nums2[j]</span><br><span class="line">    j--;</span><br><span class="line">    k--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>每3秒打印一个helloworld，总共执行4次</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  repeatFunc = <span class="title function_">repeat</span>(<span class="variable language_">console</span>.<span class="property">log</span>, <span class="number">4</span>, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">repeatFunc</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每3秒打印一个helloworld，总计执行4次</span></span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">repeat</span>(<span class="params">fn, count, timeout</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span>  <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span>  num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">let</span>  timer</span><br><span class="line">            timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                 num++</span><br><span class="line">                <span class="keyword">if</span> (num &gt;= count) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>()</span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="title function_">fn</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]))</span><br><span class="line">            &#125;, timeout);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-9-25</title>
      <link href="/posts/100fa4d2.html"/>
      <url>/posts/100fa4d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码性能指标"><a href="#代码性能指标" class="headerlink" title="代码性能指标"></a>代码性能指标</h2><p><strong>健壮性</strong>:出现预期之外的情况，是否可控<br><strong>可复用性</strong>:后面出现同样功能，能否复用<br><strong>可拓展性</strong>:新功能是否容易拓展加入<br><strong>耦合度</strong>:模块发生变动，是否会相互影响<br><strong>简洁性</strong>:代码量的多少<br><strong>算法复杂度</strong>:实现某个操作需要的步骤<br><strong>可读性</strong>:他人阅读是否易懂</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p><strong>单一职责</strong>:一个模块应该只有一个职责<br><strong>最少知道</strong>:两个模块互相知道越少越好<br><strong>开闭原则</strong>:对修改关闭，对拓展开放<br><strong>接口隔离</strong>:一个模块不应该有他不需要的方法<br><strong>里氏替换原则</strong>: 基类可以被任何子类替换<br><strong>依赖倒置</strong>:实依赖抽象，不依赖具体</p><p>单一职责：对应于所有的语言中，我们之前说过编程本质上就是设计好模块和模块的沟通。而单一职责原则是我们设计模块应该做什么的最基本考虑。这个模块只负责自己的事，如果有额外事情，应该在独立为其他模块，而不应该在模块里增加。</p><p>最少知道：低耦合使我们永远追求的目标，而低耦合的前提就是两个模块之间不需要过多的业务相关，最好一个模块只需要掉另一个模块的接口就行。</p><p>开闭原则：对拓展开放，对修改关闭。我们平常去设计模块，如果以后有变更可能。可以准备一个拓展处可以是一个参数，也可以是一个方法。我们改代码也是一个道理，改动以前老代码，尽量新增而不要去修改。</p><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><ol><li>创建型：怎么创建模块或对象的技巧</li><li>结构型：怎么设计一个模块的对外接口，以及和其他模块的组织结构</li><li>行为型：怎么解决模块之间的沟通问题，模块怎么沟通更低耦合</li></ol><h2 id="几道笔试题"><a href="#几道笔试题" class="headerlink" title="几道笔试题"></a>几道笔试题</h2><p>编写一个函数flattenArray，接收一个嵌套数组作为参数，返回一个一维数组。</p><p>示例输入:[1,[2,[3,4]],5]</p><p>示例编出:[1,2,3,4,5]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r1 = <span class="built_in">require</span>(<span class="string">&quot;readline&quot;</span>).<span class="title function_">createInterface</span>(&#123;<span class="attr">input</span>:process.<span class="property">stdin</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> iter = r1[symbol.<span class="property">asyncIterator</span>]();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">readline</span> = <span class="keyword">async</span>(<span class="params"></span>)=&gt;(<span class="keyword">await</span> iter.<span class="title function_">next</span>()).<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fattenArray</span>=(<span class="params">arr</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">flat,toFlatten</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> flat.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(toFlatten)?<span class="title function_">fattenArray</span>(toFlatten):toFlatten);</span><br><span class="line">  &#125;,[]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> line;</span><br><span class="line">  <span class="keyword">while</span>(line=<span class="keyword">await</span> <span class="title function_">readline</span>())&#123;</span><br><span class="line">    <span class="keyword">let</span> inputArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(line);</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">fattenArray</span>(inputArray);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个 Stack 类，实现 push、pop方法</p><p>示例操作:stack.push(1); stack.push(2);console.log(stack.pop());示例输出:2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个 Stack 类的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>=[];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">ele</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>===<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求数组中的最大值 可以用一个循环 但也可用一行代码  Math.max(…arr);</p><p>如何翻转一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...str].<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><p>找出任意html中的所有不重复的html标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findUniqueTags</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用一个 Set 数据结构来存储不重复的标签名称</span></span><br><span class="line">  <span class="keyword">const</span> tags = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历所有节点，并收集标签名称</span></span><br><span class="line">  (<span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="title class_">Node</span>.<span class="property">ELEMENT_NODE</span>) &#123;</span><br><span class="line">      tags.<span class="title function_">add</span>(node.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>()); <span class="comment">// 保存标签名，统一转为小写</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历子节点</span></span><br><span class="line">    node.<span class="property">childNodes</span>.<span class="title function_">forEach</span>(traverse);</span><br><span class="line">  &#125;)(<span class="variable language_">document</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(tags); <span class="comment">// 将 Set 转换为数组并返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该函数来获取所有不重复的 HTML 标签</span></span><br><span class="line"><span class="keyword">const</span> uniqueTags = <span class="title function_">findUniqueTags</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueTags);</span><br></pre></td></tr></table></figure><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><ol><li>在函数中去调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(walker)&#125;</span><br><span class="line"><span class="title function_">get</span>()</span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure><ol><li>函数作为对象的方法被调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;walker&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑步`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">run</span>()</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person)</span><br></pre></td></tr></table></figure><p>就这两种情况，一种是在函数中去调用，指向window。一种是函数作为对象的方法被调用</p><p>vue响应式原理  也是双向绑定的原理</p><h2 id="vue响应式原理-也是双向绑定的原理"><a href="#vue响应式原理-也是双向绑定的原理" class="headerlink" title="vue响应式原理  也是双向绑定的原理"></a>vue响应式原理  也是双向绑定的原理</h2><p>Vue2 中的响应式系统 </p><ol><li><strong>数据劫持</strong></li></ol><ul><li>当你在 Vue 的 <code>data</code> 中定义一个对象，例如 <code>&#123; name: &#39;Alice&#39; &#125;</code>，Vue 会使用 <code>Object.defineProperty</code> 把 <code>name</code> 属性变成一个“响应式”属性。</li><li>这意味着 Vue 在幕后对 <code>name</code> 属性进行了“劫持”，它添加了“getter”和“setter”。当你读取 <code>name</code> 时，Vue 的“getter”函数会被触发；当你修改 <code>name</code> 时，Vue 的“setter”函数会被触发。</li></ul><ol><li><strong>依赖收集</strong></li></ol><ul><li>每个“响应式”属性都有一个“依赖收集器”（一个数组或 Set），用来存储所有依赖于该属性的“观察者”（即订阅者）。</li><li>当你在模板中使用 <code>&#123;&#123; name &#125;&#125;</code> 绑定了一个数据，Vue 会把这个模板当作“观察者”，注册到 <code>name</code> 属性的依赖收集器中。</li><li>当 <code>name</code> 改变时，Vue 会通知它的所有“观察者”，重新计算和更新视图。</li></ul><ol><li><strong>通知更新</strong></li></ol><ul><li>当数据被修改时，Vue 的“setter”会被触发。<code>setter</code> 函数会告诉依赖收集器，让它的所有“观察者”重新执行，从而更新视图。  </li></ul><p>Vue 3 中的变化  </p><p>在 Vue 3 中，响应式系统用 <code>Proxy</code> 代替了 <code>Object.defineProperty</code>，这带来了以下优势  </p><ol><li><strong>性能提升</strong></li></ol><ul><li><code>Proxy</code> 可以直接劫持整个对象，而不是遍历每个属性，因此更高效。</li></ul><ol><li><strong>支持更多类型的数据</strong></li></ol><ul><li><code>Proxy</code> 可以监听对象的新增或删除属性，而 <code>Object.defineProperty</code> 不行。</li></ul><ol><li><strong>更好的可扩展性</strong></li></ol><ul><li>Vue 3 的响应式系统能处理更多场景，例如嵌套对象、数组操作等复杂数据结构。</li></ul><p>Vue 的响应式系统通过数据劫持和发布-订阅模式实现了自动跟踪数据变化并更新视图的功能，使得开发者不需要手动操作 DOM，从而提升了开发效率和用户体验。  </p><p>其中vue中双向绑定的实现</p><p>表单元素上的v-model</p><p>.sync修饰符  <a v-bind:title.sync="data"/></p><p>自定义组件上的v-model，v-bind:value  v-on:input</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-9-23复盘</title>
      <link href="/posts/100fa4d1.html"/>
      <url>/posts/100fa4d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-场景题"><a href="#1-场景题" class="headerlink" title="1.场景题"></a>1.场景题</h2><p>写一个 5 4 3 2 1 的倒计时效果 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int count =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> countdown=<span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  count--;</span><br><span class="line">  <span class="keyword">if</span>(count===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(countdown)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>用setTimeout也行，别忘了clearInterval</p><p>然后用防抖函数来优化触发计时 当然也有其他很多方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func,time</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout); <span class="comment">//清除上一次的延时</span></span><br><span class="line">    timeout=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args) <span class="comment">// 在指定时间后执行函数</span></span><br><span class="line">    &#125;,time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防抖函数经常用于输入框搜索，防止用户每次按键都触发搜索请求</p><p>调用 需要的是返回的函数</p><p>const countdown = debounce(countdown, 500); // 500ms 防抖</p><p>然后后面直接调用countdown函数即可</p><p>一般防抖应用场景：</p><ul><li>搜索框输入时的搜索建议</li><li>窗口大小调整时的性能优化（resize 事件） </li><li>滚动事件中减少页面的滚动处理次数（scroll 事件）  </li></ul><h2 id="2-几道八股"><a href="#2-几道八股" class="headerlink" title="2.几道八股"></a>2.几道八股</h2><h3 id="1-em-rem"><a href="#1-em-rem" class="headerlink" title="1.em rem"></a>1.em rem</h3><p>常用于响应式设计，以便元素能够根据不同设备的屏幕尺寸动态调整大小  </p><p><code>em</code> 单位    相对父元素的字体大小    层级继承  </p><p><code>rem</code> 单位   <strong>相对于根元素的字体大小</strong>：<code>rem</code> 是相对<strong>根元素</strong>（即 <code>&lt;html&gt;</code> 元素）的字体大小，通常浏览器默认的根元素字体大小是 <code>16px</code>，除非手动修改。  </p><p><strong>不受父元素影响</strong>：与 <code>em</code> 不同，<code>rem</code> 不会随着父元素的字体大小变化，它只受根元素字体大小的影响，保持一致性。  </p><ul><li><code>em</code>：相对于<strong>父元素</strong>的字体大小，具有层级继承性，适用于需要随父元素动态变化的场景。</li><li><code>rem</code>：相对于<strong>根元素</strong>的字体大小，确保元素在页面上保持一致的相对尺寸，适用于需要全局一致性、响应式设计的场景。</li></ul><h3 id="2-npm-pnpm区别"><a href="#2-npm-pnpm区别" class="headerlink" title="2.npm ,pnpm区别"></a>2.npm ,pnpm区别</h3><p>JavaScript 包管理器   用于安装、管理、更新项目依赖库。它们的目标类似，但在实现和性能上有一些显著的区别。  </p><p><code>npm</code> 的特点：   深度嵌套的依赖   重复安装   缓存机制   锁定文件  </p><p><code>pnpm</code> 是一个更高效的包管理器，旨在解决 <code>npm</code> 中的一些性能问题，尤其是在磁盘空间和安装速度方面。  </p><p><code>pnpm</code> 的特点：   硬链接和符号链接   严格模式的依赖解析  </p><p><strong>性能优势</strong>：由于 <code>pnpm</code> 依赖缓存和符号链接，安装速度通常会比 <code>npm</code> 更快，尤其是在重复安装的场景下。  </p><h3 id="3-package-lock-json作用"><a href="#3-package-lock-json作用" class="headerlink" title="3.package.lock.json作用"></a>3.package.lock.json作用</h3><p><strong>锁定项目中安装的依赖包的具体版本</strong>，以确保在不同的环境或不同的开发者机器上，安装的依赖包版本完全一致，从而避免因依赖包版本不一致而引发的问题。  </p><p><strong>锁定依赖版本</strong>：</p><ul><li><code>package.json</code> 文件中通常会指定依赖包的版本范围（比如 <code>&quot;^1.0.0&quot;</code> 表示允许安装 1.x.x 的任何版本），但这意味着在不同时间或环境下，安装的依赖版本可能会有所不同。</li><li><code>package-lock.json</code> 文件记录了每个依赖的<strong>确切版本</strong>，包括所有直接和间接（transitive）依赖的版本。通过这个文件，<code>npm</code> 能确保每次安装时，依赖的版本都固定不变。</li></ul><p><strong>加快安装速度</strong>：  </p><p><code>package-lock.json</code> 文件中保存了所有依赖的源地址（registry URL），并记录了包的完整性校验（integrity hash）  </p><p> 可以确保所有人安装的依赖版本是一致的</p><h4 id="package-lock-json-与-package-json-的区别："><a href="#package-lock-json-与-package-json-的区别：" class="headerlink" title="package-lock.json 与 package.json 的区别："></a><code>package-lock.json</code> 与 <code>package.json</code> 的区别：</h4><ul><li>package.json：用于声明项目的直接依赖项及其版本范围，表示项目希望使用的依赖版本。开发者手动编辑和维护这个文件。</li><li>package-lock.json：自动生成，记录了依赖项及其子依赖项的确切版本，用于确保安装时依赖关系完全一致。这个文件不需要手动修改。</li></ul><h3 id="4-浏览器缓存有哪些"><a href="#4-浏览器缓存有哪些" class="headerlink" title="4.浏览器缓存有哪些"></a>4.浏览器缓存有哪些</h3><ol><li>HTTP 缓存  cache</li><li>浏览器存储   LocalStorage   SessionStorage   IndexedDB  </li></ol><p>cookie作用</p><p><strong>跨会话状态保持</strong>：Cookie 可以在多个会话间保存信息，使得用户在再次访问网站时可以恢复先前的状态或数据</p><p>Cookie 是一种在客户端存储小型数据的有效方式，用于会话管理和用户个性化设置，但在使用时需要注意安全性和隐私问题。随着 Web 存储技术的发展，开发者可以根据具体需求选择合适的存储方案。</p><h4 id="5-http-和-https"><a href="#5-http-和-https" class="headerlink" title="5.http 和 https"></a>5.http 和 https</h4><p>HTTPS（Hypertext Transfer Protocol Secure）是 HTTP 的安全版本，通过 SSL/TLS（安全套接层/传输层安全协议）来加密在客户端和服务器之间传输的数据。  </p><p>1.客户端请求：客户端（通常是浏览器）向服务器发送一个请求，发起一个安全连接的请求，使用https协议</p><p>2.服务器响应：服务器接受到请求后，返回其数字证书给客户端。数字证书中包含了服务器的公钥和由受信任的证书颁发机构（CA）签名的信息</p><p>3.证书验证：客户端收到数字证书后，会进行验证（验证证书是否有效，证书是否由受信任的CA签发，证书中的域名是否与访问的域名匹配）</p><p>4.生成会话秘钥：如果证书验证通过，客户端会生成一个随机的对称秘钥，用于加密接下来的通信。 客户端使用服务器的公钥对会话密钥进行加密，并将其发送给服务器 。</p><p>5.服务器解密会话秘钥：服务器使用其私钥解密客户端发送的会话秘钥，从而获得对称秘钥</p><p>6.建立安全连接：客户端和服务器端拥有了相同的会话秘钥，可以使用其进行后续的数据传输。所有通过https传输的数据都会使用该会话秘钥进行对称加密。</p><p>7.数据传输：在会话期间，客户端和服务器之间的所有通信都是加密的，保证了数据的机密性和完整性。</p><p>8.结束连接：当会话结束时，客户端和服务器可以选择关闭连接。也可以选择在未来的请求中重新使用相同的会话密钥或重新进行握手，生成新的会话密钥。 </p><h3 id="6-XSS-跨站脚本攻击"><a href="#6-XSS-跨站脚本攻击" class="headerlink" title="6.XSS(跨站脚本攻击)"></a>6.XSS(跨站脚本攻击)</h3><p>XSS 是指攻击者通过在网页中注入恶意脚本，来盗取用户的敏感信息或进行其他恶意操作。</p><p>白名单过滤 ：只允许特定格式的输入，拒绝不符合的输入。比如对于电子邮件、URL、数字等输入字段，使用正则表达式进行验证。   </p><p><strong>特殊字符转义</strong>：在输出到 HTML、JavaScript 或 CSS 中之前，对特殊字符进行转义，例如将 <code>&lt;</code> 转为 <code>&amp;lt;</code>，<code>&gt;</code> 转为 <code>&amp;gt;</code>，以防止注入。  </p><p><strong>文本内容插入</strong>：使用安全的 DOM 操作方法，如 <code>textContent</code> 或 <code>innerText</code>，而不是 <code>innerHTML</code>，避免直接插入 HTML 内容。  </p><p><strong>避免 eval()</strong>：避免使用 <code>eval()</code>、<code>setTimeout()</code> 和 <code>setInterval()</code> 等会执行字符串代码的函数。  </p><p><strong>设置 CSP 头部</strong>：通过设置 HTTP 头部 <code>Content-Security-Policy</code>，限制网页上允许加载的资源，例如只允许加载特定源的脚本。这可以有效防止外部脚本的执行。  </p><h3 id="7-vue组件的通信方式"><a href="#7-vue组件的通信方式" class="headerlink" title="7.vue组件的通信方式"></a>7.vue组件的通信方式</h3><ol><li><p>父子组件通信</p><p>父组件通过 props 将数据传递给子组件。  </p><p>子组件通过 <code>$emit</code> 触发事件，父组件可以监听这些事件。  </p></li><li><p>兄弟组件通信</p><p>通过父组件  作为桥梁 来让两个子组件进行通信</p><p>Event Bus    使用一个中央事件总线（Event Bus）来进行通信。</p></li><li><p>全局状态管理    </p><p>Vuex   用 Vuex 进行全局状态管理，适合大型应用。  </p><p>Provide/Inject   在祖先组件中提供数据，后代组件可以注入这些数据</p></li></ol><h3 id="8-灰度测试"><a href="#8-灰度测试" class="headerlink" title="8.灰度测试"></a>8.灰度测试</h3><p><strong>灰度测试（Gray Release）是一种逐步发布新功能或版本的方法，通过将新功能仅向部分用户开放，从而监控其在真实环境中的表现和用户反馈。这种方式可以有效降低新版本发布的风险，确保新功能的稳定性和可靠性。</strong>  </p><p><strong>灰度测试的特点</strong> </p><p><strong>1.逐步发布</strong>  ：将新功能或版本逐步推向用户，而不是一次性向所有用户发布。</p><p><strong>2.用户分组</strong>  ：可以根据用户的地域、用户行为、使用频率等，将用户分为不同的组，向特定组推出新功能。</p><p><strong>3.监控与反馈</strong>  ：实时监控新版本的性能、用户行为和反馈，及时发现问题并进行调整。</p><p><strong>灰度测试的流程  ：</strong></p><ul><li><strong>选择目标用户</strong>：确定哪些用户将参与灰度测试。这可以基于用户的地理位置、使用习惯或其他特征。</li><li><strong>发布新版本</strong>：向选定的用户群体发布新功能或版本。</li><li><strong>监控与收集数据</strong></li></ul><ul><li><ul><li><strong>监控应用的性能指标（如响应时间、错误率等）。</strong></li><li><strong>收集用户反馈和行为数据。</strong></li></ul></li></ul><ul><li><strong>评估结果</strong>  ：分析收集到的数据，判断新功能是否成功，是否需要进一步改进。</li><li><strong>全量发布</strong>  ：如果新功能表现良好，可以逐步向所有用户发布；如果存在问题，可以对其进行修复后再发布。</li></ul><h3 id="灰度测试的优势"><a href="#灰度测试的优势" class="headerlink" title="灰度测试的优势"></a><strong>灰度测试的优势</strong></h3><ul><li><strong>风险控制</strong>：通过逐步推出新功能，可以及时发现问题并减少对所有用户的影响。</li><li><strong>用户反馈</strong>：可以更快地收集用户对新功能的反馈，便于进行改进和调整。</li><li><strong>资源节约</strong>：可以更有效地利用资源，集中在新功能的优化上，降低后期维护成本。</li></ul><h3 id="灰度测试的应用场景"><a href="#灰度测试的应用场景" class="headerlink" title="灰度测试的应用场景"></a><strong>灰度测试的应用场景</strong></h3><ul><li><strong>新功能发布</strong>：在新功能上线之前，进行灰度测试以验证其可用性和稳定性。</li><li><strong>版本更新</strong>：在产品进行重大版本更新时，可以先进行灰度发布，降低风险。</li><li><strong>市场推广</strong>：在推广新产品或服务时，可以选择特定用户进行测试，以评估市场反应。</li></ul><p>灰度测试是一种有效的产品发布策略，可以帮助开发团队在控制风险的同时，优化用户体验。通过合理设计和实施灰度测试，可以在保证软件质量的同时，提升用户满意度。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-9-20复盘</title>
      <link href="/posts/100fa4d0.html"/>
      <url>/posts/100fa4d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-浏览器输入URL会发生什么"><a href="#1-浏览器输入URL会发生什么" class="headerlink" title="1.浏览器输入URL会发生什么"></a>1.浏览器输入URL会发生什么</h2><p><strong>1.URL 解析</strong></p><p> <strong>用户输入的 URL 会被解析为不同的部分</strong>  </p><ul><li><strong>协议（Scheme）</strong>：如 <code>http:// 或 https://</code></li><li><strong>域名（Host）</strong>：如 <code>www.example.com</code></li><li><strong>路径（Path）：指向特定资源，如</strong> <code>/page</code></li><li><strong>查询参数（Query String）</strong>：如  <code>?id=123&amp;sort=asc</code></li><li><strong>端口号（Port）（可选）</strong>：如 :80  或  :443（默认为 80 或 443）</li></ul><p><strong>2.DNS 解析</strong></p><p> <strong>浏览器会通过 DNS（域名系统）将输入的域名解析为服务器的 IP 地址。</strong></p><ol><li><strong>浏览器首先查询本地缓存（DNS 缓存、操作系统缓存）是否有这个域名的 IP。</strong></li><li><strong>如果没有命中缓存，浏览器会向 DNS 服务器发出请求，递归查询获取目标 IP 地址。</strong></li><li><strong>得到 IP 地址后，浏览器才能继续与目标服务器通信。</strong></li></ol><p><strong>3. 建立 TCP 连接</strong>  </p><ul><li><strong>通过 IP 地址，浏览器与目标服务器之间建立 TCP 连接，默认使用 HTTP 的 80 端口或 HTTPS 的 443 端口。</strong></li><li><strong>浏览器和服务器会进行 三次握手 过程，确保双方可以进行可靠的数据传输</strong></li><li><strong>客户端发送 SYN 请求。</strong></li><li><strong>服务器响应 SYN-ACK。</strong></li><li><strong>客户端发送 ACK，连接建立。</strong></li></ul><p><strong>4. TLS/SSL 握手（如果是 HTTPS）</strong>  </p><ul><li><strong>如果使用 HTTPS 协议，TCP 连接建立后，客户端和服务器之间还要进行</strong> TLS/SSL 握手。</li><li><strong>该过程用于加密通信，确保数据传输的安全性：</strong></li></ul><ol><li><strong>浏览器请求服务器的证书。</strong></li><li><strong>服务器返回证书（包括公钥）。</strong></li><li><strong>浏览器验证证书是否合法，并生成会话密钥。</strong></li><li><strong>双方使用对称加密的方式进行加密数据交换。</strong></li></ol><p><strong>5. 发送 HTTP 请求</strong>  </p><p> <strong>连接建立后，浏览器会发送一个 HTTP 请求 给服务器，请求的内容包括：</strong>  </p><ul><li><strong>请求方法</strong>（如 GET、POST)</li><li><strong>请求的 URL 路径</strong></li><li><strong>请求头信息（如浏览器的 User-Agent、Cookie、缓存等信息）</strong></li><li><strong>如果是 POST 请求，还会包括请求体（如表单数据）</strong></li></ul><p><strong>6. 服务器处理请求</strong>  </p><ul><li><strong>根据 URL 路径查找对应的资源（如 HTML 文件、API 数据）。</strong></li><li><strong>如果需要，则查询数据库、执行业务逻辑等。</strong></li><li><strong>服务器根据处理结果生成 HTTP 响应，通常包括状态码、响应头和响应体。</strong></li></ul><p><strong>7. 返回 HTTP 响应</strong>  </p><p> <strong>服务器返回的 HTTP 响应 包含  :</strong></p><ul><li><strong>状态码</strong>：表示请求的结果（如 200 表示成功，404 表示未找到资源，500 表示服务器错误等）。</li><li><strong>响应头</strong>：包括内容类型（如 Content-Type: text/html）、缓存控制、Cookie 等信息。</li><li><strong>响应体</strong>：即请求的实际内容（如 HTML 页面、JSON 数据、图片等）。</li></ul><p><strong>8. 浏览器渲染页面</strong>  </p><p> <strong>浏览器接收到 HTTP 响应后，开始渲染页面，主要流程如下  :</strong></p><ol><li><strong>解析 HTML：将 HTML 文档解析为 DOM（文档对象模型）树。</strong>  </li><li><strong>解析 CSS：下载并解析样式表，生成 CSSOM（CSS 对象模型）树。</strong>  </li><li><strong>构建渲染树：将 DOM 树与 CSSOM 树结合，生成渲染树，决定每个元素的样式与位置。</strong>  </li><li><strong>布局与绘制：计算每个元素的位置和大小，并将其绘制到屏幕上。</strong>  </li><li><strong>执行 JavaScript：浏览器解析并执行 HTML 中的</strong> <script> <strong>标签，可能会改变 DOM 树的结构并触发重新渲染。</strong>  </li><li><strong>处理资源请求：如果页面中有外部资源（如图片、视频、CSS、JS 文件），浏览器会发起新的 HTTP 请求来下载这些资源。</strong> </li></ol><p><strong>9. 后续请求与优化</strong>  </p><ul><li><strong>浏览器会根据 HTML 中的</strong> <code>&lt;img&gt;</code>, <code>&lt;script&gt;</code><strong>,</strong> <code>&lt;link&gt;</code> 等标签继续发起新的 HTTP 请求。</li><li><strong>浏览器还会利用缓存机制、预加载（preload）、懒加载等技术优化页面加载速度和用户体验。</strong></li></ul><h2 id="2-第一次渲染和第二次渲染怎么做优化？"><a href="#2-第一次渲染和第二次渲染怎么做优化？" class="headerlink" title="2.第一次渲染和第二次渲染怎么做优化？"></a>2.第一次渲染和第二次渲染怎么做优化？</h2><p> 第一次渲染优化（首次加载优化）   </p><p>第一次渲染指的是用户第一次访问页面时，从输入 URL 到页面完全加载和呈现的过程。这个过程通常包括网络请求、资源下载和页面渲染等步骤。  </p><ol><li>减少关键资源的大小和数量</li></ol><ul><li>压缩资源：通过 gzip、Brotli 压缩 HTML、CSS、JavaScript 等文件，减少文件体积。</li><li>代码拆分（Code Splitting）：将 JavaScript 拆分成多个小文件，按需加载（如 Webpack 的 <code>splitChunks</code>）。</li><li>减少 CSS 阻塞：使用关键 CSS（Critical CSS），只加载页面首屏显示所需的样式，推迟加载非关键 CSS。</li></ul><ol><li>减少 HTTP 请求  </li></ol><ul><li>合并 CSS 和 JavaScript 文件：减少 HTTP 请求数量。</li><li>使用 HTTP/2 或 HTTP/3：通过并行加载多个资源，减少排队等待时间。</li><li>减少图像数量：合并小图标为雪碧图（sprite），或使用 CSS 生成图形。</li></ul><ol><li>使用内容分发网络（CDN）  </li></ol><p>将静态资源（CSS、JavaScript、图片等）托管在 CDN 上，减少资源的加载时间，特别是对于全球用户，提高资源的访问速度。  </p><ol><li>优化图像加载  </li></ol><ul><li>延迟加载（Lazy Load）：只在用户滚动到视图范围内时加载图像或其他媒体资源，减少首次渲染时加载的资源量。</li><li>图像优化：使用合适的图片格式（如 WebP），并根据不同设备提供不同分辨率的图片。</li></ul><ol><li>减少 JavaScript 负担  </li></ol><ul><li>异步加载 JavaScript：使用 <code>async</code> 或 <code>defer</code> 属性，避免阻塞页面渲染。  </li><li>树摇（Tree Shaking）：通过工具（如 Webpack）去除未使用的代码，减少打包后的文件大小。  </li><li>预加载关键资源：使用 <code>&lt;link rel=&quot;preload&quot;&gt;</code> 或 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code> 提前加载关键资源，如字体、重要的 JavaScript 和 CSS 文件。  </li></ul><ol><li>预渲染和服务器端渲染（SSR）</li></ol><ul><li>SSR：将页面预先在服务器端渲染成 HTML，用户访问时不需要等待浏览器解析和执行 JavaScript，可以立即看到页面内容。</li><li>静态生成（Static Generation）：对于不频繁变化的页面，生成静态 HTML，减少服务器处理时间。</li><li>预渲染（Prerendering）：对于常访问的页面，可以在用户请求之前在服务器预渲染，并缓存渲染结果。</li></ul><ol><li>减少渲染阻塞资源  </li></ol><ul><li>CSS 优化：将关键 CSS 内联到 HTML 文件中，减少额外请求；推迟加载不重要的 CSS 文件。</li><li><p>移除阻塞 JavaScript：将不需要立即执行的脚本放置到页面底部，或使用 <code>defer</code>、<code>async</code> 来延迟加载。</p><p>第二次渲染优化（重复访问时的渲染优化）  </p><p>第二次渲染指的是用户再次访问同一个页面或应用时的加载过程。重点在于利用缓存、减少不必要的重复请求和渲染，提升加载速度。  </p></li></ul><ol><li>使用浏览器缓存</li></ol><ol><li>启用浏览器存储机制</li></ol><ol><li>Lazy Load 继续发挥作用</li></ol><ol><li>预缓存和预加载</li></ol><ol><li>减少重新计算与重绘</li></ol><ol><li>使用 HTTP/2 和 HTTP/3  </li></ol><h2 id="3-场景：点赞功能，用户在短时间内多次点击怎么做，可能有偶数次或者奇数次（奇数点赞，偶数取消）的情况怎么保证页面性能"><a href="#3-场景：点赞功能，用户在短时间内多次点击怎么做，可能有偶数次或者奇数次（奇数点赞，偶数取消）的情况怎么保证页面性能" class="headerlink" title="3.场景：点赞功能，用户在短时间内多次点击怎么做，可能有偶数次或者奇数次（奇数点赞，偶数取消）的情况怎么保证页面性能"></a>3.场景：点赞功能，用户在短时间内多次点击怎么做，可能有偶数次或者奇数次（奇数点赞，偶数取消）的情况怎么保证页面性能</h2><ol><li>防抖（Debounce）或者节流（Throttle）机制  </li></ol><p>为了避免用户短时间内频繁触发点赞请求，可以采用<strong>防抖</strong>或<strong>节流</strong>来控制操作的频率：</p><ul><li><strong>防抖（Debounce）</strong>：用户每次点击都会触发点赞操作，但在设定时间内，如果用户再次点击，则重置计时，只有在设定时间内不再点击时才会真正触发点赞请求。这种方法适合处理短时间内的多次点击，最终只会执行一次操作。</li><li><strong>节流（Throttle）</strong>：限制用户每隔一定时间才能触发点赞操作，比如设置 500 毫秒的时间间隔，避免用户在短时间内频繁操作，从而减少请求频率。这对于频繁操作较多的情况下非常有用。</li></ul><p>2.乐观更新</p><p> 为了提升用户体验，页面可以<strong>在用户点击时立即更新状态</strong>，而无需等待服务器返回结果。这样即使用户连续点击，页面的响应依然很快，然后后台异步处理请求。乐观更新可以结合防抖或者节流机制一起使用。</p><p>具体实现如下：</p><ol><li><strong>立即更新界面</strong>：当用户点击点赞按钮时，页面立即更新状态（例如切换点赞图标）。</li><li><strong>异步发送请求</strong>：在后台异步发送点赞/取消点赞请求，更新服务器的点赞状态。</li><li><strong>错误处理</strong>：如果请求失败，回滚本地状态，恢复为原始状态。</li></ol><ol><li>合并请求  </li></ol><p>如果用户在短时间内多次点击，可以考虑将多个操作合并为一个请求，从而减少向服务器发送的请求次数，降低服务器压力。</p><p>具体做法是，<strong>在短时间内批量处理点击事件</strong>，将多次点击操作合并成一次请求，最后的状态取决于用户的最终操作结果。</p><ul><li>例如：用户短时间内点击了 5 次，实际上只会发出一次请求，且最终根据点击次数的奇偶性来决定是点赞还是取消点赞。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖函数（Debounce）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流函数（Throttle）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, interval</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastCall = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - lastCall &gt;= interval) &#123;</span><br><span class="line">      lastCall = now;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设点赞操作是 likePost</span></span><br><span class="line"><span class="keyword">const</span> handleLike = <span class="title function_">debounce</span>(likePost, <span class="number">300</span>); <span class="comment">// 或者使用 throttle</span></span><br></pre></td></tr></table></figure><h2 id="4-TCP和UDP的区别"><a href="#4-TCP和UDP的区别" class="headerlink" title="4.TCP和UDP的区别"></a>4.TCP和UDP的区别</h2><p>TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常见的传输层协议，它们的主要区别在于连接模式、可靠性、数据传输方式等。下面列出了它们在多个方面的区别：  </p><ol><li>连接与无连接  </li><li>可靠性  </li></ol><ol><li>有序性</li></ol><ul><li><strong>TCP</strong>：保证数据包按顺序到达接收端。即使数据包以不同顺序到达，TCP 也会对它们进行重新排序，确保数据的顺序性。</li><li><strong>UDP</strong>：不保证数据的顺序性。UDP 数据报可能会乱序到达接收端，接收端需要自行处理数据顺序问题。</li></ul><ol><li><p>数据传输方式  </p><p><strong>TCP</strong>：基于<strong>字节流    UDP：基于报文</strong></p></li><li><p>速度与效率</p></li></ol><ul><li>TCP：由于其需要建立连接、确认和重传机制，TCP 的可靠性较高，但这些特性会带来一定的开销，因此速度较慢，效率较低。</li><li>UDP：因为没有连接建立、确认和重传机制，UDP 协议非常轻量且传输速度快，非常适合要求低延迟或高实时性的数据传输。</li></ul><h2 id="5-说一说promise"><a href="#5-说一说promise" class="headerlink" title="5.说一说promise"></a>5.说一说promise</h2><p><code>Promise</code> 是 JavaScript 中的一种异步编程解决方案，用于处理异步操作并避免回调地狱。<code>Promise</code> 代表一个未来可能完成或失败的操作，以及它完成后的返回值或失败原因。  </p><p>一个 <code>Promise</code> 对象有三种状态：</p><ol><li><strong>Pending</strong>（进行中）：初始状态，操作尚未完成。</li><li><strong>Fulfilled</strong>（已成功）：操作成功完成，并返回了一个值。</li><li><p><strong>Rejected</strong>（已失败）：操作失败，并返回了一个原因</p><p>一旦 <code>Promise</code> 状态变为 <code>Fulfilled</code> 或 <code>Rejected</code>，就不会再改变（不可逆）  </p><p>Promise 的用法  </p></li><li><p>创建 Promise  </p></li></ol><p>可以通过 <code>new Promise</code> 构造函数创建一个 <code>Promise</code> 对象，传入一个执行器（executor）函数，该函数有两个参数：</p><ul><li><code>resolve</code>: 当操作成功时调用，并传递结果。</li><li><code>reject</code>: 当操作失败时调用，并传递错误原因。</li></ul><ol><li>使用 <code>.then()</code> 和 <code>.catch()</code></li></ol><p><code>Promise</code> 的结果通过 <code>.then()</code> 方法处理。当 <code>Promise</code> 成功（fulfilled）时，会执行 <code>.then()</code> 中的回调函数；当 <code>Promise</code> 失败（rejected）时，会执行 <code>.catch()</code> 中的回调函数。  </p><ol><li>finally()</li></ol><p><code>.finally()</code> 方法用于在 <code>Promise</code> 结束后（无论是成功还是失败）执行某个回调函数，常用于清理资源等操作。</p><h3 id="Promise-链式调用"><a href="#Promise-链式调用" class="headerlink" title="Promise 链式调用"></a><strong>Promise 链式调用</strong></h3><p><code>Promise</code> 支持链式调用，即可以在一个 <code>.then()</code> 之后继续调用另一个 <code>.then()</code>，这样多个异步操作可以按顺序执行。</p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><strong>Promise.all()</strong></h3><p><code>Promise.all()</code> 方法用于并行处理多个 <code>Promise</code>，它接受一个包含多个 <code>Promise</code> 的可迭代对象（如数组）。当所有 <code>Promise</code> 都成功时，<code>Promise.all()</code> 返回一个包含每个 <code>Promise</code> 成功结果的数组；如果有任何一个 <code>Promise</code> 失败，则返回该失败原因。</p><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a><strong>Promise.race()</strong></h3><p><code>Promise.race()</code> 方法接受多个 <code>Promise</code>，并返回最先完成的那个 <code>Promise</code>，无论是成功还是失败。</p><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a><strong>Promise.any()</strong></h3><p><code>Promise.any()</code> 方法接受多个 <code>Promise</code>，只要其中有一个 <code>Promise</code> 成功，返回该 <code>Promise</code> 的结果。如果所有的 <code>Promise</code> 都失败，它会返回一个包含所有错误的聚合错误。</p><p><code>async/await</code> 是 <code>Promise</code> 的语法糖    让异步操作看起来像同步代码。  </p><ol><li>Promise 是基础：</li></ol><ul><li><code>Promise</code> 是一种对象，代表异步操作的最终完成（或失败）及其结果。</li><li><code>async/await</code> 的本质依赖于 <code>Promise</code>，每个 <code>async</code> 函数实际上都返回一个 <code>Promise</code>，即使你没有显式地返回 <code>Promise</code> 对象。</li></ul><ol><li>async/await 是 Promise 的语法糖：</li></ol><ul><li>使用 <code>async/await</code> 可以让异步代码看起来像同步代码，更加直观易读。</li><li><code>await</code> 后面的表达式需要是一个返回 <code>Promise</code> 的函数，<code>await</code> 会暂停该 <code>async</code> 函数的执行，直到 <code>Promise</code> 解决（resolve）或拒绝（reject），然后继续执行。</li></ul><h2 id="6-函数柯里化"><a href="#6-函数柯里化" class="headerlink" title="6.函数柯里化"></a>6.函数柯里化</h2><p>柯里化（Currying）是一种将接受多个参数的函数转换为一系列接受单一参数的函数的技术。它使函数可以部分应用其参数，即每次调用函数时传入一个参数，返回一个新函数，该新函数等待下一个参数，直到所有参数都传入后，函数执行并返回结果。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arity = fn.<span class="property">length</span>; <span class="comment">// 获取函数的参数个数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果传入的参数数量小于函数的参数数量，返回一个新的函数，继续接受参数</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= arity) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>(...args); <span class="comment">// 如果参数足够，调用原始函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...nextArgs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">curried</span>(...args, ...nextArgs); <span class="comment">// 合并参数并继续调用</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们可以通过一个例子来测试这个柯里化函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curriedAdd = <span class="title function_">curry</span>(add);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-25</title>
      <link href="/posts/110fa4d5.html"/>
      <url>/posts/110fa4d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h2><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><p>示例 1：<br>输入: “the sky is blue”<br>输出: “blue is sky the”</p><p>示例 2：<br>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p><p>示例 3：<br>输入: “a good   example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p><p>一些同学会使用split库函数，分隔单词，然后定义一个新的string字符串，最后再把单词倒序相加，那么这道题题目就是一道水题了，失去了它的意义。</p><p>所以这里我还是提高一下本题的难度：<strong>不要使用辅助空间，空间复杂度要求为O(1)。</strong></p><p>不能使用辅助空间之后，那么只能在原字符串上下功夫了。</p><p>想一下，我们将整个字符串都反转过来，那么单词的顺序指定是倒序了，只不过单词本身也倒序了，那么再把单词反转一下，单词不就正过来了。</p><p>所以解题思路如下：</p><ul><li>移除多余空格</li><li>将整个字符串反转</li><li>将每个单词反转</li></ul><p>举个例子，源字符串为：”the sky is blue “</p><ul><li>移除多余空格 : “the sky is blue”</li><li>字符串反转：”eulb si yks eht”</li><li>单词反转：”blue is sky the”</li></ul><p>这样我们就完成了翻转字符串里的单词。</p><p>注意：开头 中间 结尾 都会有多余的空格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp; s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span>&#123; <span class="comment">//翻转，区间写法：左闭右闭 []</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeExtraSpaces</span><span class="params">(string&amp; s)</span> </span>&#123;<span class="comment">//去除所有空格并在相邻单词之间添加空格, 快慢指针。</span></span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;   <span class="comment">//整体思想参考https://programmercarl.com/0027.移除元素.html</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//遇到非空格就处理，即删除所有空格。</span></span><br><span class="line">                <span class="keyword">if</span> (slow != <span class="number">0</span>) s[slow++] = <span class="string">&#x27; &#x27;</span>; <span class="comment">//手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//补上该单词，遇到空格说明单词结束。</span></span><br><span class="line">                    s[slow++] = s[i++];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(slow); <span class="comment">//slow的大小即为去除多余空格后的大小。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">removeExtraSpaces</span>(s); <span class="comment">//去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></span><br><span class="line">        <span class="built_in">reverse</span>(s, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>; <span class="comment">//removeExtraSpaces后保证第一个单词的开始下标一定是0。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == s.<span class="built_in">size</span>() || s[i] == <span class="string">&#x27; &#x27;</span>) &#123; <span class="comment">//到达空格或者串尾，说明一个单词结束。进行翻转。</span></span><br><span class="line">                <span class="built_in">reverse</span>(s, start, i - <span class="number">1</span>); <span class="comment">//翻转，注意是左闭右闭 []的翻转。</span></span><br><span class="line">                start = i + <span class="number">1</span>; <span class="comment">//更新下一个单词的开始下标start</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-24</title>
      <link href="/posts/110fa4d4.html"/>
      <url>/posts/110fa4d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：<br>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p><p>示例 2：<br>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>()/<span class="number">2</span>; i++, j--) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> l = -<span class="number">1</span>, r = s.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">while</span>(++l &lt; --r) [s[l], s[r]] = [s[r], s[l]];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a>541. 反转字符串II</h2><p>给定一个字符串 s 和一个整数 k，从字符串开头算起, 每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。</p><p>如果剩余字符少于 k 个，则将剩余字符全部反转。</p><p>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><p>示例:</p><p>输入: s = “abcdefg”, k = 2<br>输出: “bacdfeg”</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += (<span class="number">2</span> * k)) &#123;</span><br><span class="line">            <span class="comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line">            <span class="comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></span><br><span class="line">            <span class="keyword">if</span> (i + k &lt;= s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">begin</span>() + i + k );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转。</span></span><br><span class="line">                <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>() + i, s.<span class="built_in">end</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> resArr = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span> * k) &#123;  <span class="comment">// 每隔 2k 个字符的前 k 个字符进行反转</span></span><br><span class="line">        <span class="keyword">let</span> l = i - <span class="number">1</span>, r = i + k &gt; len ? len : i + k;</span><br><span class="line">        <span class="keyword">while</span>(++l &lt; --r) [resArr[l], resArr[r]] = [resArr[r], resArr[l]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="替换数字"><a href="#替换数字" class="headerlink" title="替换数字"></a>替换数字</h2><p>给定一个字符串 s，它包含小写字母和数字字符，请编写一个函数，将字符串中的字母字符保持不变，而将每个数字字符替换为number。</p><p>例如，对于输入字符串 “a1b2c3”，函数应该将其转换为 “anumberbnumbercnumber”。</p><p>对于输入字符串 “a5b”，函数应该将其转换为 “anumberb”</p><p>输入：一个字符串 s,s 仅包含小写字母和数字字符。</p><p>输出：打印一个新的字符串，其中每个数字字符都被替换为了number</p><p>样例输入：a1b2c3</p><p>样例输出：anumberbnumbercnumber</p><p>数据范围：1 &lt;= s.length &lt; 10000。</p><p>思路：<strong>其实很多数组填充类的问题，其做法都是先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p><p>这么做有两个好处：</p><ol><li>不用申请新数组。</li><li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</li></ol><p>C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">        <span class="type">int</span> sOldIndex = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 统计数字的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩充字符串s的大小，也就是将每个数字替换成&quot;number&quot;之后的大小</span></span><br><span class="line">        s.<span class="built_in">resize</span>(s.<span class="built_in">size</span>() + count * <span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> sNewIndex = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 从后往前将数字替换为&quot;number&quot;</span></span><br><span class="line">        <span class="keyword">while</span> (sOldIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[sOldIndex] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[sOldIndex] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                s[sNewIndex--] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s[sNewIndex--] = s[sOldIndex];</span><br><span class="line">            &#125;</span><br><span class="line">            sOldIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; endl;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-23</title>
      <link href="/posts/110fa4d3.html"/>
      <url>/posts/110fa4d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h2><p>给定四个包含整数的队列列表 A , B , C , D ，计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D [l] = 0。</p><p>为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -2^28 到 2^28 - 1 之间，最终结果超过 2^31 - 1 。</p><p><strong>例如:</strong></p><p>原因:</p><ul><li>A = [ 1, 2]</li><li>B = [-2,-1]</li><li>C = [-1, 2]</li><li>D = [ 0, 2]</li></ul><p>输出:</p><p>2</p><p><strong>解释:</strong></p><p>两个单元如下:</p><ol><li>（0，0，0，1）-&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li><li>（1，1，0，0）-&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li></ol><p>本题解答步骤：</p><ol><li>首先定义一个unordered_map，key放a和b两数之和，value放a和b两数之和出现的次数。</li><li>遍历大A和大B的集群，统计两个集群元素之和，和出现的次数，放到map中。</li><li>定义int变量count，用于统计a+b+c+d = 0出现的次数。</li><li>再遍历大C和大D内存，找到如果0-(c+d)在map中出现过的话，就用count把map中key对应的值来统计出现次数。</li><li>最后返回统计值count就可以了</li></ol><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B, vector&lt;<span class="type">int</span>&gt;&amp; C, vector&lt;<span class="type">int</span>&gt;&amp; D)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; umap; <span class="comment">//key:a+b的数值，value:a+b数值出现的次数</span></span><br><span class="line">        <span class="comment">// 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a : A) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> b : B) &#123;</span><br><span class="line">                umap[a + b]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 统计a+b+c+d = 0 出现的次数</span></span><br><span class="line">        <span class="comment">// 再遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : C) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> d : D) &#123;</span><br><span class="line">                <span class="keyword">if</span> (umap.<span class="built_in">find</span>(<span class="number">0</span> - (c + d)) != umap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    count += umap[<span class="number">0</span> - (c + d)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间度：O(n^2)，最坏情况下A和B的值复杂度各不相同，相加产生的数字个数为n^2</li></ul><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums3</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums4</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> twoSumMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计nums1和nums2数组元素之和，和出现的次数，放到map中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n1 <span class="keyword">of</span> nums1) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n2 <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n1 + n2;</span><br><span class="line">            twoSumMap.<span class="title function_">set</span>(sum, (twoSumMap.<span class="title function_">get</span>(sum) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n3 <span class="keyword">of</span> nums3) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n4 <span class="keyword">of</span> nums4) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n3 + n4;</span><br><span class="line">            count += (twoSumMap.<span class="title function_">get</span>(<span class="number">0</span> - sum) || <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a>383.赎金信</h2><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10^5</code></li><li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为题目说只有小写字母，那可以采用空间换取时间的存储策略，用一个长度为26的磁盘记录来杂志里字母出现的次数。</p><p>然后再用 ransomNote 去验证该阵列是否包含 ransomNote 所需要的所有字母。</p><p>依然是存储在缓存法中的应用。</p><h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.<span class="built_in">size</span>() &gt; magazine.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; magazine.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            cnt[magazine[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ransomNote.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            cnt[ransomNote[i] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">             <span class="keyword">if</span> (cnt[ransomNote[i] - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; 26; i++) &#123;</span></span><br><span class="line"><span class="comment">            if (cnt[i] &lt; 0)</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JS代码-1"><a href="#JS代码-1" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> strArr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>), </span><br><span class="line">        base = <span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> magazine) &#123;  <span class="comment">// 记录 magazine里各个字符出现次数</span></span><br><span class="line">        strArr[s.<span class="title function_">charCodeAt</span>() - base]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> ransomNote) &#123; <span class="comment">// 对应的字符个数做--操作</span></span><br><span class="line">        <span class="keyword">const</span> index = s.<span class="title function_">charCodeAt</span>() - base;</span><br><span class="line">        <span class="keyword">if</span>(!strArr[index]) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 如果没记录过直接返回false</span></span><br><span class="line">        strArr[index]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><p>思路：</p><p><strong>其实这个问题使用哈希法的</strong>操作并不十分合适，因为在去重的时候有很多需要注意的细节，在面试中很难直接写出没有bug的代码。</p><p>而且使用哈希法在使用两层进行循环的时候，能做的剪枝操作很有限，虽然时间复杂度是O(n^2)，也可以在leetcode上通过，但是程序的执行时间依然比较长。</p><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>接下来我来介绍另一个解法：双指针法，<strong>这道题目使用双指针高效法无法哈希法一些</strong>，那么来讲解一下具体实现的思路。</p><p>拿这个nums队列来举例，首先将队列排序，然后有一层进行循环，i从下标0的位置开始，同时在i+1的位置上定义一个下标left，在队列末尾定义下标right位置上。</p><p>仍然还是在吞吐量中找到 abc 使得 a + b +c =0，我们这里相当于 a = nums[i]，b = nums[left]，c = nums[right]。</p><p>接下来如何移动left和right呢，如果nums[i] + nums[left] + nums[right] &gt; 0就说明此时三数之和大了，因为CPU是排序后了，所以right下标就应该应该向左移动，这样才能得到三数之和一小一些。</p><p>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明此时三数之和小了，左就向右移动，才能让三数之和大一些，直到左与右相满足。</p><p>时间复杂度：O(n^2)。</p><h3 id="C-代码-2"><a href="#C-代码-2" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 找出a + b + c = 0</span></span><br><span class="line">        <span class="comment">// a = nums[i], b = nums[left], c = nums[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 错误去重a方法，将会漏掉-1,-1,2 这种情况</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if (nums[i] == nums[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 正确去重a方法</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &gt; left) &#123;</span><br><span class="line">                <span class="comment">// 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right&lt;=left 了，从而漏掉了 0,0,0 这种三元组</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;</span></span><br><span class="line"><span class="comment">                while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>) right--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="number">0</span>) left++;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;nums[i], nums[left], nums[right]&#125;);</span><br><span class="line">                    <span class="comment">// 去重逻辑应该放在找到一个三元组之后，对b 和 c去重</span></span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 找到答案时，双指针同时收缩</span></span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度： O(1)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [], len = nums.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 将数组排序</span></span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> l = i + <span class="number">1</span>, r = len - <span class="number">1</span>, iNum = nums[i]</span><br><span class="line">        <span class="comment">// 数组排过序，如果第一个数大于0直接返回res</span></span><br><span class="line">        <span class="keyword">if</span> (iNum &gt; <span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">if</span> (iNum == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">let</span> lNum = nums[l], rNum = nums[r], threeSum = iNum + lNum + rNum</span><br><span class="line">            <span class="comment">// 三数之和小于0，则左指针向右移动</span></span><br><span class="line">            <span class="keyword">if</span> (threeSum &lt; <span class="number">0</span>) l++ </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (threeSum &gt; <span class="number">0</span>) r--</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">push</span>([iNum, lNum, rNum])</span><br><span class="line">                <span class="comment">// 去重</span></span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l + <span class="number">1</span>])&#123;</span><br><span class="line">                    l++</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[r] == nums[r - <span class="number">1</span>]) &#123;</span><br><span class="line">                    r--</span><br><span class="line">                &#125;</span><br><span class="line">                l++</span><br><span class="line">                r--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>一般来说哈希表都是用来快速判断一个元素是否出现集合里</strong>。</p><p>对于哈希表，要知道<strong>哈希函数</strong>和<strong>哈希碰撞</strong>在哈希表中的作用。</p><p>哈希函数是把传入的key映射到符号表的索引上。</p><p>哈希碰撞处理有多个key映射到相同索引上时的情景，处理碰撞的普遍方式是拉链法和线性探测法。</p><p>接下来是常见的三种哈希结构：</p><ul><li>数组（大小是受限的）</li><li>set（集合）</li><li>map（映射）</li></ul><p>在C++语言中，set 和 map 都分别提供了三种数据结构，每种数据结构的底层实现和用途都有所不同</p><p>例如什么时候用std::set，什么时候用std::multiset，什么时候用std::unordered_set，都是很有考究的。</p><p><strong>只有对这些数据结构的底层实现很熟悉，才能灵活使用，否则很容易写出效率低下的程序</strong>。</p><h3 id="set作为哈希表"><a href="#set作为哈希表" class="headerlink" title="set作为哈希表"></a>set作为哈希表</h3><p>没有限制数值的大小，就无法使用数组来做哈希表了</p><p><strong>主要因为如下两点：</strong></p><ul><li>数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。</li><li>如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</li></ul><p>所以此时一样的做映射的话，就可以使用set了。</p><p>关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希， 使用unordered_set 读写效率是最高的，本题并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><h3 id="map作为哈希表"><a href="#map作为哈希表" class="headerlink" title="map作为哈希表"></a>map作为哈希表</h3><p>在两数之和中，map正式登场。</p><p>来说一说：使用数组和set来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ul><p>map是一种<code>&lt;key, value&gt;</code>的结构，本题可以用key保存数值，用value在保存数值所在的下标。所以使用map最为合适。</p><p>C++提供如下三种map：</p><ul><li>std::map</li><li>std::multimap</li><li>std::unordered_map</li></ul><p>std::unordered_map 底层实现为哈希，std::map 和std::multimap 的底层实现是红黑树。</p><p>同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）</p><p>1.两数之和中并不需要key有序，选择std::unordered_map 效率更高！</p><p>在454.四数相加中我们提到了其实需要哈希的地方都能找到map的身影。</p><p>关键差别是本题为四个独立的数组，只要找到A[i] + B[j] + C[k] + D[l] = 0就可以，不用考虑重复问题，而18. 四数之和，15.三数之和是一个数组（集合）里找到和为0的组合，可就难很多了！</p><p>用哈希法解决了两数之和，很多同学会感觉用哈希法也可以解决三数之和，四数之和。</p><p>其实是可以解决，但是非常麻烦，需要去重导致代码效率很低。</p><p>所以18. 四数之和，15.三数之和都推荐使用双指针法！</p><p><strong>强调：虽然map是万能的，以上详细介绍了什么时候用数组，什么时候用set</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-22</title>
      <link href="/posts/110fa4d2.html"/>
      <url>/posts/110fa4d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>首先什么是哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。</p><blockquote><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p></blockquote><p>其实直白来讲其实数组就是一张哈希表。</p><p>哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素</p><p>那么哈希表能解决什么问题呢，<strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></p><p>例如要查询一个名字是否在这所学校里。</p><p>要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。</p><p>我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。</p><p>将学生姓名映射到哈希表上就涉及到了<strong>hash function ，也就是哈希函数</strong>。</p><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>哈希函数，把学生的姓名直接映射为哈希表上的索引，然后就可以通过查询索引下标快速知道这位同学是否在这所学校里了。</p><p>哈希函数如下图所示，通过hashCode把名字转化为数值，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><p>如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了，怎么办呢？</p><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，这样我们就保证了学生姓名一定可以映射到哈希表上了。</p><p>此时问题又来了，哈希表我们刚刚说过，就是一个数组。</p><p>如果学生的数量大于哈希表的大小怎么办，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>一般哈希碰撞有两种解决方法， 拉链法和线性探测法。</p><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p><p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。</p><h3 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h3><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组</li><li>set （集合）</li><li>map(映射)</li></ul><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p><p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s = “anagram”, t = “nagaram” 输出: true</p><p>示例 2: 输入: s = “rat”, t = “car” 输出: false</p><p><strong>说明:</strong> 你可以假设字符串只包含小写字母。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先看暴力的解法，两层for循环，同时还要记录字符是否重复出现，很明显时间复杂度是 O(n^2)。</p><p>暴力的方法这里就不做介绍了，直接看一下有没有更优的方式。</p><p><strong>数组其实就是一个简单哈希表</strong>，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串s里字符出现的次数。</p><p>需要定义一个多大的数组呢，定一个数组叫做record，大小为26 就可以了，初始化为0，因为字符a到字符z的ASCII也是26个连续的数值。</p><p>定义一个数组叫做record用来上记录字符串s里字符出现的次数。</p><p>需要把字符映射到数组也就是哈希表的索引下标上，<strong>因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。</strong></p><p>再遍历 字符串s的时候，<strong>只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。</strong> 这样就将字符串s中字符出现的次数，统计出来了。</p><p>那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。</p><p>那么最后检查一下，<strong>record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。</strong></p><p>最后如果record数组所有元素都为零0，说明字符串s和t是字母异位词，return true。</p><p>时间复杂度为O(n)，空间上因为定义的是一个常量大小的辅助数组，所以空间复杂度为O(1)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 并不需要记住字符a的ASCII，只要求出一个相对数值就可以了</span></span><br><span class="line">            record[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            record[t[i] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (record[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// record数组如果有的元素不为零0，说明字符串s和t 一定是谁多了字符或者谁少了字符。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// record数组所有元素都为零0，说明字符串s和t是字母异位词</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> !== t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> resSet = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> base = <span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">        resSet[i.<span class="title function_">charCodeAt</span>() - base]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!resSet[i.<span class="title function_">charCodeAt</span>() - base]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        resSet[i.<span class="title function_">charCodeAt</span>() - base]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的 交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[9,4]</span><br><span class="line">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>这道题目，主要要学会使用一种哈希数据结构：unordered_set，这个数据结构可以解决很多类似的问题。</p><p>注意题目特意说明：<strong>输出结果中的每个元素一定是唯一的，也就是说输出的结果的去重的， 同时可以不考虑输出结果的顺序</strong></p><p>这道题用暴力的解法时间复杂度是O(n^2)，那来看看使用哈希法进一步优化。</p><p>那么用数组来做哈希表也是不错的选择</p><p>但是要注意，<strong>使用数组来做哈希的题目，是因为题目都限制了数值的大小。</strong></p><p>而这道题目没有限制数值的大小，就无法使用数组来做哈希表了。</p><p><strong>而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</strong></p><p>此时就要使用另一种结构体了，set ，关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希表， 使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result_set; <span class="comment">// 存放结果，之所以用set是为了给结果集去重</span></span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">nums_set</span><span class="params">(nums1.begin(), nums1.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">            <span class="comment">// 发现nums2的元素 在nums_set里又出现过</span></span><br><span class="line">            <span class="keyword">if</span> (nums_set.<span class="built_in">find</span>(num) != nums_set.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                result_set.<span class="built_in">insert</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.<span class="built_in">begin</span>(), result_set.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n + m) m 是最后要把 set转成vector</li><li>空间复杂度: O(n)</li></ul><p>本题后面 力扣改了 题目描述 和 后台测试数据，增添了 数值范围：</p><ul><li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li><li>0 &lt;= nums1[i], nums2[i] &lt;= 1000</li></ul><p>所以就可以 使用数组来做哈希表了， 因为数组都是 1000以内的。</p><p>对应C++代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; result_set; <span class="comment">// 存放结果，之所以用set是为了给结果集去重</span></span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1005</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 默认数值为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123; <span class="comment">// nums1中出现的字母在hash数组中做记录</span></span><br><span class="line">            hash[num] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123; <span class="comment">// nums2中出现话，result记录</span></span><br><span class="line">            <span class="keyword">if</span> (hash[num] == <span class="number">1</span>) &#123;</span><br><span class="line">                result_set.<span class="built_in">insert</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(result_set.<span class="built_in">begin</span>(), result_set.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(m + n)</li><li>空间复杂度: O(n)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据数组大小交换操作的数组</span></span><br><span class="line">    <span class="keyword">if</span>(nums1.<span class="property">length</span> &lt; nums2.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> _ = nums1;</span><br><span class="line">        nums1 = nums2;</span><br><span class="line">        nums2 = _;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> nums1Set = <span class="keyword">new</span> <span class="title class_">Set</span>(nums1);</span><br><span class="line">    <span class="keyword">const</span> resSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="comment">// for(const n of nums2) &#123;</span></span><br><span class="line">    <span class="comment">//     nums1Set.has(n) &amp;&amp; resSet.add(n);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 循环 比 迭代器快</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = nums2.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        nums1Set.<span class="title function_">has</span>(nums2[i]) &amp;&amp; resSet.<span class="title function_">add</span>(nums2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(resSet);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True ；不是，则返回 False 。</p><p><strong>示例：</strong></p><p>输入：19<br>输出：true<br>解释：<br>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>题目中说了会 <strong>无限循环</strong>，那么也就是说<strong>求和的过程中，sum会重复出现，这对解题很重要！</strong></p><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法了。</strong></p><p>所以这道题目使用哈希法，来判断这个sum是否重复出现，如果重复了就是return false， 否则一直找到sum为1为止。</p><p>判断sum是否重复出现就可以使用unordered_set。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 取数值各个位上的单数之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="built_in">getSum</span>(n);</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果这个sum曾经出现过，说明已经陷入了无限循环了，立刻return false</span></span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">find</span>(sum) != set.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set.<span class="built_in">insert</span>(sum);</span><br><span class="line">            &#125;</span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(logn)</li><li>空间复杂度: O(logn)</li></ul><p>由于 <code>set.end()</code> 是一个表示集合末尾的迭代器（实际上是指向最后一个元素之后的位置），因此如果 <code>set.find(sum)</code> 返回的不是 <code>set.end()</code>，那么意味着 <code>sum</code> 的值在 <code>set</code> 中已经被找到了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) ** <span class="number">2</span></span><br><span class="line">            n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// n出现过，证明已陷入无限循环</span></span><br><span class="line">        <span class="keyword">if</span> (m.<span class="title function_">has</span>(n)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        m.<span class="title function_">set</span>(n, <span class="number">1</span>)</span><br><span class="line">        n = <span class="title function_">getSum</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Set()更简洁</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getSum = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        sum += (n % <span class="number">10</span>) ** <span class="number">2</span>;</span><br><span class="line">        n =  <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();   <span class="comment">// Set() 里的数是惟一的</span></span><br><span class="line">    <span class="comment">// 如果在循环中某个值重复出现，说明此时陷入死循环，也就说明这个值不是快乐数</span></span><br><span class="line">    <span class="keyword">while</span> (n !== <span class="number">1</span> &amp;&amp; !set.<span class="title function_">has</span>(n)) &#123;</span><br><span class="line">        set.<span class="title function_">add</span>(n);</span><br><span class="line">        n = <span class="title function_">getSum</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例:</strong></p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9</p><p>所以返回 [0, 1]</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>很明显暴力的解法是两层for循环查找，时间复杂度是O(n^2)</p><p>首先我再强调一下 <strong>什么时候使用哈希法</strong>，当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。</p><p>本题呢，我就需要一个集合来存放我们遍历过的元素，然后在遍历数组的时候去询问这个集合，某元素是否遍历过，也就是 是否出现在这个集合。应该想到使用哈希法了</p><p>因为本题，我们不仅要知道元素有没有遍历过，还要知道这个元素对应的下标，<strong>需要使用 key value结构来存放，key来存元素，value来存下标，那么使用map正合适</strong>。</p><p>再来看一下使用数组和set来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ul><p>此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value再保存数值所在的下标。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        std::unordered_map &lt;<span class="type">int</span>,<span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">            <span class="keyword">auto</span> iter = map.<span class="built_in">find</span>(target - nums[i]); </span><br><span class="line">            <span class="keyword">if</span>(iter != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;iter-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">            <span class="comment">// map.insert(pair&lt;int, int&gt;(nums[i], i)); </span></span><br><span class="line">            map[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(n)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;  <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">    <span class="keyword">if</span> (hash[target - nums[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, hash[target - nums[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[i]] = i;   <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-21</title>
      <link href="/posts/110fa4d1.html"/>
      <url>/posts/110fa4d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目正常模拟就可以了。</p><p>建议使用虚拟头结点，这样会方便很多，要不然每次针对头结点（没有前一个指针指向头结点），还要单独处理。</p><p>接下来就是交换相邻两个元素了，<strong>此时一定要画图，不画图，操作多个指针很容易乱，而且要操作的先后顺序</strong></p><p>初始时，cur指向虚拟头结点，然后进行修改指针的三步操作</p><p>对应的C++代码实现如下： </p><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">// 设置一个虚拟头结点</span></span><br><span class="line">        dummyHead-&gt;next = head; <span class="comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span></span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* tmp = cur-&gt;next; <span class="comment">// 记录临时节点</span></span><br><span class="line">            ListNode* tmp1 = cur-&gt;next-&gt;next-&gt;next; <span class="comment">// 记录临时节点</span></span><br><span class="line"></span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;    <span class="comment">// 步骤一</span></span><br><span class="line">            cur-&gt;next-&gt;next = tmp;          <span class="comment">// 步骤二</span></span><br><span class="line">            cur-&gt;next-&gt;next-&gt;next = tmp1;   <span class="comment">// 步骤三</span></span><br><span class="line"></span><br><span class="line">            cur = cur-&gt;next-&gt;next; <span class="comment">// cur移动两位，准备下一轮交换</span></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* result = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head), temp = ret;</span><br><span class="line">  <span class="keyword">while</span> (temp.<span class="property">next</span> &amp;&amp; temp.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = temp.<span class="property">next</span>.<span class="property">next</span>, pre = temp.<span class="property">next</span>;</span><br><span class="line">    pre.<span class="property">next</span> = cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span> = pre;</span><br><span class="line">    temp.<span class="property">next</span> = cur;</span><br><span class="line">    temp = pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">null</span> || head.<span class="property">next</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> after = head.<span class="property">next</span>;</span><br><span class="line">  head.<span class="property">next</span> = <span class="title function_">swapPairs</span>(after.<span class="property">next</span>);</span><br><span class="line">  after.<span class="property">next</span> = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> after;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5]</p><p>示例 2：</p><p>输入：head = [1], n = 1 输出：[]</p><p>示例 3：</p><p>输入：head = [1,2], n = 1 输出：[1]</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>双指针的经典应用，如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。</p><p>思路是这样的，但要注意一些细节。</p><p>定义fast指针和slow指针，初始值为虚拟头结点</p><p><strong>fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作）</strong></p><p>fast和slow同时移动，直到fast指向末尾</p><p>删除slow指向的下一个节点</p><p>此时不难写出如下:</p><h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        dummyHead-&gt;next = head;</span><br><span class="line">        ListNode* slow = dummyHead;</span><br><span class="line">        ListNode* fast = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(n-- &amp;&amp; fast != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast-&gt;next; <span class="comment">// fast再提前走一步，因为需要让slow指向删除节点的上一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = slow-&gt;next-&gt;next; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ListNode *tmp = slow-&gt;next;  C++释放内存的逻辑</span></span><br><span class="line">        <span class="comment">// slow-&gt;next = tmp-&gt;next;</span></span><br><span class="line">        <span class="comment">// delete tmp;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(1)</li></ul><h3 id="JS代码-1"><a href="#JS代码-1" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span> (<span class="params">head, n</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建哨兵节点，简化解题逻辑</span></span><br><span class="line">  <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">  <span class="keyword">let</span> fast = dummyHead;</span><br><span class="line">  <span class="keyword">let</span> slow = dummyHead;</span><br><span class="line">  <span class="keyword">while</span> (n--) fast = fast.<span class="property">next</span>;</span><br><span class="line">  <span class="keyword">while</span> (fast.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    slow = slow.<span class="property">next</span>;</span><br><span class="line">    fast = fast.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">  <span class="keyword">return</span> dummyHead.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="160-链表相交"><a href="#160-链表相交" class="headerlink" title="160.链表相交"></a>160.链表相交</h2><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>简单来说，就是求两个链表交点节点的<strong>指针</strong>。 这里同学们要注意，交点不是数值相等，而是指针相等。</p><p>我们求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置。</p><p>此时我们就可以比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。</p><p>否则循环退出返回空指针。</p><h3 id="C-代码-2"><a href="#C-代码-2" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode* curA = headA;</span><br><span class="line">        ListNode* curB = headB;</span><br><span class="line">        <span class="type">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (curA != <span class="literal">NULL</span>) &#123; <span class="comment">// 求链表A的长度</span></span><br><span class="line">            lenA++;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (curB != <span class="literal">NULL</span>) &#123; <span class="comment">// 求链表B的长度</span></span><br><span class="line">            lenB++;</span><br><span class="line">            curB = curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line">        <span class="comment">// 让curA为最长链表的头，lenA为其长度</span></span><br><span class="line">        <span class="keyword">if</span> (lenB &gt; lenA) &#123;</span><br><span class="line">            <span class="built_in">swap</span> (lenA, lenB);</span><br><span class="line">            <span class="built_in">swap</span> (curA, curB);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求长度差</span></span><br><span class="line">        <span class="type">int</span> gap = lenA - lenB;</span><br><span class="line">        <span class="comment">// 让curA和curB在同一起点上（末尾位置对齐）</span></span><br><span class="line">        <span class="keyword">while</span> (gap--) &#123;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历curA 和 curB，遇到相同则直接返回</span></span><br><span class="line">        <span class="keyword">while</span> (curA != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curA == curB) &#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            curA = curA-&gt;next;</span><br><span class="line">            curB = curB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n + m)</li><li>空间复杂度：O(1)</li></ul><h3 id="JS代码-2"><a href="#JS代码-2" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getListLen = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>, cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">       len++;</span><br><span class="line">       cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> curA = headA,curB = headB,</span><br><span class="line">        lenA = <span class="title function_">getListLen</span>(headA),   <span class="comment">// 求链表A的长度</span></span><br><span class="line">        lenB = <span class="title function_">getListLen</span>(headB);  </span><br><span class="line">    <span class="keyword">if</span>(lenA &lt; lenB) &#123;       <span class="comment">// 让curA为最长链表的头，lenA为其长度</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 交换变量注意加 “分号” ，两个数组交换变 量在同一个作用域下时</span></span><br><span class="line">        <span class="comment">// 如果不加分号，下面两条代码等同于一条代码: [curA, curB] = [lenB, lenA]</span></span><br><span class="line">        </span><br><span class="line">        [curA, curB] = [curB, curA];</span><br><span class="line">        [lenA, lenB] = [lenB, lenA];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = lenA - lenB;   <span class="comment">// 求长度差</span></span><br><span class="line">    <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>) &#123;       <span class="comment">// 让curA和curB在同一起点上（末尾位置对齐）</span></span><br><span class="line">        curA = curA.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(curA &amp;&amp; curA !== curB) &#123;  <span class="comment">// 遍历curA 和 curB，遇到相同则直接返回</span></span><br><span class="line">        curA = curA.<span class="property">next</span>;</span><br><span class="line">        curB = curB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curA;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2><p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p><p><strong>说明</strong>：不允许修改给定的链表。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>这道题目，不仅考察对链表的操作，而且还需要一些数学运算。</p><p>主要考察两知识点：</p><ul><li>判断链表是否环</li><li>如果有环，如何找到这个环的入口</li></ul><h3 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h3><p>可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</p><p>为什么fast 走两个节点，slow走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢</p><p>首先第一点：<strong>fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</strong></p><p>那么来看一下，<strong>为什么fast指针和slow指针一定会相遇呢？</strong></p><p>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。</p><p>这是因为fast是走两步，slow是走一步，<strong>其实相对于slow来说，fast是一个节点一个节点的靠近slow的</strong>，所以fast一定可以和slow重合。</p><h3 id="如果有环，如何找到这个环的入口"><a href="#如果有环，如何找到这个环的入口" class="headerlink" title="如果有环，如何找到这个环的入口"></a>如果有环，如何找到这个环的入口</h3><p><strong>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。</strong></p><p><strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p><h3 id="C-代码-3"><a href="#C-代码-3" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="comment">// 快慢指针相遇，此时从head 和 相遇点，同时查找直至相遇</span></span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                ListNode* index1 = fast;</span><br><span class="line">                ListNode* index2 = head;</span><br><span class="line">                <span class="keyword">while</span> (index1 != index2) &#123;</span><br><span class="line">                    index1 = index1-&gt;next;</span><br><span class="line">                    index2 = index2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index2; <span class="comment">// 返回环的入口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JS代码-3"><a href="#JS代码-3" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种循环实现方式</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 先判断是否是环形链表</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> slow =head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span> &amp;&amp; fast!== slow) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fast || !fast.<span class="property">next</span> ) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast !== slow) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> slow =head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span>(fast == slow) &#123;</span><br><span class="line">            slow = head;</span><br><span class="line">            <span class="keyword">while</span> (fast !== slow) &#123;</span><br><span class="line">                slow = slow.<span class="property">next</span>;</span><br><span class="line">                fast = fast.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-20</title>
      <link href="/posts/110fa4d0.html"/>
      <url>/posts/110fa4d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;  <span class="comment">// 节点上存储的元素</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">// 节点的构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。</p><p>但是这个构造函数不会初始化任何成员变量，下面我来举两个例子：</p><p>通过自己定义构造函数初始化节点：<code>ListNode* head = new ListNode(5);</code></p><p>使用默认构造函数初始化节点：<code>ListNode* head = new ListNode();head-&gt;val = 5;</code></p><p>所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值</p><p>JS定义链表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">  val;</span><br><span class="line">  next = <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>如果使用C，C++编程语言的话，不要忘了还要从内存中删除这两个移除的节点， 清理节点内存</p><p><strong>当然如果使用java ，python的话就不用手动管理内存了。</strong></p><p>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。</p><p>为了统一操作 <strong>设置一个虚拟头结点在进行删除操作。</strong></p><p>最后在题目中，return 头结点的时候，别忘了 <code>return dummyNode-&gt;next;</code>， 这才是新的头结点</p><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">// 设置一个虚拟头结点</span></span><br><span class="line">        dummyHead-&gt;next = head; <span class="comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span></span><br><span class="line">        ListNode* cur = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == val) &#123;</span><br><span class="line">                ListNode* tmp = cur-&gt;next;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummyHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span> (<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">    <span class="keyword">let</span> cur = dummyHead;</span><br><span class="line">    <span class="keyword">while</span> (cur.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">next</span>.<span class="property">val</span> === val) &#123;</span><br><span class="line">            cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2><p>题意：</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><p><strong>链表操作的两种方式：</strong></p><ol><li>直接使用原来的链表来进行操作。</li><li>设置一个虚拟头结点在进行操作。</li></ol><p>下面采用的设置一个虚拟头结点</p><h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义链表节点结构体</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LinkedNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        LinkedNode* next;</span><br><span class="line">        <span class="built_in">LinkedNode</span>(<span class="type">int</span> val):<span class="built_in">val</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化链表</span></span><br><span class="line">    <span class="built_in">MyLinkedList</span>() &#123;</span><br><span class="line">        _dummyHead = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(<span class="number">0</span>); <span class="comment">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到第index个节点数值，如果index是非法数值直接返回-1， 注意index是从0开始的，第0个节点就是头结点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; (_size - <span class="number">1</span>) || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* cur = _dummyHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(index--)&#123; <span class="comment">// 如果--index 就会陷入死循环</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        newNode-&gt;next = _dummyHead-&gt;next;</span><br><span class="line">        _dummyHead-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在链表最后面添加一个节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span></span><br><span class="line">    <span class="comment">// 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></span><br><span class="line">    <span class="comment">// 如果index大于链表的长度，则返回空</span></span><br><span class="line">    <span class="comment">// 如果index小于0，则在头部插入节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index &gt; _size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>) index = <span class="number">0</span>;        </span><br><span class="line">        LinkedNode* newNode = <span class="keyword">new</span> <span class="built_in">LinkedNode</span>(val);</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">        _size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= _size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(index--) &#123;</span><br><span class="line">            cur = cur -&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedNode* tmp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        <span class="comment">//delete命令指示释放了tmp指针原本所指的那部分内存，</span></span><br><span class="line">        <span class="comment">//被delete后的指针tmp的值（地址）并非就是NULL，而是随机值。也就是被delete后，</span></span><br><span class="line">        <span class="comment">//如果不再加上一句tmp=nullptr,tmp会成为乱指的野指针</span></span><br><span class="line">        <span class="comment">//如果之后的程序不小心使用了tmp，会指向难以预想的内存空间</span></span><br><span class="line">        tmp=<span class="literal">nullptr</span>;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedNode* cur = _dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; cur-&gt;next-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">    LinkedNode* _dummyHead;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: 涉及 <code>index</code> 的相关操作为 O(index), 其余为 O(1)</li><li>空间复杂度: O(n)</li></ul><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h2><p>题意：反转一个单链表。</p><p>示例: 输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果再定义一个新的链表，实现链表元素的反转，其实这是对内存空间的浪费。</p><p>其实只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表</p><p>之前链表的头节点是元素1， 反转之后头结点就是元素5 ，这里并没有添加或者删除节点，仅仅是改变next指针的方向。</p><p>首先定义一个cur指针，指向头结点，再定义一个pre指针，初始化为null。</p><p>然后就要开始反转了，首先要把 cur-&gt;next 节点用tmp指针保存一下，也就是保存一下这个节点。</p><p>为什么要保存一下这个节点呢，因为接下来要改变 cur-&gt;next 的指向了，将cur-&gt;next 指向pre ，此时已经反转了第一个节点了。</p><p>接下来，就是循环走如下代码逻辑了，继续移动pre和cur指针。</p><p>最后，cur 指针已经指向了null，循环结束，链表也反转完毕了。 此时我们return pre指针就可以了，pre指针就指向了新的头结点。</p><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* temp; <span class="comment">// 保存cur的下一个节点</span></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">            temp = cur-&gt;next;  <span class="comment">// 保存一下 cur的下一个节点，因为接下来要改变cur-&gt;next</span></span><br><span class="line">            cur-&gt;next = pre; <span class="comment">// 翻转操作</span></span><br><span class="line">            <span class="comment">// 更新pre 和 cur指针</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(1)</li></ul><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p><strong>双指针法写出来之后，理解如下递归写法就不难了，代码逻辑都是一样的。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* pre,ListNode* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">NULL</span>) <span class="keyword">return</span> pre;</span><br><span class="line">        ListNode* temp = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        <span class="comment">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></span><br><span class="line">        <span class="comment">// pre = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(cur,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 和双指针法初始化是一样的逻辑</span></span><br><span class="line">        <span class="comment">// ListNode* cur = head;</span></span><br><span class="line">        <span class="comment">// ListNode* pre = NULL;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reverse</span>(<span class="literal">NULL</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度: O(n), 要递归处理链表的每个节点</li><li>空间复杂度: O(n), 递归调用了 n 层栈空间</li></ul><h3 id="JS代码-1"><a href="#JS代码-1" class="headerlink" title="JS代码"></a>JS代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双指针：</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="literal">null</span>, pre = <span class="literal">null</span>, cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        temp = cur.<span class="property">next</span>;</span><br><span class="line">        cur.<span class="property">next</span> = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// temp = cur = null;</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-19</title>
      <link href="/posts/110fa4c9.html"/>
      <url>/posts/110fa4c9.html</url>
      
        <content type="html"><![CDATA[<h3 id="58-区间和"><a href="#58-区间和" class="headerlink" title="58. 区间和"></a>58. 区间和</h3><p>给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。</p><h6 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h6><p>第一行输入为整数数组 Array 的长度 n，接下来 n 行，每行一个整数，表示数组的元素。随后的输入为需要计算总和的区间下标：a，b （b &gt; = a），直至文件结束。</p><h6 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h6><p>输出每个指定区间内元素的总和。</p><p>前缀和的思想是重复利用计算过的子数组之和，从而降低区间查询需要累加计算的次数。</p><p><strong>前缀和 在涉及计算区间和的问题时非常有用</strong>！</p><p>C++ 代码 面对大量数据 读取 输出操作，最好用scanf 和 printf，耗时会小很多：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, a, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="type">int</span> presum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;vec[i]);</span><br><span class="line">        presum += vec[i];</span><br><span class="line">        p[i] = presum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b)) &#123;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) sum = p[b];</span><br><span class="line">        <span class="keyword">else</span> sum = p[b] - p[a - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="44-开发商购买土地"><a href="#44-开发商购买土地" class="headerlink" title="44. 开发商购买土地"></a>44. 开发商购买土地</h3><p>在一个城市区域内，被划分成了n * m个连续的区块，每个区块都拥有不同的权值，代表着其土地价值。目前，有两家开发公司，A 公司和 B 公司，希望购买这个城市区域的土地。 </p><p>现在，需要将这个城市区域的所有区块分配给 A 公司和 B 公司。</p><p>然而，由于城市规划的限制，只允许将区域按横向或纵向划分成两个子区域，而且每个子区域都必须包含一个或多个区块。 为了确保公平竞争，你需要找到一种分配方式，使得 A 公司和 B 公司各自的子区域内的土地总价值之差最小。 </p><p>注意：区块不可再分。</p><h6 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h6><p>第一行输入两个正整数，代表 n 和 m。 </p><p>接下来的 n 行，每行输出 m 个正整数。</p><h6 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h6><p>请输出一个整数，代表两个子区域内土地总价值之间的最小差距。</p><h6 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">2 1 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h6 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h6 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h6><p>如果将区域按照如下方式划分：</p><p>1 2 | 3<br>2 1 | 3<br>1 2 | 3 </p><p>两个子区域内土地总价值之间的最小差距可以达到 0。</p><p>数据范围：</p><p>1 &lt;= n, m &lt;= 100；<br>n 和 m 不同时为 1。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>看到本题，大家如果想暴力求解，应该是 n^3 的时间复杂度，</p><p>一个 for 枚举分割线， 嵌套 两个for 去累加区间里的和。</p><p>二维前缀和的思想 可以回忆一下 有固定的公式</p><p>在行向遍历的时候，遇到行末尾就统一一下， 在列向遍历的时候，遇到列末尾就统计一下。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vec</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>)) ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; vec[i][j];</span><br><span class="line">            sum += vec[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = INT_MAX;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">// 统计遍历过的行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span> ; j &lt; m; j++) &#123;</span><br><span class="line">            count += vec[i][j];</span><br><span class="line">            <span class="comment">// 遍历到行末尾时候开始统计</span></span><br><span class="line">            <span class="keyword">if</span> (j == m - <span class="number">1</span>) result = <span class="built_in">min</span> (result, <span class="built_in">abs</span>(sum - count - count));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span>; <span class="comment">// 统计遍历过的列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; i++) &#123;</span><br><span class="line">            count += vec[i][j];</span><br><span class="line">            <span class="comment">// 遍历到列末尾的时候开始统计</span></span><br><span class="line">            <span class="keyword">if</span> (i == n - <span class="number">1</span>) result = <span class="built_in">min</span> (result, <span class="built_in">abs</span>(sum - count - count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-18</title>
      <link href="/posts/110fa4c8.html"/>
      <url>/posts/110fa4c8.html</url>
      
        <content type="html"><![CDATA[<h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><ul><li>输入：nums = [-4,-1,0,3,10]</li><li>输出：[0,1,9,16,100]</li><li>解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</li></ul><p>示例 2：</p><ul><li><p>输入：nums = [-7,-3,2,3,11]</p></li><li><p>输出：[4,9,9,49,121]</p></li></ul><h4 id="暴力排序"><a href="#暴力排序" class="headerlink" title="暴力排序"></a>暴力排序</h4><p>每个数平方之后，排个序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        A[i]*=A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(),A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> O(n + nlogn)</p><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j];</code> 。</p><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i];</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>, k = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = nums[i] * nums[i];</span><br><span class="line">        <span class="keyword">let</span> right = nums[j] * nums[j];</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            res[k--] = right;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[k--] = left;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>O(n)</p><h3 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h3><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p>示例:</p><p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><p>模拟顺时针画矩阵的过程:</p><ul><li>填充上行从左到右</li><li>填充右列从上到下</li><li>填充下行从右到左</li><li>填充左列从下到上</li></ul><p>由外向内一圈一圈这么画下去。</p><p>可以发现这里的边界条件非常多，在一个循环中，如此多的边界条件，如果不按照固定规则来遍历，那就是<strong>一进循环深似海，从此offer是路人</strong>。</p><p>这里一圈下来，我们要画每四条边，这四条边怎么画，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p><p>代码如下，已经详细注释了每一步的目的，可以看出while循环里判断的情况是很多的，代码里处理的原则也是统一的左闭右开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startX = startY = <span class="number">0</span>;    <span class="comment">//起始位置</span></span><br><span class="line">    <span class="keyword">let</span> loop = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>); <span class="comment">// 旋转圈数</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>);  <span class="comment">//中间位置</span></span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">1</span>; <span class="comment">// 控制每一层填充元素个数</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;    <span class="comment">//更新填充数字</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)); <span class="comment">//初始化一个二维数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (loop--) &#123;</span><br><span class="line">        <span class="keyword">let</span> row = startX, col = startY;</span><br><span class="line">        <span class="keyword">for</span> (; col &lt; n - offset; col++) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; row &lt; n - offset; row++) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; col &gt; startY; col--) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; row &gt; startX; row--) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 走完一圈 右下左上 更新起始位置</span></span><br><span class="line">        startX++;</span><br><span class="line">        startY++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新offset</span></span><br><span class="line">        offset += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        res[mid][mid] = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度 O(n^2): 模拟遍历二维矩阵的时间</li><li>空间复杂度 O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-17</title>
      <link href="/posts/110fa4c7.html"/>
      <url>/posts/110fa4c7.html</url>
      
        <content type="html"><![CDATA[<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><strong>704. 二分查找</strong></h5><p>思路：</p><p>二分法第一种写法</p><p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是[left, right] （这个很重要非常重要）</strong>。</p><p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义target在[left, right]区间，所以有如下两点：</strong></p><ul><li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li><li>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid,left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        mid = left+((right-left)&gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>二分法第二种写法</p><p>如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p><p>有如下两点：</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid,left=<span class="number">0</span>,right=nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        mid = left+((right-left)&gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right=mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><strong>27. 移除元素</strong></h5><p>思路</p><p>暴力解法</p><p>这个题目暴力的解法就是两层for循环，一个for循环遍历数组元素 ，第二个for循环更新数组。</p><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">//空间复杂度：O(1)</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">removeElement</span> = (<span class="params">nums, val</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">      nums[k++] = nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h5><p>思路<br>暴力排序</p><p>最直观的想法，莫过于：每个数平方之后，排个序</p><p>双指针法</p><p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j];</code> 。</p><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i];</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = nums.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> i=<span class="number">0</span>,j=n-<span class="number">1</span>,k=n-<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">    <span class="keyword">let</span> left = nums[i]*nums[i];</span><br><span class="line">    <span class="keyword">let</span> right = nums[j]*nums[j];</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">      res[k] = right</span><br><span class="line">      j--;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res[k]=left</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    k--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day07(vuex)</title>
      <link href="/posts/110fa4c6.html"/>
      <url>/posts/110fa4c6.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vuex概述"><a href="#Vuex概述" class="headerlink" title="Vuex概述"></a>Vuex概述</h3><p>Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享</p><p>使用Vuex管理数据的好处：<br>A.能够在vuex中集中管理共享的数据，便于开发和后期进行维护<br>B.能够高效的实现组件之间的数据共享，提高开发效率<br>C.存储在vuex中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</p><h3 id="使用Vuex完成计数器案例"><a href="#使用Vuex完成计数器案例" class="headerlink" title="使用Vuex完成计数器案例"></a>使用Vuex完成计数器案例</h3><p>打开创建的vuex项目，找到src目录中的App.vue组件，将代码重新编写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-addition&gt;&lt;/my-addition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;----------------------------------------&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;my-subtraction&gt;&lt;/my-subtraction&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Addition from &#x27;./components/Addition.vue&#x27;</span><br><span class="line">import Subtraction from &#x27;./components/Subtraction.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x27;my-subtraction&#x27;: Subtraction,</span><br><span class="line">    &#x27;my-addition&#x27;: Addition</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在components文件夹中创建Addition.vue组件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;/h3&gt;</span><br><span class="line">        &lt;button&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在components文件夹中创建Subtraction.vue组件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;/h3&gt;</span><br><span class="line">        &lt;button&gt;-1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后在项目根目录(与src平级)中创建 .prettierrc 文件，编写代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;semi&quot;:false,</span><br><span class="line">    &quot;singleQuote&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vuex中的核心特性"><a href="#Vuex中的核心特性" class="headerlink" title="Vuex中的核心特性"></a>Vuex中的核心特性</h3><h4 id="A-State"><a href="#A-State" class="headerlink" title="A.State"></a>A.State</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储</span><br><span class="line">例如，打开项目中的store.js文件，在State对象中可以添加我们要共享的数据，如：count:0</span><br><span class="line"></span><br><span class="line">在组件中访问State的方式：</span><br><span class="line">1).this.$store.state.全局数据名称  如：this.$store.state.count</span><br><span class="line">2).先按需导入mapState函数： import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">然后数据映射为计算属性： computed:&#123; ...mapState([&#x27;全局数据名称&#x27;]) &#125;</span><br></pre></td></tr></table></figure><h4 id="B-Mutation"><a href="#B-Mutation" class="headerlink" title="B.Mutation"></a>B.Mutation</h4><p>Mutation用于修改变更$store中的数据<br>使用方式：<br>打开store.js文件，在mutations中添加代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    add(state,step)&#123;</span><br><span class="line">      //第一个形参永远都是state也就是$state对象</span><br><span class="line">      //第二个形参是调用add时传递的参数</span><br><span class="line">      state.count+=step;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后在Addition.vue中给按钮添加事件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;Add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  Add()&#123;</span><br><span class="line">    //使用commit函数调用mutations中的对应函数，</span><br><span class="line">    //第一个参数就是我们要调用的mutations中的函数名</span><br><span class="line">    //第二个参数就是传递给add函数的参数</span><br><span class="line">    this.$store.commit(&#x27;add&#x27;,10)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mutations的第二种方式：<br>import { mapMutations } from ‘vuex’</p><p>methods:{<br>  …mapMutations([‘add’])<br>}<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-Action"><a href="#C-Action" class="headerlink" title="C.Action"></a>C.Action</h4><p>在mutations中不能编写异步的代码，会导致vue调试器的显示出错。<br>在vuex中我们可以使用Action来执行异步操作。<br>操作步骤如下：<br>打开store.js文件，修改Action，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">addAsync</span>(<span class="params">context,step</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,step);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Addition.vue中给按钮添加事件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;AddAsync&quot;&gt;...+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  AddAsync()&#123;</span><br><span class="line">    this.$store.dispatch(&#x27;addAsync&#x27;,5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式：<br>import { mapActions } from ‘vuex’</p><p>methods:{<br>  …mapMutations([‘subAsync’])<br>}<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations,mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//获得mapActions映射的addAsync函数</span></span><br><span class="line">      ...<span class="title function_">mapActions</span>([<span class="string">&#x27;subAsync&#x27;</span>]),</span><br><span class="line">      <span class="title function_">asyncSub</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">subAsync</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="D-Getter"><a href="#D-Getter" class="headerlink" title="D.Getter"></a>D.Getter</h4><p>Getter用于对Store中的数据进行加工处理形成新的数据<br>它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化<br>打开store.js文件，添加getters，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  .......</span><br><span class="line">  getters:&#123;</span><br><span class="line">    //添加了一个showNum的属性</span><br><span class="line">    showNum : state =&gt;&#123;</span><br><span class="line">      return &#x27;最新的count值为：&#x27;+state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后打开Addition.vue中，添加插值表达式使用getters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$store.getters.showNum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">或者也可以在Addition.vue中，导入mapGetters，并将之映射为计算属性</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">computed:&#123;</span><br><span class="line">  ...mapGetters([&#x27;showNum&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day06(前端工程化)</title>
      <link href="/posts/110fa4c5.html"/>
      <url>/posts/110fa4c5.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h3><h4 id="A-浏览器端的模块化"><a href="#A-浏览器端的模块化" class="headerlink" title="A.浏览器端的模块化"></a>A.浏览器端的模块化</h4><pre><code>    1).AMD(Asynchronous Module Definition,异步模块定义)    代表产品为：Require.js    2).CMD(Common Module Definition,通用模块定义)    代表产品为：Sea.js</code></pre><h4 id="B-服务器端的模块化"><a href="#B-服务器端的模块化" class="headerlink" title="B.服务器端的模块化"></a>B.服务器端的模块化</h4><pre><code>    服务器端的模块化规范是使用CommonJS规范：    1).使用require引入其他模块或者包    2).使用exports或者module.exports导出模块成员    3).一个文件就是一个模块，都拥有独立的作用域</code></pre><h4 id="C-ES6模块化"><a href="#C-ES6模块化" class="headerlink" title="C.ES6模块化"></a>C.ES6模块化</h4><pre><code>    ES6模块化规范中定义：        1).每一个js文件都是独立的模块        2).导入模块成员使用import关键字        3).暴露模块成员使用export关键字</code></pre><p>小结：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。<br>      ES6模块化是浏览器端和服务器端通用的规范.</p><h3 id="2-在NodeJS中安装babel"><a href="#2-在NodeJS中安装babel" class="headerlink" title="2.在NodeJS中安装babel"></a>2.在NodeJS中安装babel</h3><h4 id="A-安装babel"><a href="#A-安装babel" class="headerlink" title="A.安装babel"></a>A.安装babel</h4><pre><code>打开终端，输入命令：npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node安装完毕之后，再次输入命令安装：npm install --save @babel/polyfill</code></pre><h4 id="B-创建babel-config-js"><a href="#B-创建babel-config-js" class="headerlink" title="B.创建babel.config.js"></a>B.创建babel.config.js</h4><pre><code>在项目目录中创建babel.config.js文件。编辑js文件中的代码如下：    const presets = [        [&quot;@babel/env&quot;,&#123;            targets:&#123;                edge:&quot;17&quot;,                firefox:&quot;60&quot;,                chrome:&quot;67&quot;,                safari:&quot;11.1&quot;            &#125;        &#125;]    ]    //暴露    module.exports = &#123; presets &#125;</code></pre><h4 id="C-创建index-js文件"><a href="#C-创建index-js文件" class="headerlink" title="C.创建index.js文件"></a>C.创建index.js文件</h4><pre><code>在项目目录中创建index.js文件作为入口文件在index.js中输入需要执行的js代码，例如：    console.log(&quot;ok&quot;);</code></pre><h4 id="D-使用npx执行文件"><a href="#D-使用npx执行文件" class="headerlink" title="D.使用npx执行文件"></a>D.使用npx执行文件</h4><pre><code>打开终端，输入命令：npx babel-node ./index.js</code></pre><h3 id="3-设置默认导入-导出"><a href="#3-设置默认导入-导出" class="headerlink" title="3.设置默认导入/导出"></a>3.设置默认导入/导出</h3><h4 id="A-默认导出"><a href="#A-默认导出" class="headerlink" title="A.默认导出"></a>A.默认导出</h4><pre><code>export default &#123;    成员A,    成员B,    .......&#125;,如下：let num = 100;export default&#123;    num&#125;</code></pre><h4 id="B-默认导入"><a href="#B-默认导入" class="headerlink" title="B.默认导入"></a>B.默认导入</h4><pre><code>import 接收名称 from &quot;模块标识符&quot;，如下：import test from &quot;./test.js&quot;</code></pre><p>注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。<br>如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象 </p><h3 id="4-设置按需导入-导出"><a href="#4-设置按需导入-导出" class="headerlink" title="4.设置按需导入/导出"></a>4.设置按需导入/导出</h3><h4 id="A-按需导出"><a href="#A-按需导出" class="headerlink" title="A.按需导出"></a>A.按需导出</h4><pre><code>export let num = 998;export let myName = &quot;jack&quot;;export function fn = function()&#123; console.log(&quot;fn&quot;) &#125;</code></pre><h4 id="B-按需导入"><a href="#B-按需导入" class="headerlink" title="B.按需导入"></a>B.按需导入</h4><pre><code>import &#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;//同时导入默认导出的成员以及按需导入的成员import test,&#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;</code></pre><p>注意：一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p><h3 id="5-直接导入并执行代码"><a href="#5-直接导入并执行代码" class="headerlink" title="5.直接导入并执行代码"></a>5.直接导入并执行代码</h3><pre><code>import &quot;./test2.js&quot;;</code></pre><h3 id="6-webpack的概念"><a href="#6-webpack的概念" class="headerlink" title="6.webpack的概念"></a>6.webpack的概念</h3><p>webpack是一个流行的前端项目构建工具，可以解决目前web开发的困境。<br>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目的可维护性</p><h3 id="7-webpack的基本使用"><a href="#7-webpack的基本使用" class="headerlink" title="7.webpack的基本使用"></a>7.webpack的基本使用</h3><h4 id="A-创建项目目录并初始化"><a href="#A-创建项目目录并初始化" class="headerlink" title="A.创建项目目录并初始化"></a>A.创建项目目录并初始化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建项目，并打开项目所在目录的终端，输入命令：</span><br><span class="line">    npm init -y</span><br></pre></td></tr></table></figure><h4 id="B-创建首页及js文件"><a href="#B-创建首页及js文件" class="headerlink" title="B.创建首页及js文件"></a>B.创建首页及js文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在项目目录中创建index.html页面，并初始化页面结构：在页面中摆放一个ul，ul里面放置几个li</span><br><span class="line">在项目目录中创建js文件夹，并在文件夹中创建index.js文件</span><br></pre></td></tr></table></figure><h4 id="C-安装jQuery"><a href="#C-安装jQuery" class="headerlink" title="C.安装jQuery"></a>C.安装jQuery</h4><pre><code>打开项目目录终端，输入命令:npm install jQuery -S</code></pre><h4 id="D-导入jQuery"><a href="#D-导入jQuery" class="headerlink" title="D.导入jQuery"></a>D.导入jQuery</h4><pre><code>打开index.js文件，编写代码导入jQuery并实现功能：import $ from &quot;jquery&quot;;$(function()&#123;    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;cyan&quot;);    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;pink&quot;);&#125;)</code></pre><p>注意：此时项目运行会有错误，因为import $ from “jquery”;这句代码属于ES6的新语法代码，在浏览器中可能会存在兼容性问题<br>所以我们需要webpack来帮助我们解决这个问题。</p><h4 id="E-安装webpack"><a href="#E-安装webpack" class="headerlink" title="E.安装webpack"></a>E.安装webpack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1).打开项目目录终端，输入命令:</span><br><span class="line">npm install webpack webpack-cli -D</span><br><span class="line">2).然后在项目根目录中，创建一个 webpack.config.js 的配置文件用来配置webpack</span><br><span class="line">在 webpack.config.js 文件中编写代码进行webpack配置，如下：</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;//可以设置为development(开发模式)，production(发布模式)</span><br><span class="line">&#125;</span><br><span class="line">补充：mode设置的是项目的编译模式。</span><br><span class="line">如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些</span><br><span class="line">如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</span><br><span class="line">3).修改项目中的package.json文件添加运行脚本dev，如下：</span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;</span><br><span class="line">注意：scripts节点下的脚本，可以通过 npm run 运行，如：</span><br><span class="line">运行终端命令：npm run dev</span><br><span class="line">将会启动webpack进行项目打包</span><br><span class="line">4).运行dev命令进行项目打包，并在页面中引入项目打包生成的js文件</span><br><span class="line">打开项目目录终端，输入命令:</span><br><span class="line">npm run dev</span><br><span class="line">等待webpack打包完毕之后，找到默认的dist路径中生成的main.js文件，将其引入到html页面中。</span><br><span class="line">浏览页面查看效果。</span><br></pre></td></tr></table></figure><h3 id="8-设置webpack的打包入口-出口"><a href="#8-设置webpack的打包入口-出口" class="headerlink" title="8.设置webpack的打包入口/出口"></a>8.设置webpack的打包入口/出口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在webpack 4.x中，默认会将src/index.js 作为默认的打包入口js文件</span><br><span class="line">                 默认会将dist/main.js 作为默认的打包输出js文件</span><br><span class="line">如果不想使用默认的入口/出口js文件，我们可以通过改变 webpack.config.js 来设置入口/出口的js文件，如下：</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;,</span><br><span class="line">    //设置入口文件路径</span><br><span class="line">    entry: path.join(__dirname,&quot;./src/xx.js&quot;),</span><br><span class="line">    //设置出口文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        //设置路径</span><br><span class="line">        path:path.join(__dirname,&quot;./dist&quot;),</span><br><span class="line">        //设置文件名</span><br><span class="line">        filename:&quot;res.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-设置webpack的自动打包"><a href="#9-设置webpack的自动打包" class="headerlink" title="9.设置webpack的自动打包"></a>9.设置webpack的自动打包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，我们更改入口js文件的代码，需要重新运行命令打包webpack，才能生成出口的js文件</span><br><span class="line">那么每次都要重新执行命令打包，这是一个非常繁琐的事情，那么，自动打包可以解决这样繁琐的操作。</span><br><span class="line">实现自动打包功能的步骤如下：</span><br><span class="line">    A.安装自动打包功能的包:webpack-dev-server</span><br><span class="line">        npm install webpack-dev-server -D</span><br><span class="line">    B.修改package.json中的dev指令如下：</span><br><span class="line">        &quot;scripts&quot;:&#123;</span><br><span class="line">            &quot;dev&quot;:&quot;webpack-dev-server&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    C.将引入的js文件路径更改为：&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    D.运行npm run dev，进行打包</span><br><span class="line">    E.打开网址查看效果：http://localhost:8080</span><br><span class="line"></span><br><span class="line">注意：webpack-dev-server自动打包的输出文件，默认放到了服务器的根目录中.</span><br></pre></td></tr></table></figure><p>补充：<br>在自动打包完毕之后，默认打开服务器网页，实现方式就是打开package.json文件，修改dev命令：<br>    “dev”: “webpack-dev-server —open —host 127.0.0.1 —port 9999”</p><h3 id="10-配置html-webpack-plugin"><a href="#10-配置html-webpack-plugin" class="headerlink" title="10.配置html-webpack-plugin"></a>10.配置html-webpack-plugin</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用html-webpack-plugin 可以生成一个预览页面。</span><br><span class="line">因为当我们访问默认的 http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面</span><br><span class="line">还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。</span><br><span class="line">实现默认预览页面功能的步骤如下：</span><br><span class="line">    A.安装默认预览功能的包:html-webpack-plugin</span><br><span class="line">        npm install html-webpack-plugin -D</span><br><span class="line">    B.修改webpack.config.js文件，如下：</span><br><span class="line">        //导入包</span><br><span class="line">        const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">        //创建对象</span><br><span class="line">        const htmlPlugin = new HtmlWebpackPlugin(&#123;</span><br><span class="line">            //设置生成预览页面的模板文件</span><br><span class="line">            template:&quot;./src/index.html&quot;,</span><br><span class="line">            //设置生成的预览页面名称</span><br><span class="line">            filename:&quot;index.html&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    C.继续修改webpack.config.js文件，添加plugins信息：</span><br><span class="line">        module.exports = &#123;</span><br><span class="line">            ......</span><br><span class="line">            plugins:[ htmlPlugin ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="11-webpack中的加载器"><a href="#11-webpack中的加载器" class="headerlink" title="11.webpack中的加载器"></a>11.webpack中的加载器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包</span><br><span class="line">    loader加载器包含：</span><br><span class="line">        <span class="number">1</span>).<span class="property">less</span>-loader</span><br><span class="line">        <span class="number">2</span>).<span class="property">sass</span>-loader</span><br><span class="line">        <span class="number">3</span>).<span class="property">url</span>-<span class="attr">loader</span>:打包处理css中与url路径有关的文件</span><br><span class="line">        <span class="number">4</span>).<span class="property">babel</span>-<span class="attr">loader</span>:处理高级js语法的加载器</span><br><span class="line">        <span class="number">5</span>).<span class="property">postcss</span>-loader</span><br><span class="line">        <span class="number">6</span>).<span class="property">css</span>-loader,style-loader</span><br><span class="line"></span><br><span class="line">注意：指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用</span><br><span class="line"></span><br><span class="line">A.安装style-loader,css-loader来处理样式文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install style-loader css-loader -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">B.安装less,less-loader处理less文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install less-loader less -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">C.安装sass-loader,node-sass处理less文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install sass-loader node-sass -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    补充：安装sass-loader失败时，大部分情况是因为网络原因，详情参考：</span><br><span class="line">    <span class="attr">https</span>:<span class="comment">//segmentfault.com/a/1190000010984731?utm_source=tag-newest</span></span><br><span class="line"></span><br><span class="line">D.安装post-css自动添加css的兼容性前缀（-ie-,-webkit-）</span><br><span class="line"><span class="number">1</span>).安装包</span><br><span class="line">    npm install postcss-loader autoprefixer -D</span><br><span class="line"><span class="number">2</span>).在项目根目录创建并配置postcss.<span class="property">config</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[ autoprefixer ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E.打包样式表中的图片以及字体文件</span><br><span class="line">在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理</span><br><span class="line">使用url-loader和file-loader来处理打包图片文件以及字体文件</span><br><span class="line"><span class="number">1</span>).安装包</span><br><span class="line">    npm install url-loader file-loader -D</span><br><span class="line"><span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,</span><br><span class="line">                <span class="comment">//limit用来设置字节数，只有小于limit值的图片，才会转换</span></span><br><span class="line">                <span class="comment">//为base64图片</span></span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;url-loader?limit=16940&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.打包js文件中的高级语法：在编写js的时候，有时候我们会使用高版本的js语法</span><br><span class="line">有可能这些高版本的语法不被兼容，我们需要将之打包为兼容性的js代码</span><br><span class="line">我们需要安装babel系列的包</span><br><span class="line">A.安装babel转换器</span><br><span class="line">    npm install babel-loader @babel/core @babel/runtime -D</span><br><span class="line">B.安装babel语法插件包</span><br><span class="line">    npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-<span class="keyword">class</span>-properties -D</span><br><span class="line">C.在项目根目录创建并配置babel.<span class="property">config</span>.<span class="property">js</span>文件</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        <span class="attr">presets</span>:[<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">        <span class="attr">plugins</span>:[ <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">D.配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,</span><br><span class="line">                <span class="comment">//limit用来设置字节数，只有小于limit值的图片，才会转换</span></span><br><span class="line">                <span class="comment">//为base64图片</span></span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;url-loader?limit=16940&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="comment">//exclude为排除项，意思是不要处理node_modules中的js文件</span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-Vue单文件组件"><a href="#12-Vue单文件组件" class="headerlink" title="12.Vue单文件组件"></a>12.Vue单文件组件</h3><p>传统Vue组件的缺陷：<br>全局定义的组件不能重名，字符串模板缺乏语法高亮，不支持css(当html和js组件化时，css没有参与其中)<br>没有构建步骤限制，只能使用H5和ES5，不能使用预处理器（babel）<br>解决方案：<br>使用Vue单文件组件，每个单文件组件的后缀名都是.vue<br>每一个Vue单文件组件都由三部分组成<br>1).template组件组成的模板区域<br>2).script组成的业务逻辑区域<br>3).style样式区域</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    组件代码区域</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    js代码区域</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    样式代码区域</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>补充：安装Vetur插件可以使得.vue文件中的代码高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">配置.vue文件的加载器</span><br><span class="line"></span><br><span class="line">A.安装vue组件的加载器</span><br><span class="line"></span><br><span class="line">    npm install vue-loader vue-template-compiler -D</span><br><span class="line"></span><br><span class="line">B.配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line"></span><br><span class="line">    const VueLoaderPlugin = require(&quot;vue-loader/lib/plugin&quot;);</span><br><span class="line"></span><br><span class="line">    const vuePlugin = new VueLoaderPlugin();</span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        plugins:[ htmlPlugin, vuePlugin  ],</span><br><span class="line"></span><br><span class="line">        module : &#123;</span><br><span class="line"></span><br><span class="line">            rules:[</span><br><span class="line"></span><br><span class="line">                ...//其他规则</span><br><span class="line"></span><br><span class="line">                &#123; </span><br><span class="line"></span><br><span class="line">                    test:/.vue$/,</span><br><span class="line"></span><br><span class="line">                    loader:&quot;vue-loader&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-在webpack中使用vue"><a href="#13-在webpack中使用vue" class="headerlink" title="13.在webpack中使用vue"></a>13.在webpack中使用vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">上一节我们安装处理了vue单文件组件的加载器，想要让vue单文件组件能够使用，我们必须要安装vue</span><br><span class="line"></span><br><span class="line">并使用vue来引用vue单文件组件。</span><br><span class="line"></span><br><span class="line">A.安装Vue</span><br><span class="line"></span><br><span class="line">    npm install vue -S</span><br><span class="line"></span><br><span class="line">B.在index.js中引入vue：import Vue from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">C.创建Vue实例对象并指定el，最后使用render函数渲染单文件组件</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">        el:&quot;#first&quot;,</span><br><span class="line"></span><br><span class="line">        render:h=&gt;h(app)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="14-使用webpack打包发布项目"><a href="#14-使用webpack打包发布项目" class="headerlink" title="14.使用webpack打包发布项目"></a>14.使用webpack打包发布项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在项目上线之前，我们需要将整个项目打包并发布。</span><br><span class="line"></span><br><span class="line">A.配置package.json</span><br><span class="line"></span><br><span class="line">    &quot;scripts&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &quot;dev&quot;:&quot;webpack-dev-server&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;build&quot;:&quot;webpack -p&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">B.在项目打包之前，可以将dist目录删除，生成全新的dist目录</span><br></pre></td></tr></table></figure><h3 id="15-Vue脚手架"><a href="#15-Vue脚手架" class="headerlink" title="15.Vue脚手架"></a>15.Vue脚手架</h3><p>Vue脚手架可以快速生成Vue项目基础的架构。<br>A.安装3.x版本的Vue脚手架：<br>    npm install -g @vue/cli<br>B.基于3.x版本的脚手架创建Vue项目：<br>    1).使用命令创建Vue项目<br>        命令：vue create my-project<br>        选择Manually select features(选择特性以创建项目)<br>        勾选特性可以用空格进行勾选。<br>        是否选用历史模式的路由：n<br>        ESLint选择：ESLint + Standard config<br>        何时进行ESLint语法校验：Lint on save<br>        babel，postcss等配置文件如何放置：In dedicated config files(单独使用文件进行配置)<br>        是否保存为模板：n<br>        使用哪个工具安装包：npm<br>    2).基于ui界面创建Vue项目<br>        命令：vue ui<br>        在自动打开的创建项目网页中配置项目信息。<br>    3).基于2.x的旧模板，创建Vue项目<br>        npm install -g @vue/cli-init<br>        vue init webpack my-project</p><p>C.分析Vue脚手架生成的项目结构<br>    node_modules:依赖包目录<br>    public：静态资源目录<br>    src：源码目录<br>    src/assets:资源目录<br>    src/components：组件目录<br>    src/views:视图组件目录<br>    src/App.vue:根组件<br>    src/main.js:入口js<br>    src/router.js:路由js<br>    babel.config.js:babel配置文件</p><h3 id="16-Vue脚手架的自定义配置"><a href="#16-Vue脚手架的自定义配置" class="headerlink" title="16.Vue脚手架的自定义配置"></a>16.Vue脚手架的自定义配置</h3><pre><code>A.通过 package.json 进行配置 [不推荐使用]    &quot;vue&quot;:&#123;        &quot;devServer&quot;:&#123;            &quot;port&quot;:&quot;9990&quot;,            &quot;open&quot;:true        &#125;    &#125;B.通过单独的配置文件进行配置，创建vue.config.js    module.exports = &#123;        devServer:&#123;            port:8888,            open:true        &#125;    &#125;</code></pre><h3 id="17-Element-UI的基本使用"><a href="#17-Element-UI的基本使用" class="headerlink" title="17.Element-UI的基本使用"></a>17.Element-UI的基本使用</h3><p>Element-UI:一套基于2.0的桌面端组件库<br>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a><br>A.安装：<br>    npm install element-ui -S<br>B.导入使用：<br>    import ElementUI from “element-ui”;<br>    import “element-ui/lib/theme-chalk/index.css”;</p><pre><code>Vue.use(ElementUI)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day05(路由)</title>
      <link href="/posts/110fa4c4.html"/>
      <url>/posts/110fa4c4.html</url>
      
        <content type="html"><![CDATA[<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换）<br>核心实现依靠一个事件，即监听hash值变化的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//location.hash可以获取到最新的hash值</span></span><br><span class="line">    location.<span class="property">hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心思路：<br>在页面中有一个vue实例对象，vue实例对象中有四个组件，分别是tab栏切换需要显示的组件内容<br>在页面中有四个超链接，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#/zhuye&quot;</span>&gt;主页&lt;/a&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当我们点击这些超链接的时候，就会改变url地址中的hash值，当hash值被改变时，就会触发onhashchange事件<br>在触发onhashchange事件的时候，我们根据hash值来让不同的组件进行显示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br><span class="line">    <span class="keyword">switch</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/zhuye&#x27;</span>:</span><br><span class="line">        <span class="comment">//通过更改数据comName来指定显示的组件</span></span><br><span class="line">        <span class="comment">//因为 &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt; ，组件已经绑定了comName</span></span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;zhuye&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/keji&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;keji&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/caijing&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;caijing&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/yule&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;yule&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-Router简介"><a href="#Vue-Router简介" class="headerlink" title="Vue Router简介"></a>Vue Router简介</h3><p>它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的前端路由器，推荐使用。<br>Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发。<br>Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router</p><p>Vue Router的特性：<br>支持H5历史模式或者hash模式<br>支持嵌套路由<br>支持路由参数<br>支持编程式路由<br>支持命名路由<br>支持路由导航守卫<br>支持路由过渡动画特效<br>支持路由懒加载<br>支持路由滚动行为</p><h3 id="Vue-Router的使用步骤-★★★"><a href="#Vue-Router的使用步骤-★★★" class="headerlink" title="Vue Router的使用步骤(★★★)"></a>Vue Router的使用步骤(★★★)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">A.导入js文件</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;lib/vue_2.5.22.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">B.添加路由链接:<span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span>&gt;</span>是路由中提供的标签，默认会被渲染为a标签，to属性默认被渲染为href属性，</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">to属性的值会被渲染为#开头的hash地址</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">C.添加路由填充位（路由占位符）</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">D.定义路由组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var User = &#123; template:&quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>This is User<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var Login = &#123; template:&quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>This is Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">E.配置路由规则并创建路由实例</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var myRouter = new VueRouter(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //routes是路由规则数组</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    routes:[</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //每一个路由规则都是一个对象，对象中至少包含path和component两个属性</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //path表示  路由匹配的hash地址，component表示路由规则对应要展示的组件对象</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;path:&quot;/user&quot;,component:User&#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;path:&quot;/login&quot;,component:Login&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">F.将路由挂载到Vue实例中</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">new Vue(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    el:&quot;#app&quot;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //通过router属性挂载路由对象</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    router:myRouter</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">小结：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">Vue Router的使用步骤还是比较清晰的，按照步骤一步一步就能完成路由操作</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">A.导入js文件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">B.添加路由链接</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">C.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">D.定义路由组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">E.配置路由规则并创建路由实例</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">F.将路由挂载到Vue实例中</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">补充：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">路由重定向：可以通过路由重定向为页面设置默认展示的组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">在路由规则中添加一条路由规则即可，如下：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var myRouter = new VueRouter(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //routes是路由规则数组</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    routes: [</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //path设置为/表示页面最初始的地址 / ,redirect表示要被重定向的新地址，设置为一个路由即可</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path:&quot;/&quot;,redirect:&quot;/user&quot;&#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path: &quot;/user&quot;, component: User &#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path: &quot;/login&quot;, component: Login &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由，动态路由的实现方式"><a href="#嵌套路由，动态路由的实现方式" class="headerlink" title="嵌套路由，动态路由的实现方式"></a>嵌套路由，动态路由的实现方式</h3><h4 id="A-嵌套路由的概念-★★★"><a href="#A-嵌套路由的概念-★★★" class="headerlink" title="A.嵌套路由的概念(★★★)"></a>A.嵌套路由的概念(★★★)</h4><p>当我们进行路由的时候显示的组件中还有新的子级路由链接以及内容。</p><p>嵌套路由最关键的代码在于理解子级路由的概念：<br>比如我们有一个/login的路由<br>那么/login下面还可以添加子级路由，如:<br>/login/account<br>/login/phone</p><p>参考代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123; <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;This is User&lt;/div&gt;&quot;</span> &#125;</span><br><span class="line"><span class="comment">//Login组件中的模板代码里面包含了子级路由链接以及子级路由的占位符</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Login</span> = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;This is Login&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;hr&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to=&quot;/login/account&quot;&gt;账号密码登录&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to=&quot;/login/phone&quot;&gt;扫码登录&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- 子路由组件将会在router-view中显示 --&gt;</span></span><br><span class="line"><span class="string">        &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义两个子级路由组件</span></span><br><span class="line">    <span class="keyword">var</span> account = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;账号：&lt;input&gt;&lt;br&gt;密码：&lt;input&gt;&lt;/div&gt;&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> phone = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;扫我二维码&lt;/h1&gt;&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="comment">//routes是路由规则数组</span></span><br><span class="line">        <span class="attr">routes</span>: [</span><br><span class="line">            &#123; <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,<span class="attr">redirect</span>:<span class="string">&quot;/user&quot;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, </span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Login</span>,</span><br><span class="line">                <span class="comment">//通过children属性为/login添加子路由规则</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&quot;/login/account&quot;</span>, <span class="attr">component</span>: account &#125;,</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&quot;/login/phone&quot;</span>, <span class="attr">component</span>: phone &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">router</span>:myRouter</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="B-动态路由匹配-★★★"><a href="#B-动态路由匹配-★★★" class="headerlink" title="B.动态路由匹配(★★★)"></a>B.动态路由匹配(★★★)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;用户：&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//routes是路由规则数组</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过/:参数名  的形式传递参数 </span></span><br><span class="line"></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line"></span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-命名路由以及编程式导航"><a href="#7-命名路由以及编程式导航" class="headerlink" title="7.命名路由以及编程式导航"></a>7.命名路由以及编程式导航</h3><h4 id="A-命名路由：给路由取别名"><a href="#A-命名路由：给路由取别名" class="headerlink" title="A.命名路由：给路由取别名"></a>A.命名路由：给路由取别名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//routes是路由规则数组</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过name属性为路由添加一个别名</span></span><br><span class="line"></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>:<span class="string">&quot;user&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加了别名之后，可以使用别名进行跳转</span></span><br><span class="line"></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/user&quot;</span>&gt;<span class="title class_">User</span>&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name:&#x27;user&#x27; , params: &#123;id:123&#125; &#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以编程式导航</span></span><br><span class="line"></span><br><span class="line">myRouter.<span class="title function_">push</span>( &#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="B-编程式导航-★★★"><a href="#B-编程式导航-★★★" class="headerlink" title="B.编程式导航(★★★)"></a>B.编程式导航(★★★)</h4><p>页面导航的两种方式：<br>A.声明式导航：通过点击链接的方式实现的导航<br>B.编程式导航：调用js的api方法实现导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>-<span class="title class_">Router</span>中常见的导航方式：</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;hash地址&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>( n );<span class="comment">//n为数字，参考history.go</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>( -<span class="number">1</span> );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day04</title>
      <link href="/posts/110fa4c3.html"/>
      <url>/posts/110fa4c3.html</url>
      
        <content type="html"><![CDATA[<h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><ul><li>原生ajax</li><li>基于jQuery的ajax</li><li>fetch</li><li>axios</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>JavaScript的执行环境是「单线程」</li><li>所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li><li>异步模式可以一起执行<strong>多个任务</strong></li><li>JS中常见的异步调用<ul><li>定时任何</li><li>ajax</li><li>事件函数</li></ul></li></ul><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul><li>主要解决异步深层嵌套的问题</li><li>promise 提供了简洁的API  使得异步操作更加容易</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   1. Promise基本使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数：   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 这里用于实现异步任务  setTimeout</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 正常情况</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 异常情况</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span></span></span><br><span class="line"><span class="language-javascript">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;,<span class="keyword">function</span>(<span class="params">info</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     基于Promise发送Ajax请求</span><br><span class="line">   */</span><br><span class="line">   function queryData(url) &#123;</span><br><span class="line">    #   1.1 创建一个Promise实例</span><br><span class="line">     var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">       var xhr = new XMLHttpRequest();</span><br><span class="line">       xhr.onreadystatechange = function()&#123;</span><br><span class="line">         if(xhr.readyState != 4) return;</span><br><span class="line">         if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">           # 1.2 处理正常的情况</span><br><span class="line">           resolve(xhr.responseText);</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">           # 1.3 处理异常情况</span><br><span class="line">           reject(&#x27;服务器错误&#x27;);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       xhr.open(&#x27;get&#x27;, url);</span><br><span class="line">       xhr.send(null);</span><br><span class="line">     &#125;);</span><br><span class="line">     return p;</span><br><span class="line">   &#125;</span><br><span class="line"># 注意：  这里需要开启一个服务 </span><br><span class="line">   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span><br><span class="line">   queryData(&#x27;http://localhost:3000/data&#x27;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data)</span><br><span class="line">       #  1.4 想要继续链式编程下去 需要 return  </span><br><span class="line">       return queryData(&#x27;http://localhost:3000/data1&#x27;);</span><br><span class="line">     &#125;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data);</span><br><span class="line">       return queryData(&#x27;http://localhost:3000/data2&#x27;);</span><br><span class="line">     &#125;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data)</span><br><span class="line">     &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise  基本API"></a>Promise  基本API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul><li>得到异步任务正确的结果</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul><li>获取异常信息</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul><li>成功与否都会执行（不是正式标准） </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    Promise常用API-实例方法</span><br><span class="line">  */</span><br><span class="line">  // console.dir(Promise);</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject)&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        // resolve(123);</span><br><span class="line">        reject(&#x27;error&#x27;);</span><br><span class="line">      &#125;, 100);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // foo()</span><br><span class="line">  //   .then(function(data)&#123;</span><br><span class="line">  //     console.log(data)</span><br><span class="line">  //   &#125;)</span><br><span class="line">  //   .catch(function(data)&#123;</span><br><span class="line">  //     console.log(data)</span><br><span class="line">  //   &#125;)</span><br><span class="line">  //   .finally(function()&#123;</span><br><span class="line">  //     console.log(&#x27;finished&#x27;)</span><br><span class="line">  //   &#125;);</span><br><span class="line"></span><br><span class="line">  // --------------------------</span><br><span class="line">  // 两种写法是等效的</span><br><span class="line">  foo()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">      # 得到异步任务正确的结果</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;,function(data)&#123;</span><br><span class="line">      # 获取异常信息</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    # 成功与否都会执行（不是正式标准） </span><br><span class="line">    .finally(function()&#123;</span><br><span class="line">      console.log(&#x27;finished&#x27;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul><li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定</li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul><li><code>Promise.race</code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Promise常用API-对象方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.dir(Promise)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 处理正常的情况</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">reject</span>(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p1 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p2 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p3 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 由于p1执行较快，Promise的then()将获得结果&#x27;P1&#x27;。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &quot;HELLO TOM&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li><li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li><li>fetch(url, options).then(）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Fetch API 基本用法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    fetch(url).then()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   第一个参数请求的路径   Fetch会返回Promise   所以我们可以使用then 拿到请求成功的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/fdata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   在这个then里面我们能拿到最终的数据  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API  中的 HTTP  请求"></a>fetch API  中的 HTTP  请求</h4><ul><li>fetch(url, options).then(）</li><li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul><li>默认的是 GET 请求</li><li>需要在 options 对象中 指定对应的 method       method:请求使用的方法 </li><li>post 和 普通 请求的时候 需要在options 中 设置  请求头 headers   和  body</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">     /*</span><br><span class="line">           Fetch API 调用接口传递参数</span><br><span class="line">     */</span><br><span class="line">    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books?id=123&#x27;, &#123;</span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line">             method: &#x27;get&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">         # 它返回一个Promise实例对象，用于获取后台返回的数据</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">         # 在这个then里面我们能拿到最终的数据  </span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/456&#x27;, &#123;</span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line">             method: &#x27;get&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #2.1  DELETE请求方式参数传递      删除id  是  id=789</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/789&#x27;, &#123;</span><br><span class="line">             method: &#x27;delete&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #3 POST请求传参</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;</span><br><span class="line">             method: &#x27;post&#x27;,</span><br><span class="line">         # 3.1  传递数据 </span><br><span class="line">             body: &#x27;uname=lisi&amp;pwd=123&#x27;,</span><br><span class="line">         #  3.2  设置请求头 </span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    # POST请求传参</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;</span><br><span class="line">             method: &#x27;post&#x27;,</span><br><span class="line">             body: JSON.stringify(&#123;</span><br><span class="line">                 uname: &#x27;张三&#x27;,</span><br><span class="line">                 pwd: &#x27;456&#x27;</span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     # PUT请求传参     修改id 是 123 的 </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/123&#x27;, &#123;</span><br><span class="line">             method: &#x27;put&#x27;,</span><br><span class="line">             body: JSON.stringify(&#123;</span><br><span class="line">                 uname: &#x27;张三&#x27;,</span><br><span class="line">                 pwd: &#x27;789&#x27;</span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul><li>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Fetch响应结果的数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="comment">// return data.json();   //  将获取到的数据使用 json 转换对象</span></span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">text</span>(); <span class="comment">//  //  将获取到的数据 转换成字符串 </span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="comment">// console.log(data.uname)</span></span><br><span class="line">  <span class="comment">// console.log(typeof data)</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>,obj.<span class="property">age</span>,obj.<span class="property">gender</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>基于promise用于浏览器和node.js的http客户端</li><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>自动转换JSON数据</li><li>能转换请求和响应数据</li></ul><h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul><li>get和 delete请求传递参数<ul><li>通过传统的url  以 ? 的形式传递参数</li><li>restful 形式传递参数 </li><li>通过params  形式传递参数 </li></ul></li><li>post  和 put  请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParams  传递参数 </li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   # <span class="number">1.</span> 发送get 请求 </span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/adata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123; </span><br><span class="line">     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span><br><span class="line">     <span class="comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">2.</span>  get 请求传递参数</span><br><span class="line">   # <span class="number">2.1</span>  通过传统的url  以 ? 的形式传递参数</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios?id=123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   # <span class="number">2.2</span>  restful 形式传递参数 </span><br><span class="line">   axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">2.3</span>  通过params  形式传递参数 </span><br><span class="line">   axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">params</span>: &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">789</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">#<span class="number">3</span> axios <span class="keyword">delete</span> 请求传参     传参的形式和 get 请求一样</span><br><span class="line">   axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">params</span>: &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">111</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>  axios 的 post 请求</span><br><span class="line">   # <span class="number">4.1</span>  通过选项传递参数</span><br><span class="line">   axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">4.2</span>  通过 <span class="title class_">URLSearchParams</span>  传递参数 </span><br><span class="line">   <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">   params.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">   params.<span class="title function_">append</span>(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">   axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, params).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">5</span>  axios put 请求传参   和 post 请求一样 </span><br><span class="line">   axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  配置公共的请求头 </span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">#  配置 超时时间</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line">#  配置公共的请求头</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line"># 配置公共的 post 的 <span class="title class_">Content</span>-<span class="title class_">Type</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul><li>请求拦截器<ul><li>请求拦截器的作用是在请求发送前进行一些操作<ul><li>例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</li></ul></li></ul></li><li>响应拦截器<ul><li>响应拦截器的作用是在接收到响应后进行一些操作<ul><li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 请求拦截器 </span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">url</span>)</span><br><span class="line">    # <span class="number">1.1</span>  任何请求都会经过这一步   在发送请求之前做些什么   </span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">mytoken</span> = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">    # <span class="number">1.2</span>  这里一定要<span class="keyword">return</span>   否则配置不成功  </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    #<span class="number">1.3</span> 对请求错误做点什么    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line">#<span class="number">2.</span> 响应拦截器 </span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    #<span class="number">2.1</span>  在接收响应做些什么  </span><br><span class="line">    <span class="keyword">var</span> data = res.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    #<span class="number">2.2</span> 对响应错误做点什么  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async  和 await"></a>async  和 await</h3><ul><li>async作为一个关键字放到函数前面<ul><li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li></ul></li><li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul><li>​    await后面可以直接跟一个 Promise实例对象</li><li>​     await函数不能单独使用</li></ul></li><li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>  <span class="keyword">async</span> 基础用法</span><br><span class="line">   # <span class="number">1.1</span> <span class="keyword">async</span>作为一个关键字放到函数前面</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">     # <span class="number">1.2</span> <span class="keyword">await</span>关键字只能在使用<span class="keyword">async</span>定义的函数中使用      <span class="keyword">await</span>后面可以直接跟一个 <span class="title class_">Promise</span>实例对象</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">resolve</span>(<span class="string">&#x27;nihao&#x27;</span>)</span><br><span class="line">       &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"># <span class="number">1.3</span> 任何一个<span class="keyword">async</span>函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span><br><span class="line">   <span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>  <span class="keyword">async</span>    函数处理多个异步函数</span><br><span class="line">   axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">     # <span class="number">2.1</span>  添加<span class="keyword">await</span>之后 当前的<span class="keyword">await</span> 返回结果之后才会执行后面的代码   </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> info = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">     #<span class="number">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async2?info=&#x27;</span> + info.<span class="property">data</span>);</span><br><span class="line">     <span class="keyword">return</span> ret.<span class="property">data</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day03</title>
      <link href="/posts/110fa4c2.html"/>
      <url>/posts/110fa4c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>组件 (Component) 是 Vue.js 最强大的功能之一</li><li>组件可以扩展 HTML 元素，封装可重用的代码</li></ul><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><ul><li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li><li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li></ul><h5 id="组件基础用法"><a href="#组件基础用法" class="headerlink" title="组件基础用法"></a>组件基础用法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   注册组件 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h5><ul><li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li><li>组件模板必须是单个根元素</li><li>组件模板的内容可以是模板字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="comment">      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="comment">  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button&gt;测试123&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">#  6 在字符串模板中可以使用驼峰的方式使用组件</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;HelloWorld&gt;&lt;/HelloWorld&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><ul><li>只能在当前注册它的vue实例中使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//局部注册组件  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;my-component&#x27;</span>: <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><ul><li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li><li>然后子组件用属性props接收</li><li>在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="comment">  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&#x27;ptitle&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">msg</span>: <span class="string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg + &quot;----&quot; + title + &quot;-----&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">pmsg</span>: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">ptitle</span>: <span class="string">&#x27;动态绑定属性&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><ul><li>子组件用<code>$emit()</code>触发事件</li><li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li><li>父组件用v-on 监听子组件的事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="comment">这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:parr</span>=<span class="string">&#x27;parr&#x27;</span> @<span class="attr">enlarge-text</span>=<span class="string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     子组件向父组件传值-携带参数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   Vue.component(&#x27;menu-item&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     props: [&#x27;parr&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  1、子组件用$emit()触发事件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 5)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 10)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       pmsg: &#x27;父组件中内容&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       parr: [&#x27;apple&#x27;,&#x27;orange&#x27;,&#x27;banana&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       fontSize: 10</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       handle: function(val)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         // 扩大字体大小</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         this.fontSize += val;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h4><ul><li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul><li>提供事件中心    var hub = new Vue()</li></ul></li><li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li><li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li><li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li></ul><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><ul><li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li></ul><h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有一个警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      组件插槽：父组件向子组件传递内容</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;alert-box&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 当组件渲染的时候，这个 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 插槽内可以包含任何模板代码，包括 HTML</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><ul><li>具有名字的插槽 </li><li>使用 <slot> 中的 “name” 属性绑定元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="comment">如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      具名插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###1、 使用 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 中的 &quot;name&quot; 属性绑定元素 指定当前插槽的名字</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  注意点： </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件的slot，又可以使slot内容不一致</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span></span><br><span class="line"><span class="comment">但样式希望不一样 这个时候我们需要使用作用域插槽 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope=&quot;slotProps&quot;,</span></span><br><span class="line"><span class="comment">slotProps在这里只是临时变量   </span></span><br><span class="line"><span class="comment">---&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&#x27;slotProps.info.id==3&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;slotProps.info.name&#125;&#125;         </span><br><span class="line">         <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      作用域插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;fruit-list&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      props: [&#x27;list&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  3、 在子组件模板中,<span class="tag">&lt;<span class="name">slot</span>&gt;</span>元素上有一个类似props传递数据给组件的写法msg=&quot;xxx&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">如果父组件为这个插槽提供了内容，则默认的内容会被替换掉</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        list: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;apple&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;banana&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day02</title>
      <link href="/posts/110fa4c1.html"/>
      <url>/posts/110fa4c1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h3><ul><li>获取单选框中的值<ul><li>通过v-model</li></ul></li><li>获取复选框中的值<ul><li>通过v-model</li><li>和获取单选框中的值一样 </li><li>复选框 <code>checkbox</code> 这种的组合时   data 中的 hobby 我们要定义成数组 否则无法实现多选</li></ul></li><li>获取下拉框和文本框中的值<ul><li>通过v-model</li></ul></li></ul><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><ul><li>.number  转换为数值<ul><li>注意点：    </li><li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li><li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li></ul></li><li>.trim  自动过滤用户输入的首尾空白字符<ul><li>只能去掉首尾的 不能去除中间的空格</li></ul></li><li>.lazy   将input事件切换成change事件<ul><li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li></ul></li><li>在失去焦点 或者 按下回车键时才更新</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>内置指令不能满足我们特殊的需求</li><li>Vue允许我们自定义指令</li></ul><h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive  注册全局指令"></a>Vue.directive  注册全局指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  使用自定义的指令，只需在对用的元素中，加上<span class="string">&#x27;v-&#x27;</span>的前缀形成类似于内部指令<span class="string">&#x27;v-if&#x27;</span>，<span class="string">&#x27;v-text&#x27;</span>的形式。 </span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注意点： </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive(&#x27;focusA&#x27;,function()&#123;&#125;) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 聚焦元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">　　<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive  注册全局指令 带参数"></a>Vue.directive  注册全局指令 带参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input type=<span class="string">&quot;text&quot;</span> v-color=<span class="string">&#x27;msg&#x27;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     自定义指令-带参数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">   */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// el 为当前自定义指令的DOM元素  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 根据指令的参数设置背景色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// console.log(binding.value.color)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="自定义指令局部指令"><a href="#自定义指令局部指令" class="headerlink" title="自定义指令局部指令"></a>自定义指令局部指令</h4><ul><li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li><li>局部指令只能在当前组件里面使用</li><li>当全局指令和局部指令同名时以局部指令为准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-color=<span class="string">&#x27;msg&#x27;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      自定义指令-局部指令</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//局部指令，需要定义在  directives 的选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">color</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">focus</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            el.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性   computed"></a>计算属性   computed</h3><ul><li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li><li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li></ul><p>计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</p><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h3><ul><li>使用watch来响应数据的变化</li><li>一般用于异步或者开销较大的操作</li><li>watch 中的属性 一定是data 中 已经存在的数据 </li><li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watch  属性 定义 和 data 已经 methods 平级 </span></span><br><span class="line">           <span class="attr">watch</span>: &#123;</span><br><span class="line">               <span class="comment">//   注意：  这里firstName  对应着data 中的 firstName </span></span><br><span class="line">               <span class="comment">//   当 firstName 值 改变的时候  会自动触发 watch</span></span><br><span class="line">               <span class="attr">firstName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//   注意：  这里 lastName 对应着data 中的 lastName </span></span><br><span class="line">               <span class="attr">lastName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。</li><li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li><li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li><li>支持级联操作</li><li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li><li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">//  lower  为全局过滤器     </span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;lower&#x27;</span>, <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="comment">//filters  属性 定义 和 data 已经 methods 平级 </span></span><br><span class="line">       <span class="comment">//  定义filters 中的过滤器为局部过滤器 </span></span><br><span class="line">      <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="comment">//   upper  自定义的过滤器名字 </span></span><br><span class="line">        <span class="comment">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span></span><br><span class="line">        <span class="attr">upper</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">         <span class="comment">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span></span><br><span class="line">          <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">filterA 被定义为接收三个参数的过滤器函数。</span><br><span class="line">其中 message 的值作为第一个参数，</span><br><span class="line">普通字符串 <span class="string">&#x27;arg1&#x27;</span> 作为第二个参数，表达式 arg2 的值作为第三个参数。</span><br><span class="line">--&gt;</span><br><span class="line">      &#123;&#123; message | <span class="title function_">filterA</span>(<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="keyword">function</span>(<span class="params">n,a,b</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> n+a;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> n+b;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">message</span>: <span class="string">&quot;哈哈哈&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>事物从出生到死亡的过程</li><li>Vue实例从创建 到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数</li></ul><h4 id="常用的-钩子函数"><a href="#常用的-钩子函数" class="headerlink" title="常用的 钩子函数"></a>常用的 钩子函数</h4><div class="table-container"><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后，数据观测和事件配置之前被调用 此时data 和 methods 以及页面的DOM结构都没有初始化   什么都做不了</th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td></tr><tr><td>mounted</td><td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用</td></tr><tr><td>destroyed</td><td>实例销毁后调用</td></tr></tbody></table></div><ul><li><h3 id="数组变异方法"><a href="#数组变异方法" class="headerlink" title="数组变异方法"></a>数组变异方法</h3><ul><li>在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变</li><li>变异数组方法即保持数组方法原有功能不变的前提下对其进行功能拓展</li></ul><p>| <code>push()</code>    | 往数组最后面添加一个元素，成功返回当前数组的长度             |<br>| —————- | —————————————————————————————— |<br>| <code>pop()</code>     | 删除数组的最后一个元素，成功返回删除元素的值                 |<br>| <code>shift()</code>   | 删除数组的第一个元素，成功返回删除元素的值                   |<br>| <code>unshift()</code> | 往数组最前面添加一个元素，成功返回当前数组的长度             |<br>| <code>splice()</code>  | 有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选），第三个是删除 后想要在原位置替换的值 |<br>| <code>sort()</code>    | sort()  使数组按照字符编码默认从小到大排序,成功返回排序后的数组 |<br>| <code>reverse()</code> | reverse()  将数组倒序，成功返回倒序后的数组                  |</p><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul><li>不会改变原始数组，但总是返回一个新数组</li></ul><p>| filter | filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。 |<br>| ——— | —————————————————————————————— |<br>| concat | concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组 |<br>| slice  | slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组 |</p></li></ul><h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul><li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li><li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础day01</title>
      <link href="/posts/110fa4c0.html"/>
      <url>/posts/110fa4c0.html</url>
      
        <content type="html"><![CDATA[<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>本质就是自定义属性</li><li>Vue中指定都是以 v- 开头 </li></ul><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>防止页面加载时出现闪烁问题</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li><li>如果数据中有HTML标签会将html标签一并输出</li><li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>用法和v-text 相似  但是他可以将HTML片段填充到标签中</li><li>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</li><li>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</li></ul><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><ul><li>显示原始信息跳过编译过程</li><li>跳过这个元素和它的子元素的编译过程。</li><li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;  </span><br><span class="line"></span><br><span class="line">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span><br></pre></td></tr></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h4><ul><li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li></ul><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>当数据发生变化的时候，视图也就发生变化</li><li>当视图发生变化的时候，数据也会跟着同步变化</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li></ul><h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><ul><li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>m   model  <ul><li>数据层   Vue  中 数据层 都放在 data 里面</li></ul></li><li>v   view     视图   <ul><li>Vue  中  view      即 我们的HTML页面  </li></ul></li><li>vm   （view-model）     控制器     将数据和视图层建立联系      <ul><li>vm 即  Vue 的实例  就是 vm  </li></ul></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>用来绑定事件的</li><li>形式如：v-on:click  缩写为 @click;</li></ul><p>v-on事件函数中传入参数，如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数。如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li><li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li><li>修饰符是由点开头的指令后缀来表示的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.enter.space</span>=<span class="string">&quot;alertMe&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">submit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">alertMe</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义按键修饰符别名</p><ul><li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>v-bind 指令被用来响应地更新 HTML 属性</li><li>v-bind:href    可以缩写为    :href;</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><ul><li>我们可以给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li></ul><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><p>v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</p><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li><li>绑定数组的时候数组里面存的是data 中的数据 </li></ul><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div v-bind:style=&quot;styleObject&quot;&gt;绑定样式对象&lt;/div&gt;&#x27;</span><br><span class="line"> </span><br><span class="line">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span><br><span class="line"> &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize,background:&#x27;red&#x27; &#125;&quot;&gt;内联样式&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;[styleObj1, styleObj2]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        styleObject: &#123;</span><br><span class="line">          color: &#x27;green&#x27;,</span><br><span class="line">          fontSize: &#x27;30px&#x27;,</span><br><span class="line">          background:&#x27;red&#x27;</span><br><span class="line">        &#125;，</span><br><span class="line">        activeColor: &#x27;green&#x27;,</span><br><span class="line">   fontSize: &quot;30px&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj1: &#123;</span><br><span class="line">             color: &#x27;red&#x27;</span><br><span class="line">       &#125;,</span><br><span class="line">       styleObj2: &#123;</span><br><span class="line">            fontSize: &#x27;30px&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h4><ul><li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li><li>2- 进行两个视图之间的切换</li></ul><h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul><li>v-show本质就是标签display设置为none，控制隐藏<ul><li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li></ul></li><li>v-if是动态的向DOM树内添加或者删除DOM元素<ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li>用于循环的数组里面的值可以是对象，也可以是普通元素  </li></ul><ul><li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li><li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li><li>key 的作用<ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-Message组件的设计和实现</title>
      <link href="/posts/100fa4c5.html"/>
      <url>/posts/100fa4c5.html</url>
      
        <content type="html"><![CDATA[<p>常用于主动操作后的反馈提示。其表现为从“中间顶部”出现消息提示，并在几秒后自动消失。可能包括成功提示、警告、错误等。</p><h2 id="函数调用创建组件"><a href="#函数调用创建组件" class="headerlink" title="函数调用创建组件"></a><strong>函数调用创建组件</strong></h2><p>不同于前面写的几个组件，Message显示的形式一般是点击按钮之后生成，这也意味着我们需要以函数调用的形式创建组件，该函数接收消息组件的属性对象，然后返回一个消息组件的实例对象, 我们在对创建的实例对象进行进一步操作，比如手动关闭消息等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息组件</span></span><br><span class="line"><span class="keyword">const</span> messageInstance = <span class="title function_">createMessage</span>(&#123;</span><br><span class="line"> <span class="attr">message</span>: <span class="string">&#x27;This is a message&#x27;</span>, <span class="comment">// 消息内容</span></span><br><span class="line"> <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,       <span class="comment">// 消息类型</span></span><br><span class="line"> <span class="attr">duration</span>: <span class="number">5000</span>,        <span class="comment">// 持续时间</span></span><br><span class="line"> <span class="attr">showClose</span>: <span class="literal">true</span>        <span class="comment">// 是否显示关闭按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的 messageInstance 可以进行一些操作，如手动关闭：</span></span><br><span class="line">messageInstance.<span class="title function_">destory</span>() <span class="comment">// 手动关闭消息</span></span><br></pre></td></tr></table></figure><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a><strong>设计思路</strong></h2><p>下面是Message 组件的设计思路：</p><ol><li>功能：显示临时性的通知消息，支持不同类型的消息（成功、警告、错误等），可以显示多个，支持自动关闭，支持手动关闭。</li><li>属性定义</li><li>type: 消息类型，默认为info</li><li>message: 消息内容，字符串或者VNode</li><li>duration: 显示时间，默认为一定时间后自动隐藏</li><li>showClose: 是否显示关闭按钮</li><li>结构和样式定义：组件结构包括消息容器、消息内容、关闭按钮等部分的布局和样式，此外还需要考虑到根据消息类型设置不同的背景色和文字颜色</li><li>组件状态：动态控制消息的显示和隐藏</li><li>事件：添加关闭按钮，点击关闭按钮时触发关闭事件，由于Message有显示时间，还需要设置和清除定时器。</li><li>动画效果：使用过渡实现消息淡入淡出效果。</li></ol><h3 id="组件实现难点"><a href="#组件实现难点" class="headerlink" title="组件实现难点"></a><strong>组件实现难点</strong></h3><ol><li>通过函数调用实现消息组件的动态创建和销毁</li><li>Message的显示位置，如果页面上同时存在多条消息，需要考虑它们的排列避免消息重叠或遮挡，这需要动态计算消息组件的位置。</li></ol><h3 id="Message组件的实现过程"><a href="#Message组件的实现过程" class="headerlink" title="Message组件的实现过程"></a><strong>Message组件的实现过程</strong></h3><p>该组件的基本结构的代码和样式这里不再复述，可以参考代码完成，重点在于完成Message组件的基本逻辑，其整体设计思路是维护一个消息实例数组来管理页面上的消息组件，通过渲染和销毁来控制消息的显示和隐藏。</p><p>消息组件创建</p><ol><li>当调用createMessage函数时，会生成一个唯一的消息id，创建一个消息容器，并将消息组件渲染到该容器中。</li><li>消息组件的属性是通过传入的props与一些默认值合并得到的，其中包括消息内容、持续时间、类型、是否显示关闭按钮等。</li><li>每个消息组件都有一个独立的z-index，确保它们在页面上正确地叠加显示。</li><li>每个消息组件都有一个销毁函数destory，用于从实例数组中移除并销毁该消息组件。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createMessage</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 生成消息 Id</span></span><br><span class="line">  <span class="comment">// 创建消息容器</span></span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// 合并新的props</span></span><br><span class="line">  <span class="comment">// 合并新的 props</span></span><br><span class="line">   <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="title function_">nextZIndex</span>(), <span class="comment">// 设置 z-index</span></span><br><span class="line">    <span class="attr">onDestory</span>: destory <span class="comment">// 设置销毁函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 通过 h 函数 创建消息vNode</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="title class_">MessageConstructor</span>, newProps)</span><br><span class="line">  <span class="comment">// 渲染消息vNode到容器中</span></span><br><span class="line">  <span class="title function_">render</span>(vnode, container)</span><br><span class="line">  <span class="comment">// 添加消息容器到 body中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container.<span class="property">firstElementChild</span>!)</span><br><span class="line">  <span class="comment">// 获取组件实例</span></span><br><span class="line">  <span class="keyword">const</span> vm = vnode.<span class="property">component</span>!</span><br><span class="line">  <span class="comment">// 根据组件实例进行扩充，创建消息实例对象</span></span><br><span class="line">  <span class="keyword">const</span> instance = &#123;</span><br><span class="line">    id, </span><br><span class="line">    vnode,</span><br><span class="line">    vm</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 将消息实例对象添加到实例数组中</span></span><br><span class="line">  instances.<span class="title function_">push</span>(instance)</span><br><span class="line">  <span class="comment">// 返回实例</span></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息组件的销毁</p><ul><li>调用消息组件的销毁函数时，会从实例数组中找到并删除该消息实例，并通过重新render将消息容器置为null，从而销毁该消息组件。</li></ul><p>手动销毁： 设置消息组件中visible的值为false来实现隐藏消息。</p><p>关闭所有消息：数组forEach调用销毁方法</p><p>计算偏移量：因为涉及到多个消息组件，这就需要获取上一个消息组件的底部偏移量，并计算当前Message组件的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 消息组件高度</span></span><br><span class="line"><span class="keyword">const</span> lastOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">getLastBottomOffset</span>(props.<span class="property">id</span>)) <span class="comment">// 上一个实例的最下面的坐标数字</span></span><br><span class="line"><span class="keyword">const</span> topOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">offset</span> + lastOffset.<span class="property">value</span>) <span class="comment">// 元素的 top 偏移量</span></span><br><span class="line"><span class="keyword">const</span> bottomOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> height.<span class="property">value</span> + topOffset.<span class="property">value</span>) <span class="comment">// 元素的 bottom 偏移量，为下一个消息组件提供</span></span><br><span class="line"><span class="keyword">const</span> cssStyle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line"> <span class="attr">top</span>: topOffset.<span class="property">value</span> + <span class="string">&#x27;px&#x27;</span>, <span class="comment">// 动态设置 top 样式</span></span><br><span class="line"> <span class="attr">zIndex</span>: props.<span class="property">zIndex</span> <span class="comment">// 动态设置 z-index 样式</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="h函数和render函数"><a href="#h函数和render函数" class="headerlink" title="h函数和render函数"></a><strong>h函数和render函数</strong></h3><ol><li>h函数用于创建虚拟DOM元素（VNode), 接受三个参数：要创建的元素标签名、元素的属性对象（如类名、样式、事件等）、子元素（可以是文本内容或其他 VNode）。</li><li>render函数 用于将 VNode 渲染为真实 DOM , 它接受一个 VNode 作为参数, 并将其渲染到一个容器元素中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Icon/Link组件的实现</title>
      <link href="/posts/100fa4c4.html"/>
      <url>/posts/100fa4c4.html</url>
      
        <content type="html"><![CDATA[<p><strong>Icon组件实现思路</strong></p><ol><li>确定图标库：首先要确定你将使用的图标库，比如Font Awesome、Material Icons，这决定了你将从哪里获取图标，以及如何在组件中使用它们。</li><li>安装和引入图标库：根据你选择的图标库，安装相应的依赖包，并在项目中引入这些图标。</li><li>创建Icon组件：在Vue项目中创建一个Icon组件。</li><li>定义组件Props,  这个组件会接收一些属性，比如图标名称、大小、颜色。</li><li>渲染图标：根据选择的图标库，使用相应的方式来渲染对应名称的图标</li><li>处理属性：根据传入的大小、颜色等属性给组件动态添加类名，从而改变Icon组件的样式</li><li>使用组件：在项目中使用你创建的Icon组件，传递相应的图标名称和其他属性。</li><li>测试：对Icon组件进行测试，并且能够处理传递的属性, 确保组件能够接受并正确渲染各种大小、颜色和样式的图标。</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><h3 id="引入FontAwesome"><a href="#引入FontAwesome" class="headerlink" title="引入FontAwesome"></a><strong>引入FontAwesome</strong></h3><p>这里我们基于FontAwesome图标库创建Icon组件</p><p>文档资料：<a href="https://fontawesome.com/docs/web/use-with/vue/">https://fontawesome.com/docs/web/use-with/vue/</a></p><p>想要在<a href="http://vue.js/">Vue.js</a>中使用FontAswsome , 需要按照以下步骤：</p><ol><li>Add Svg Core: npm i —save @fortawesome/fontawesome-svg-core </li><li>Add Icon Packages: npm i —save @fortawesome/free-solid-svg-icons</li><li>Add The Vue Component(需要根据Vue版本选择)： npm i —save @fortawesome/vue-fontawesome@latest-3 </li><li>Add Icon: 在组件中添加图标</li></ol><p>导入FontAwesome文档：<a href="https://fontawesome.com/docs/web/use-with/vue/add-icons">https://fontawesome.com/docs/web/use-with/vue/add-icons</a></p><p>然后在 src/<a href="http://main.ts/">main.ts</a> 文件中创建一个包含要在项目中使用的所有图标的库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Set up using Vue 3 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import the fontawesome core */</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import font awesome icon component */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/vue-fontawesome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import specific icons */</span></span><br><span class="line"><span class="keyword">import</span> &#123; faUserSecret &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add icons to the library */</span></span><br><span class="line">library.<span class="title function_">add</span>(faUserSecret)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">component</span>(<span class="string">&#x27;font-awesome-icon&#x27;</span>, <span class="title class_">FontAwesomeIcon</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后就可以在组件中调用图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;font-awesome-icon icon=&quot;fa-solid fa-user-secret&quot; /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为我们要使用大量图标，所以可以先导入整个图标库。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 导入整个图标</span></span><br><span class="line"><span class="keyword">import</span> &#123; fas &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line">library.<span class="title function_">add</span>(fas)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="定义Icon组件"><a href="#定义Icon组件" class="headerlink" title="定义Icon组件"></a><strong>定义Icon组件</strong></h3><p>接下来，我们对FontAwesomeIcon进行封装，形成一个Icon组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;$props&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">defineProps&lt;IconProps&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-bind=”$props” 将 Icon 组件的所有接收的 props 动态传递给内部的 font-awesome-icon 组件。这样就无需显式地在 Icon 组件中声明这些 props。</p><p>在示例代码中引入Icon组件并使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-icon icon=&quot;arrow-right&quot;&gt;&lt;/el-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ElIcon from &#x27;./components/Icon/Icon.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="处理属性"><a href="#处理属性" class="headerlink" title="处理属性"></a><strong>处理属性</strong></h3><p>但是FontAsweomeIcon本身并没有color属性，因此我们对其进行扩展，在IconProps添加color属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IconDefinition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 设定Icon组件的Props</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IconProps</span> &#123;</span><br><span class="line"> <span class="attr">icon</span>: <span class="built_in">object</span> | <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; | <span class="built_in">string</span> | <span class="title class_">IconDefinition</span></span><br><span class="line"> <span class="comment">// 添加color</span></span><br><span class="line"> color?: <span class="built_in">string</span></span><br><span class="line"> size?: <span class="string">&#x27;2xs&#x27;</span></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加color属性之后，我们使用组件就是这种形式<el-icon icon="arrow-right" color="#409EFC"/></p><p>font-awesome-icon组件本身不接收这种类型的props, 因此我们要对传递的props进行过滤，我们可以使用lodash工具库完成这项功能。</p><p>npm i lodash-es</p><p>npm install —save @types/lodash-es</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot; :style=&quot;iconStyle&quot; v-bind=&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;iconProps&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// omit函数用于排除对象的属性，传递处理的对象和排除的属性名称数组</span><br><span class="line">import &#123; omit &#125; from &#x27;lodash-es&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import type &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">const props = defineProps&lt;IconProps&gt;()</span><br><span class="line">// 过滤掉props中传递的color属性</span><br><span class="line">const iconProps = computed(() =&gt; &#123;</span><br><span class="line"> return omit(props, [&#x27;color&#x27;])</span><br><span class="line">&#125;)</span><br><span class="line">// 根据是否传递color属性来决定 icon的颜色</span><br><span class="line">const iconStyle = computed(() =&gt; &#123;</span><br><span class="line"> const &#123; color &#125; = props</span><br><span class="line"> if(!color) return &#123;&#125;</span><br><span class="line"> return &#123;</span><br><span class="line">  &#x27;--color&#x27;: color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>样式定义则比较简单，参考项目代码即可，在完成上述步骤之后，Icon组件就基本定义完成，我们之后就可以使用<el-icon icon="arrow-right" />这样的形式在项目中使用组件了。</p><p>之后，我们可以对Buttton组件进行补充完善。</p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a><strong>参考实现</strong></h2><p><a href="https://juejin.cn/post/7122622920433598471">从0搭建Vue3组件库之Icon组件-iconfont</a></p><h2 id="Link组件的实现"><a href="#Link组件的实现" class="headerlink" title="Link组件的实现"></a><strong>Link组件的实现</strong></h2><p>Link组件的实现较为简单，和button组件也比较类似，只需要根据传入的属性渲染不同样式和行为的链接，包括禁用状态，类型，和下划线等，必要的注释在代码中都已经提供，大家可以当做练习独立完成。</p><p>其思路如下</p><ol><li>功能</li><li>Link 组件的基本功能，例如显示文本、跳转链接等。</li><li>组件的可选特性，例如链接样式、是否有下划线、是否禁用等。</li><li>组件API</li><li>定义 Link 组件的 Props, 链接类型、是否有下划线、是否禁用、链接地址、链接打开的目标窗口等。</li><li>定义 Link 组件的事件，例如点击事件.</li><li>模板和样式</li><li>使用 <a> 标签作为 Link 组件的基础元素。</li><li>根据传入的 Props 动态设置 <a> 标签的属性，例如 href、target、class 等。</li><li>在链接内部包含其他内容，例如图标、文本等，以插槽的形式提供。</li><li>编写逻辑</li><li>使用计算属性或者函数，根据 Props 的值计算出需要的样式或行为</li><li>监听用户的交互事件，根据是否禁用决定是否触发相应的事件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Container组件的实现</title>
      <link href="/posts/100fa4c3.html"/>
      <url>/posts/100fa4c3.html</url>
      
        <content type="html"><![CDATA[<p>Container组件是用于布局的容器组件，可以方便快速搭建PC管理后台页面的基本结构：</p><p><el-container>：外层容器。 当子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列， 否则会水平左右排列。</p><p><el-header>：顶栏容器。</p><p><el-aside>：侧边栏容器。</p><p><el-main>：主要区域容器。</p><p><el-footer>：底栏容器。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a><strong>实现思路</strong></h2><p>针对Container组件的布局，我们可以使用 flex 布局方式来实现</p><ol><li><el-container> 组件会渲染成一个 <section> 标签，并通过 slot 做内容分发,  默认水平排列，但是也支持传入direction的prop, 根据direction判断水平/垂直排列，此外如果当 <el-container> 容器的子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列，否则会水平左右排列。</li><li>el-header渲染成一个 <header> 标签，并通过 slot 做内容分发,  传入height属性来指定高度，如果不指定，则有默认高度。</li><li>el-footer实现和el-header基本类似</li><li>el-main: 渲染成一个 <main> 标签，并通过 slot 做内容分发, 不设置高度和宽度，通过flex: 1分配剩余空间。</li><li>el-aside: 渲染侧边栏， 传入width属性来指定高度，如果不指定，则有默认宽度。</li></ol><p><a href="https://juejin.cn/post/6844903946448797709?searchId=20240223114200992AFB7A324175968005">黄轶-Container 布局容器组件的设计与实现</a></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><p>参考实现中已经给出了很详细的解释，其实现难点在于样式布局上，需要对flex布局有较好的理解。</p><h3 id="el-container"><a href="#el-container" class="headerlink" title="el-container"></a><strong>el-container</strong></h3><p>该组件略微有难度的地方就是布局方向的判定，该组件接收direction作为属性，其值为’horizontal’ | ‘vertical’。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断布局方向是否是Vertical</span></span><br><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 如果props.direction等于&#x27;vertical&#x27;，返回true</span></span><br><span class="line"> <span class="keyword">if</span> (props.<span class="property">direction</span> === <span class="string">&#x27;vertical&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(props.<span class="property">direction</span> === <span class="string">&#x27;horizontal&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果props.direction等于&#x27;horizontal&#x27;，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>另外一个条件是子元素中有 el-header 或 el-footer 时为 vertical，否则为 horizontal</p><p>slots.default()会返回一个包含了当前插槽内容的虚拟节点数组。这个数组中的每个元素都是一个虚拟节点对象，描述了当前插槽内容的各个部分。</p><p>每个虚拟节点对象通常包含以下一些重要属性：</p><ol><li>type：表示节点的类型，可以是一个字符串（表示HTML标签名），或是一个组件对象。</li><li>props：包含了节点的属性和事件监听器等信息。</li><li>children：是一个包含了当前节点的子节点的虚拟节点数组。</li></ol><p>如果type是一个组件，则通常包含下面属性：</p><ol><li>name：组件的名称，可以通过这个属性获取组件的名称。</li><li>props：组件的属性，包含了组件接受的props以及它们的类型等信息。</li><li>emits：组件发出的事件，包含了组件可以发出的事件名称以及它们的参数类型等信息。</li><li>setup：组件的setup函数，包含了组件的响应式数据、计算属性、方法等逻辑。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// .......... 省略代码</span></span><br><span class="line"> <span class="comment">// 如果插槽存在且有默认插槽内容</span></span><br><span class="line"> <span class="keyword">if</span>(slots &amp;&amp; slots.<span class="property">default</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用slots.default获取默认插槽中的所有vNode节点</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">vNodes</span>: <span class="title class_">VNode</span>[] = slots.<span class="title function_">default</span>()</span><br><span class="line">  <span class="comment">// 遍历 vNode节点数组，如果存在el-header/el-footer</span></span><br><span class="line">  <span class="keyword">return</span> vNodes.<span class="title function_">some</span>(<span class="function"><span class="params">vNode</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将 vNode.type 断言为 Component 类型，然后获取组件类型属性 name</span></span><br><span class="line">   <span class="keyword">const</span> tag = (vNode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">Component</span>).<span class="property">name</span></span><br><span class="line">   <span class="keyword">return</span> tag === <span class="string">&#x27;ElHeader&#x27;</span> || tag === <span class="string">&#x27;ElFooter&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 插槽不存在或者没有默认插槽内容，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="el-header-aside-main-footer的实现"><a href="#el-header-aside-main-footer的实现" class="headerlink" title="el-header/aside/main/footer的实现"></a><strong>el-header/aside/main/footer的实现</strong></h3><p>以el-header组件为例，该组件使用slot接收传递的内容，并接受一个height 作为props, 默认高度为60px ， 在传递height的情况下，以传入的height值为准。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;header class=&quot;el-header&quot; :style=&quot;headerHeight&quot;&gt;</span><br><span class="line">  &lt;slot&gt;Header&lt;/slot&gt;</span><br><span class="line"> &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; HeightProps &#125; from &#x27;./types&#x27;</span><br><span class="line">​</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElHeader&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">// 接收height作为参数</span><br><span class="line">const props = defineProps&lt;HeightProps&gt;()</span><br><span class="line">// 计算 Header的高度</span><br><span class="line">const headerHeight = computed(() =&gt; &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">  height: (props.height || 60) + &#x27;px&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-Button按钮组件</title>
      <link href="/posts/100fa4c2.html"/>
      <url>/posts/100fa4c2.html</url>
      
        <content type="html"><![CDATA[<p>关于Button组件的实现，网上有非常多的文章，借助实现该组件，我们可以掌握组件封装和实现的基本思路，本篇文章如果写的不是很详细，可以参考这篇文章：<a href="https://juejin.cn/post/7103081918266081287?searchId=202401221508015F93F063191DCAE7D770">手摸手教你仿一下Element-ui的Button组件</a></p><h2 id="组件通用实现思路"><a href="#组件通用实现思路" class="headerlink" title="组件通用实现思路"></a><strong>组件通用实现思路</strong></h2><ol><li>组件设计<ul><li>确定要实现的组件，一些常见的基础组件（按钮、输入框等），高级组件（表格、表单、轮播图等）</li><li>设计组件的API,  包括支持的props、events和slots</li></ul></li><li>UI设计<ul><li>设计组件的样式和布局，应当保持视觉上的统一和美观</li></ul></li><li>组件实现<ul><li>遵循最佳实践，使用组件化、模块化和可复用性的原则来编写代码</li><li>组件实现要考虑到可维护性和可扩展性</li></ul></li><li>文档和示例<ul><li>编写清晰的文档，包括组件的使用说明、API 文档和示例代码</li><li>提供丰富的示例，帮助用户理解和使用组件</li></ul></li><li>测试<ul><li>编写单元测试和集成测试，确保组件的功能和性能符合预期</li><li>进行用户体验测试，收集用户反馈，并及时修复和改进组件</li></ul></li><li>版本管理和发布</li></ol><h2 id="Button组件实现原理"><a href="#Button组件实现原理" class="headerlink" title="Button组件实现原理"></a><strong>Button组件实现原理</strong></h2><p>Button组件官网：<a href="https://element.eleme.io/#/zh-CN/component/button">https://element.eleme.io/#/zh-CN/component/button</a></p><p>Button（按钮）组件通常是一个可以点击的区域，用户可以通过鼠标点击从而触发与该按钮相关联的功能或动作，HTML有原生的button元素，而Button组件只是通过props属性接受父组件传递过来的参数，例如按钮的类型、尺寸和禁用状态等，而这些参数可以在组件内部使用，在button按钮上根据参数添加各式各样的class类名，从而动态生成按钮的样式和行为。</p><p><img src="https://www.picgo.net/image/SaQZpu" alt=""></p><p>我们可以打开其源码或者打开控制台查看。</p><p><img src="https://www.picgo.net/image/SaQBQj" alt=""></p><h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a><strong>组件实现</strong></h2><h3 id="Button组件实现思路"><a href="#Button组件实现思路" class="headerlink" title="Button组件实现思路"></a><strong>Button组件实现思路</strong></h3><p>根据组件通用实现思路，我们想要实现一个Button组件，需要考虑以下方面：</p><ul><li><p>Props属性：定义组件的属性，以便用户可以通过属性来自定义按钮的外观和行为， 比如按钮的类型（primary、success、warning、danger 等）、尺寸（large、medium、small 等）、禁用状态，ElementUI 实现了各式各样的button 组件，按照其网站上的描述，包含下面属性。</p><p><img src="https://www.picgo.net/image/SaQMJN" alt=""></p></li><li><p>事件：点击按钮时触发事件，原生button标签即可支持。</p></li><li><p>Slot插槽：提供插槽，以便用户可以在按钮内部插入自定义的内容，例如按钮上的文本、图标等。</p></li><li><p>样式：按钮样式包括基本样式和根据用户传入的属性来动态修改样式的功能（判断是否有对应的属性从而动态添加类名）。</p></li></ul><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a><strong>基本实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button</span><br><span class="line">  :class=&quot;[&#x27;btn&#x27;, `btn-$&#123;type&#125;`, `btn-$&#123;size&#125;`, &#123; &#x27;btn-disabled&#x27;: disabled &#125;]&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  @click=&quot;handleClick&quot;</span><br><span class="line"> &gt;</span><br><span class="line">  &lt;slot&gt;Button Text&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;,</span><br><span class="line"> props: &#123;</span><br><span class="line">  type: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;default&#x27; // 可选值: &#x27;default&#x27;, &#x27;primary&#x27;, &#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  size: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;medium&#x27; // 可选值: &#x27;small&#x27;, &#x27;medium&#x27;, &#x27;large&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  disabled: &#123;</span><br><span class="line">   type: Boolean,</span><br><span class="line">   default: false</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">   this.$emit(&#x27;click&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a><strong>属性定义</strong></h3><p>在component文件夹下新建Button文件夹，定义<a href="http://button.vue/">Button.vue</a>和<a href="http://types.ts/">types.ts</a> 两个文件，分别用于定义组件和组件中使用的ts类型。</p><p>button组件接收type\size\plain\round\disabled等props属性，我们提前在types文件中定义好（也可以定义在Vue组件中）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button/types.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 定义button接收的props类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line">  <span class="comment">// type: 类型为string</span></span><br><span class="line">  <span class="attr">type</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面，提前定义</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span>&gt;,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">    </span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="attr">size</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">ProType</span>&lt;<span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span>&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonType</span> = <span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span></span><br><span class="line"><span class="comment">// 按钮尺寸, 额外的尺寸：medium、small、mini，通过设置size属性来配置它们。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonSize</span> = <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span></span><br><span class="line"><span class="comment">// 原生按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">NativeType</span> = <span class="string">&#x27;button&#x27;</span> | <span class="string">&#x27;submit&#x27;</span> | <span class="string">&#x27;reset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line"> <span class="attr">type</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">size</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonSize</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">plain</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">round</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">circle</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">disabled</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">autofocus</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">loading</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">nativeType</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">NativeType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="http://button.vue/">Button.vue</a> 中定义Button组件，其结构比较简单，就是button按钮，class样式控制其样式，并接收传递的slot作为显示的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button class=&quot;el-button&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  :autofocus=&quot;autofocus&quot;</span><br><span class="line">  :type=&quot;nativeType&quot;</span><br><span class="line">  :class=&quot;[</span><br><span class="line">  type ? &#x27;el-button--&#x27; + type : &#x27;&#x27;,</span><br><span class="line">  size ? &#x27;el-button--&#x27; + size : &#x27;&#x27;,</span><br><span class="line">  &#123;</span><br><span class="line">   &#x27;is-disabled&#x27;: disabled,</span><br><span class="line">   &#x27;is-plain&#x27;: plain,</span><br><span class="line">   &#x27;is-round&#x27;: round,</span><br><span class="line">   &#x27;is-circle&#x27;: circle,</span><br><span class="line">   &#x27;is-loading&#x27;: loading</span><br><span class="line">  &#125;</span><br><span class="line"> ]&quot;&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; buttonProps &#125; from &#x27;./types&#x27;</span><br><span class="line">// 定义组件名称</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 接收props</span><br><span class="line">defineProps(buttonProps)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a><strong>CSS样式</strong></h3><p>根据需要编写button组件的CSS样式，使其具有对应的效果即可。</p><h3 id="暴露组件实例"><a href="#暴露组件实例" class="headerlink" title="暴露组件实例"></a><strong>暴露组件实例</strong></h3><p>在使用我们定制的组件时，有时会通过ref 获取组件实例，进而使用DOM元素，但是<script setup>组件默认关闭，我们可以通过defineExpose获取组件实例，其实现在ElementPlus源码中也可以看到，操作也很简单，只需要绑定一个ref并暴露出来即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定义组件实例</span><br><span class="line">const _ref = ref&lt;HTMLButtonElement&gt;()</span><br><span class="line">// defineExpose暴露实例</span><br><span class="line">defineExpose(&#123;</span><br><span class="line"> ref: _ref</span><br><span class="line">&#125;)</span><br><span class="line">// 在&lt;button&gt;&lt;/button&gt;上绑定 ref=&quot;_ref&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-项目创建和开发规范</title>
      <link href="/posts/100fa4c1.html"/>
      <url>/posts/100fa4c1.html</url>
      
        <content type="html"><![CDATA[<p>使用Vite创建项目</p><p>官方文档：<a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链</a> </p><p>Vite是一个轻量级的，速度极快的构建工具，也是Vue3官方推荐的脚手架，使用Vite可以快速创建一个Vue3 + Typescript项目。</p><p><strong>前置准备</strong></p><p>你需要在Vscode的插件市场中搜索Volar并安装下面两个插件（安装插件后需要重新加载VSCode)</p><p>如果你之前安装了Vetur, 请禁用掉，并改用Volar, 它现在是 Vue 3 项目的官方推荐。</p><p>此外，你还需要在浏览器插件市场中安装Vue Dev tools</p><h2 id="使用Vite创建项目"><a href="#使用Vite创建项目" class="headerlink" title="使用Vite创建项目"></a><strong>使用Vite创建项目</strong></h2><p>创建项目，在终端中输入以下命令：</p><p><code>npm create vite@latest</code></p><p>然后按照提示操作即可！</p><ol><li>Project name: 定义项目名称my-elem</li><li>Select a framework: 选择Vue</li><li>Select a variant: 选择TypeScript</li></ol><p>启动项目需要执行下面的命令(当然你也可以使用yarn)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-elem</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板，具体命令请查看官网。</p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a><strong>项目目录</strong></h2><p>创建出来的模板项目具有如下目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|-node_modules          -- 第三方包存储目录</span><br><span class="line">|-public             -- 静态资源目录</span><br><span class="line">    |--vite.svg           -- 网站地址栏前面的小图标</span><br><span class="line">|-src              -- src目录</span><br><span class="line">    |-assets               -- 资源目录，存放图片等资源</span><br><span class="line">    |-components             -- 定义公共组件</span><br><span class="line">    |--App.vue              -- 根组件</span><br><span class="line">    |--style.css             -- 项目的通用CSS样式</span><br><span class="line">    |--main.ts              -- 项目入口文件</span><br><span class="line">    |--vite-env.d.ts         -- 类型声明文件，定义项目的全局类型</span><br><span class="line">|--.gitignore          -- git的管理配置文件</span><br><span class="line">|--index.html          -- 项目的默认首页</span><br><span class="line">|--package-lock.json      -- 包安装时的版本号</span><br><span class="line">|--package.json         -- 项目配置文件，包管理、项目名称、版本和命令</span><br><span class="line">|--README.md          -- 项目说明文件</span><br><span class="line">|--tsconfig.json        -- 指定 TypeScript 编译器的行为</span><br><span class="line">|--tsconfig.node.json      -- 配置在 Node.js 环境下编译 TypeScript 代码的选项</span><br><span class="line">|--vite.config.ts        -- 配置 Vite 构建工具的行为</span><br></pre></td></tr></table></figure><h2 id="编程规范-Eslint"><a href="#编程规范-Eslint" class="headerlink" title="编程规范-Eslint"></a><strong>编程规范-Eslint</strong></h2><p>很多人写代码有自己的风格，比如有的人喜欢在结尾加;, 但是有的人不加，这些争论还有字符串是使用单引号还是双引号，是使用空格还是tab, 正是因为每个人风格不一样，代码合并之后就会显得丑陋，如果希望团队开发者都遵循一套相同的代码规范，可以使用工具Eslint进行约束，它可以帮助你进行代码格式检测，并自动修复代码中的语法问题。</p><p>中文文档地址：<a href="https://zh-hans.eslint.org/docs/latest/use/getting-started">https://zh-hans.eslint.org/docs/latest/use/getting-started</a></p><p>你可以使用该命令安装并配置 ESLint：</p><p>npm init @eslint/config</p><p>在安装的过程中，你会遇到很多次询问。</p><p>如果觉得下面的操作不够详细，可以看这篇博客：前端Vuer，请给你的项目加上 ESLint</p><ol><li>你想怎么使用Eslint： 选择第二个</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only //只检查语法</span><br><span class="line">❯ To check syntax and find problems // 检查语法并发现问题</span><br><span class="line">  To check syntax, find problems, and enforce code style // 检查语法、发现问题并强制执行代码样式</span><br></pre></td></tr></table></figure><ol><li>使用哪种类型的模块，这里使用Esmodules</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What type of modules does your project use? … </span><br><span class="line">❯ JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>使用什么框架</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? … </span><br><span class="line">  React</span><br><span class="line">❯ Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>是否使用TypeScript: 选择 Yes</li><li>运行在哪种环境：选择Browser/Node,  浏览器环境和Node环境均配置</li><li>配置文件格式是什么</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? … </span><br><span class="line">❯ JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><ol><li>选择以什么工具安装上面的包：选择npm</li></ol><p>完成上面的操作之后，就会自动生成一个<a href="http://.eslintrc.cjs/">.eslintrc.cjs</a>配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;env&quot;: &#123; // 支持的环境</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;es2021&quot;: true,</span><br><span class="line">    &quot;node&quot;: true</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;extends&quot;: [ // 使用那些拓展</span><br><span class="line">    &quot;eslint:recommended&quot;,</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;,</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot;</span><br><span class="line">   ],</span><br><span class="line">  &quot;overrides&quot;: [ // 匹配哪些文件的 配置</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;env&quot;: &#123;</span><br><span class="line">        &quot;node&quot;: true</span><br><span class="line">       &#125;,</span><br><span class="line">      &quot;files&quot;: [</span><br><span class="line">        &quot;.eslintrc.&#123;js,cjs&#125;&quot;</span><br><span class="line">       ],</span><br><span class="line">      &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;sourceType&quot;: &quot;script&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaVersion&quot;: &quot;latest&quot;, // 指定要使用的 ECMAScript 版本</span><br><span class="line">    &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">    &quot;sourceType&quot;: &quot;module&quot; // 指定代码的来源类型,如果你的代码是 ES 模块，则应设置为 &#x27;module&#x27;。</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@typescript-eslint&quot;,</span><br><span class="line">    &quot;vue&quot;</span><br><span class="line">   ],</span><br><span class="line">  // Eslint规则: https://eslint.org/docs/latest/rules/</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">   // 如果你要关闭某条规则你可以 off</span><br><span class="line">   // 如果你希望某条规则报错 你可以 error</span><br><span class="line">   // 如果你希望只是警告 你可以设置为 warn</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以尝试在rules中进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    // 表示需要加分号，不加就会报错</span><br><span class="line">    &quot;semi&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存代码，就会发现在每行的末尾没有加分号的就会报错。(<strong>需要在Vscode中安装Eslint插件</strong>)</p><p>这样的规则有很多，比如no-unused-var,表示声明的变量必须使用：具体的可以在<a href="https://eslint.org/docs/latest/rules/">https://eslint.org/docs/latest/rules/</a>中找到，为了简化这些规则的书写，eslint提供了推荐的配置集合，即extends选项中配置的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;eslint:recommended&quot;, // ESLint 官方提供的推荐配置集</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;, // 适用于 TypeScript 代码的规则集</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot; // 针对 Vue.js 3 版本的 ESLint 插件提供的基本配置集</span><br><span class="line">   ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vite添加Eslint支持"><a href="#Vite添加Eslint支持" class="headerlink" title="Vite添加Eslint支持"></a><strong>Vite添加Eslint支持</strong></h2><p>上面的操作只是在项目中安装了Eslint, 但是还没有与Vite项目进行集成，这需要安装插件vite-plugin-eslint</p><p>npm i vite-plugin-eslint —save-dev</p><p>如果你遇到了Could not find a declaration file for module ‘vite-plugin-eslint’的报错，请参考下面的解决方案</p><p><a href="https://juejin.cn/post/7313507274868965439">https://juejin.cn/post/7313507274868965439</a></p><p><a href="https://github.com/gxmari007/vite-plugin-eslint/issues/74">https://github.com/gxmari007/vite-plugin-eslint/issues/74</a></p><p>然后修改<a href="http://vite.config.ts/">vite.config.ts</a>的代码，添加对vite-plugin-eslint的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">// 添加下面一行代码</span><br><span class="line">import eslintPlugin from &#x27;vite-plugin-eslint&#x27;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line"> plugins: [vue(), eslintPlugin()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00-Typescript基础</title>
      <link href="/posts/100fa4c0.html"/>
      <url>/posts/100fa4c0.html</url>
      
        <content type="html"><![CDATA[<p>想要系统学习ts ，可以查看阮一峰老师的教程 <a href="https://wangdoc.com/typescript/intro">TypeScript教程</a></p><h3 id="为什么需要TypeScript"><a href="#为什么需要TypeScript" class="headerlink" title="为什么需要TypeScript"></a><strong>为什么需要TypeScript</strong></h3><p>JavaScript 是一门动态运行语言，没有类型检测，但是这也导致了有很多错误到了运行阶段才能发现，比如说下面一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLen</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getLen</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="title function_">getLen</span>() <span class="comment">// 只有在运行时才会报错</span></span><br></pre></td></tr></table></figure><h3 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a><strong>什么是TypeScript</strong></h3><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p><p>Typescript是JavaScript的超集，支持类型，并且最终会被编译成JS代码。</p><h3 id="TS运行环境"><a href="#TS运行环境" class="headerlink" title="TS运行环境"></a><strong>TS运行环境</strong></h3><ol><li>前置条件</li></ol><p>安装ts前，要提前安装<a href="http://node.js/">Node.js</a> , 并且<a href="http://node.js/">Node.js</a>版本最好在V16以上，建议你使用nvm来管理你的nodejs版本。</p><ol><li>ts的安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 ts</span><br><span class="line">npm install typescript -g</span><br><span class="line"># 查看tsc的版本</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h3 id="TS基本示例"><a href="#TS基本示例" class="headerlink" title="TS基本示例"></a><strong>TS基本示例</strong></h3><p>新建hello.ts文件，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>执行下列命令，会看到生成一个.js文件，是与之对应的js代码</p><p>tsc hello.ts</p><p>修改ts代码，在函数参数中加上name:string , 这表示传入的参数名称为name, 类型为string ，如果传入其他类型的参数，比如整数类型100， 代码会自动报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params">name:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&quot;jack&quot;</span>)</span><br><span class="line"><span class="comment">// 下一行代码会自动报错：100下方有红色波浪线</span></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h3><p>想要为变量添加类型很简单，就是在变量后面添加: type ，但是一旦添加上类型之后，就不能修改其值的类型，比如下面的示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line"><span class="comment">// 不被允许 </span></span><br><span class="line"><span class="comment">// name = 100</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isMale</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a><strong>联合类型</strong></h3><p>联合类型是由两个或者多个其他类型组成的类型，类型和类型之间用| 关联，值可以是类型中的任何一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="type类型别名"><a href="#type类型别名" class="headerlink" title="type类型别名"></a><strong>type类型别名</strong></h3><p>假设有多个类型都需要用到同一个类型，别名不允许重名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">---</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumOrStr</span> = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a><strong>类型缩小</strong></h3><p>如果一个变量有多种类型，读取该变量时，往往需要进行“类型缩小”, 区分该值到底属于哪一种类型，然后再进一步处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br><span class="line"><span class="comment">// 下面一行代码还是会报错, 类型number上不存在length属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br></pre></td></tr></table></figure><p>可以使用 typeof/switch等类型判断的方法进行类型缩小。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a><strong>类型推断</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;mike&quot;</span> <span class="comment">// 类型推断为string</span></span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h3><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IName</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = <span class="title class_">IName</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">age</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a><strong>any</strong></h3><p>如果你不想限制变量的类型，可以使用any, 但是并不推荐这样做。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">any</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line">name = <span class="number">30</span></span><br><span class="line">name = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a><strong>数组的声明</strong></h3><p>在ts中，要求所有成员必须满足类型要求，其类型有两种写法，第一种是成员的类型之后，加上方括号。如果成员有多种类型，可以使用()将联合类型包起来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:(<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>第二种写法是使用内置的 Array 接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="元组的声明"><a href="#元组的声明" class="headerlink" title="元组的声明"></a><strong>元组的声明</strong></h3><p>元组是ts特有的，在数组中应该尽量保持成员类型是相同的，但是元组的成员类型可以自由设置，各个成员的类型可以不同。</p><p>const a: [string, number, string] = [“mike”, 18, “male”]</p><p>使用元组时，必须给出类型，否则会将其视为数组</p><p>const a = [“mike”, 18] // 类型被推断为 (number | string)[]</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><p>除了原始类型，ts还可以为对象定义类型，比如说用一个对象表示一个坐标点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要求坐标的 x 属性和 y 属性必须传入整数时，可以这样做</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样无法通用，我们可以用type为该类型起一个别名，简化使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// point的类型为PointType</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个属性是可选的（即可以忽略），需要在属性名后面加一个问号。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>,</span><br><span class="line">    z?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以传递或者不传递 z 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a><strong>interface</strong></h3><p>interface的使用和type十分相似，都是用来定义类型，基本用法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interface可以扩展，这意味着可以声明同名的interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">z</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交叉类型-1"><a href="#交叉类型-1" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h3><p>JS中对函数的参数个数，参数类型，返回类型均不做限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) : <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h3><p>开发中，经常需要定义一组相关的常量，比如方向Direction, 状态码Status, 因此ts中引入了枚举结构，将相关常量放在一起。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举结构的默认值从0开始，依次递增, 我们也可以为成员显式赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个颜色的枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="string">&quot;RED&quot;</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="string">&quot;GREEN&quot;</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="string">&quot;BLUE&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><strong>泛型</strong></h3><p>泛型是ts的难点</p><p>泛型可以在编写函数、类或者接口的时候传递类型参数，这些类型参数在使用时才被具体指定，就相当于一个占位符，在使用时才会传入具体类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数使用了类型参数 T, 但是 T是什么并不确定</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们可以对函数进行调用，函数被调用时会被具体参数替代。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T 被替换为 string 类型</span></span><br><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 输出: Hello</span></span><br><span class="line"><span class="comment">// T 被替换为 number 类型</span></span><br><span class="line"><span class="keyword">let</span> numberResult = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于类和接口, 其写法也是在类的名称后面加上<T></p><p>下面我们定义一个Box 类接受类型参数 T，并使用它来定义实例变量和方法的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">102</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: 102</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型接口，表示具有一个值的容器</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">numberContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">99</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">stringContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberContainer.<span class="property">value</span>); <span class="comment">// 输出: 99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringContainer.<span class="property">value</span>); <span class="comment">// 输出: Hello</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a><strong>泛型约束</strong></h3><p>直接使用泛型太过自由，有的时候我们需要让泛型类型参数满足某些条件，比如下面代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">   <span class="comment">// 代码报错，类型 T 上不存在属性 length</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此ts提供了语法约束类型参数，如果不满足约束条件，编译时就会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> hasLength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受一个类型参数 T，该参数必须符合 hasLength 接口</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T <span class="keyword">extends</span> hasLength&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用泛型约束，我们在函数内部可以安全地访问arg.length属性。</p><h3 id="类型声明文件"><a href="#类型声明文件" class="headerlink" title="类型声明文件"></a><strong>类型声明文件</strong></h3><p><u>xx.d.ts</u>  , d 表示声明，类型声明。</p><p><u>tsconfig.json </u> 是TS项目的配置文件, 供tsc编译器使用，其内容是一个JSON对象，通过这个配置文件，你可以定义项目的编译选项、文件包含与排除规则、模块解析规则等。</p><p>关于配置的更多内容，可以在官网查看：<a href="https://www.typescriptlang.org/tsconfig">tsconfig说明</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a549.html"/>
      <url>/posts/c993a549.html</url>
      
        <content type="html"><![CDATA[<h2 id="43-localStorage和sessionStorage的区别"><a href="#43-localStorage和sessionStorage的区别" class="headerlink" title="43.localStorage和sessionStorage的区别"></a>43.localStorage和sessionStorage的区别</h2><p>localStorage：永久存储在本地，适合保存在本地的数据</p><p>sessionStorage：会话级的存储，敏感账号一次性登录</p><p>相同点：</p><ul><li>都是保存在浏览器端</li><li>不会把数据自动的发送给服务器，仅在本地保存</li><li>只能存储字符串，可以将对象JSON.stringfy()编码之后进行存储</li></ul><p>不同点：</p><ul><li>存储大小限制不同：sessionStorage存储的大小为5M，localStorage存储大小为20M</li><li>数据有效期不同：localStorage始终有效，窗口关闭或浏览器关闭，一直保存，持久保存数据</li><li>作用域不同：sessionStorage在不同的浏览器窗口不会进行共享，只有同一个页面中共享。localStorage在所有同源的窗口下可以共享。</li></ul><h2 id="leetcode20-有效的括号"><a href="#leetcode20-有效的括号" class="headerlink" title="leetcode20. 有效的括号"></a>leetcode<a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> start = s[i];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span> || s[i]==<span class="string">&#x27;[&#x27;</span> || s[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> end = stack[stack.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(end==<span class="string">&#x27;(&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;)&#x27;</span> ||end==<span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;&#125;&#x27;</span> || end==<span class="string">&#x27;[&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span>==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode1047-删除字符串中的所有相邻重复项"><a href="#leetcode1047-删除字符串中的所有相邻重复项" class="headerlink" title="leetcode1047. 删除字符串中的所有相邻重复项"></a>leetcode<a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(v <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">let</span> prev =stack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(prev!=v)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(prev);</span><br><span class="line">            stack.<span class="title function_">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode104771-简化路径"><a href="#leetcode104771-简化路径" class="headerlink" title="leetcode104771. 简化路径"></a>leetcode<a href="https://leetcode.cn/problems/simplify-path/">104771. 简化路径</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> simplifyPath = <span class="keyword">function</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack =[]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val &amp;&amp; val==<span class="string">&#x27;..&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val &amp;&amp; val!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    arr.<span class="property">length</span> ? str=<span class="string">&#x27;/&#x27;</span>+stack.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>):str=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a548.html"/>
      <url>/posts/c993a548.html</url>
      
        <content type="html"><![CDATA[<h2 id="38-宏任务和微任务"><a href="#38-宏任务和微任务" class="headerlink" title="38.宏任务和微任务"></a>38.宏任务和微任务</h2><p>js是单线程的 、 主线程</p><p>宏任务</p><p>​    分类：setTimeout、setInterval、requestAnimation</p><p>​    1、宏任务所处的队列就是宏任务队列</p><p>​    2、第一个宏任务队列中只有一个任务：执行主线程的js代码</p><p>​    3、宏任务队列可以有多个</p><p>​    4、当宏任务队列中的任务全部执行完以后会查看是否有微任务队列 如果有先执行微任务队列中的所有任务，如果没有就查看是否有宏任务队列</p><p>微任务</p><p>​    分类：new Promise().then(回调)    process.nextTick</p><p>​    微任务所处的队列就是微任务队列</p><p>​    只有一个微任务队列</p><p>​    在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务</p><p>默认一开始第一个宏任务队列中只有一个任务：执行主线程的js代码；执行完毕后检查是否有微任务，有则执行完 再执行宏任务队列。</p><p>代码案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---start---&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>();<span class="comment">//修改promise实例对象的状态为成功状态</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise实例成功回调执行&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---end---&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>—-start—-</p><p>0</p><p>1</p><p>2</p><p>3</p><p>4</p><p>—-end—-</p><p>promise实例成功回调执行</p><p>setTimeout</p><h2 id="39-比较React与Vue"><a href="#39-比较React与Vue" class="headerlink" title="39.比较React与Vue"></a>39.比较React与Vue</h2><p>1）相同点</p><ul><li>都有组件化开发和虚拟dom</li><li>都支持props进行父子组件间数据通信</li><li>都支持数据驱动视图，不直接操作真实dom，更新状态数据界面就自动更新</li><li>都支持服务器端渲染</li><li>都有支持native 的方案,React 的 React Native,Vue 的Weex</li></ul><p>2）不同点</p><ul><li>数据绑定vue 实现了数据的双向绑定,react 数据流动是单向的</li><li>组件写法不一样,React 推荐的做法是 JSX，也就是把 HTML和 CSS 全都写进 JavaScript了,即’all in js’; Vue 推荐的做法是webpack+vue-loader 的单文件组件格式,即 html,css,js 写在同一个文件</li><li>state 对象在 react 应用中不可变的,需要使用 setstate 方法更新状态;在 vue 中,state 对象不是必须的,数据由 data 属性在 vue 对象中管理</li></ul><h2 id="40-Redux管理状态的机制"><a href="#40-Redux管理状态的机制" class="headerlink" title="40.Redux管理状态的机制"></a>40.Redux管理状态的机制</h2><p>1) redux 是一个独立专门用于做状态管理的JS库，不是 react 插件库</p><p>2)它可以用在 react, angular, vue 等项目中,但基本与 react 配合使用</p><p>3)作用:集中式管理 react 应用中多个组件共享的状态和从后台获取的数据</p><h2 id="41-VUE组件间通信方式"><a href="#41-VUE组件间通信方式" class="headerlink" title="41.VUE组件间通信方式"></a>41.VUE组件间通信方式</h2><p>1）通信种类</p><p>1.父向子</p><p>2.子向父</p><p>3.隔代组件间通信</p><p>4.兄弟组件间通信</p><p>2）实现通信方式</p><p>1.props</p><ul><li>通过一般属性实现父向子通信</li><li>通过函数属性实现子向父通信</li><li>缺点：隔代组件和兄弟组件间通信比较麻烦</li></ul><p>2.vue自定义事件</p><ul><li>vue内置实现，可以代替函数类型的props<ul><li>绑定监听：&lt;MyComp @eventName=”callback”</li><li>触发事件：this.$emit(“eventName,data)</li></ul></li><li>缺点：只适合于子向父通信</li></ul><p>3.消息订阅与发布</p><ul><li>需要引入消息订阅与发布的实现库，如：pubsub-js<ul><li>订阅消息：PubSub.subscribe(‘msg’,(msg,data)=&gt;{})</li><li>发布消息：PubSub.publish(‘msg’,data)</li></ul></li><li>优点：此方式可用于任意关系组件间通信</li></ul><p>4.vuex</p><ul><li>是什么: vuex 是 vue 官方提供的集中式管理 vue 多组件共享状态数据的 vue 插件</li><li>优点：对组件间关系没有限制，且相比于pubsub库管理更集中，更方便</li></ul><p>5.slot</p><ul><li>是什么：专门用来实现父向子传递带数据的标签</li><li>注意：通信的标签板块是在父组件中解析好后再传递给子组件的</li></ul><h2 id="42-说说vue的MVVM实现原理"><a href="#42-说说vue的MVVM实现原理" class="headerlink" title="42.说说vue的MVVM实现原理"></a>42.说说vue的MVVM实现原理</h2><p>Vue作为MVVM模式的实现库的2种技术</p><ul><li>模版解析</li><li>数据绑定</li></ul><p>模版解析：实现初始化显示</p><ul><li>解析大括号表达式</li><li>解析指令</li></ul><p>数据绑定：实现更新显示</p><ul><li>通过数据劫持实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a547.html"/>
      <url>/posts/c993a547.html</url>
      
        <content type="html"><![CDATA[<h2 id="31-你是如何理解ES6中Promise的以及它的实例方法？"><a href="#31-你是如何理解ES6中Promise的以及它的实例方法？" class="headerlink" title="31.你是如何理解ES6中Promise的以及它的实例方法？"></a>31.你是如何理解ES6中Promise的以及它的实例方法？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是异步编程的一种解决方案</span></span><br><span class="line"><span class="comment">// 三种状态：pending（进行中），fulfilled（已成功），rejected（已失败）</span></span><br><span class="line"><span class="comment">// 特点：状态不受外界的影响，只有异步操作的结果，决定当前是哪一种状态，一旦状态改变就不会再变</span></span><br><span class="line"><span class="comment">// 用法：Promise是一个构造函数，用来生成Promise实例</span></span><br><span class="line"><span class="comment">// promise的构造函数接收一个函数作为参数，这个函数有两个参数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="comment">// resolve函数：将promise对象的状态由pending变为fulfilled，在异步操作成功时调用</span></span><br><span class="line">    <span class="title function_">resolve</span>() <span class="comment">// 返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reject函数：将promise对象的状态由pending变为rejected，在异步操作失败时调用</span></span><br><span class="line">    <span class="title function_">reject</span>() <span class="comment">//返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 实例方法</span></span><br><span class="line"><span class="comment">// then():当实例状态发生改变的时候的回调函数,返回的是一个新的promise实例，也就是promise可以链式书写的原因</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="keyword">if</span>(time%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123; <span class="comment">//rejected已失败的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch():用于指定发生错误的回调函数，一般来说通过catch替代then的第二个参数</span></span><br><span class="line"><span class="comment">// finally():用来指定不管Promise对象状态最后如何，都会执行的操作</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后的结果&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="32-ES6中Promise-all的理解以及应用场景？"><a href="#32-ES6中Promise-all的理解以及应用场景？" class="headerlink" title="32.ES6中Promise.all的理解以及应用场景？"></a>32.ES6中Promise.all的理解以及应用场景？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于将多个Promise实例，包装成一个新的Promise实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功01&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功02&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功03&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 参数可以不是数组，但是必须是iterator接口</span></span><br><span class="line"><span class="keyword">let</span> pAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pAll)</span><br><span class="line"><span class="comment">//pAll的状态，由p1,p2,p3来决定，只有当这三个都为成功，pA11才会为成功，</span></span><br><span class="line"><span class="comment">//但是有一个失败，那么就是失败，这个时候第一个失败的实例的返回值，会传递给pAll的回调函数</span></span><br><span class="line"><span class="comment">//如果作为参数的实例，自己定义了catch方法，那么它一旦rejected，不会触pAll的catch方法</span></span><br><span class="line"><span class="comment">//多个请求结果合并在一起</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBannerList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;轮播图的数据&#x27;</span>)&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMusicList</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌曲列表的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getcateList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌单分类的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span>=<span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getMusicList</span>(),<span class="title function_">getcateList</span>()])</span><br><span class="line"><span class="title class_">All</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><h2 id="33-你能说说ES6中Promise-race的用法和使用场景吗？"><a href="#33-你能说说ES6中Promise-race的用法和使用场景吗？" class="headerlink" title="33.你能说说ES6中Promise.race的用法和使用场景吗？"></a>33.你能说说ES6中Promise.race的用法和使用场景吗？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prace)</span><br><span class="line"><span class="comment">//Promise.race区别于promise.all只要实例中有一个先改变状态，就会把这个实例的参数的返回值传给prace的回调函数</span></span><br><span class="line"><span class="comment">// 使用场景：请求超时提示</span></span><br></pre></td></tr></table></figure><h2 id="34-函数节流和防抖"><a href="#34-函数节流和防抖" class="headerlink" title="34.函数节流和防抖"></a>34.函数节流和防抖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">节流函数</span><br><span class="line"><span class="comment">// fn要被节流的函数，delay规定的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line"><span class="comment">// 记录上一次函数触发的时间</span></span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//记录当前函数触发的时间</span></span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">if</span>(nowTime-lastTime &gt; delay)&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">// 同步时间</span></span><br><span class="line">            lastTime =nowTime; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scroll事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;，<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">节流函数：一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="comment">//记录上一次的延时器</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 清除上一次的延时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="comment">// 重新设置新的延时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;, <span class="number">1000</span>);</span><br><span class="line">多次点击按钮，只让最后一次点击后才触发</span><br></pre></td></tr></table></figure><h2 id="35-什么是跨域-解决跨域的办法有哪些"><a href="#35-什么是跨域-解决跨域的办法有哪些" class="headerlink" title="35.什么是跨域?解决跨域的办法有哪些?"></a>35.什么是跨域?解决跨域的办法有哪些?</h2><ol><li>同源策略</li></ol><ul><li>是浏览器安全策略</li><li>协议名、域名、端口号必须完全一致</li></ul><ol><li>跨域</li></ol><ul><li>违背同源策略就会产生跨域</li></ul><ol><li>解决跨域</li></ol><ul><li>jsonp cors 服务器代理。。。</li></ul><p>jsonp解决方案  前端实现方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建script标签</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//数据请求回来会被触发的函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置script的src属性，设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000?callback=getData&#x27;</span>;</span><br><span class="line"><span class="comment">// 让script生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><h2 id="36-从一个url地址到最终页面渲染完成，发生了什么？"><a href="#36-从一个url地址到最终页面渲染完成，发生了什么？" class="headerlink" title="36.从一个url地址到最终页面渲染完成，发生了什么？"></a>36.从一个url地址到最终页面渲染完成，发生了什么？</h2><ol><li><p>DNS解析：将域名地址解析为ip地址</p><ul><li>浏览器DNS缓存</li><li>系统DNS缓存</li><li>路由器DNS缓存</li><li>网络运营商DNS缓存</li><li>递归搜索：blog.baidu.com<ul><li>.com域名下查找DNS解析</li><li>.baidu域名下查找DNS解析</li><li>blog域名下查找DNS解析</li><li>出错了</li></ul></li></ul></li><li><p>TCP连接：三次握手</p><ul><li>第一次握手，浏览器发起，告诉服务器我要发送请求了</li><li>第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧</li><li>第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li></ul></li><li><p>发送请求</p><ul><li>请求报文：http协议的通信内容</li></ul></li><li><p>接受响应</p><ul><li>响应报文</li></ul></li><li><p>渲染页面</p><ul><li>遇见html标记，浏览器调用html解析器解析成token并构建成dom树</li><li>遇到style/link标记，浏览器调用css解析器，处理css标记并构建cssom树</li><li>遇到script标记，调用JavaScript解析器，处理script代码（绑定事件，修改dom树、cssom树）</li><li>将dom树和cssom树合并成一个渲染树</li><li>根据渲染树来计算布局，计算每个节点的几何信息（布局）</li><li>将各个节点颜色绘制到屏幕上（渲染）</li></ul><p>注意：</p><p>这五个步骤不一定按照顺序执行，如果dom树或cssom树被修改了，可能会执行多次布局和渲染。往往实际页面中，这些步骤都会执行多次的。</p></li><li><p>断开连接：TCP四次挥手</p></li></ol><ul><li>第一次挥手：由浏览器发起的，发送给服务器，我东西发送完了（请求报文），你准备关闭吧</li><li>第二次挥手：由服务器发起的，告诉浏览器，我东西接受完了（请求报文），我准备关闭了，你也准备吧</li><li>第三次挥手：由服务器发起的，告诉浏览器，我东西发送完了（响应报文），你准备关闭吧</li><li>第四次挥手：由浏览器发起，告诉服务器，我东西接受完了（响应报文），我准备关闭了，你也准备吧</li></ul><h2 id="37-闭包"><a href="#37-闭包" class="headerlink" title="37.闭包"></a>37.闭包</h2><p>什么是闭包？</p><ol><li>密闭的容器，类似于set，map容器，存储数据的</li><li>闭包是一个对象，存放数据的格式：key：value</li></ol><p>形成条件</p><ol><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li></ol><p>闭包的优点：延长外部函数局部变量的生命周期</p><p>闭包的缺点：容易造成内存泄漏</p><p>注意点：</p><ol><li>合理使用闭包</li><li>用完闭包要及时清除（销毁）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的应用场景</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//2</span></span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a546.html"/>
      <url>/posts/c993a546.html</url>
      
        <content type="html"><![CDATA[<h2 id="28-如何在JS中对原型进行修改和重写？"><a href="#28-如何在JS中对原型进行修改和重写？" class="headerlink" title="28.如何在JS中对原型进行修改和重写？"></a>28.如何在JS中对原型进行修改和重写？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span><br><span class="line">    <span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接给Person的原型对象用对象进行赋值时，p的构造函数指向根构造函数object</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);<span class="comment">//p(this).__proto__=Person.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//false</span></span><br><span class="line">p.<span class="property">constructor</span>=<span class="title class_">Person</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？"><a href="#29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？" class="headerlink" title="29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？"></a>29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过hasownProperty()//检测一个属性是否属于自身对象，还是继承于原型链上的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">phone</span> = <span class="number">12345</span>;</span><br><span class="line">p.<span class="property">height</span>=<span class="number">182</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;phone&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sex&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="title function_">hasOwnProperty</span>(i))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="30-JS中bind和call、apply有什么作用？它们的区别是什么？"><a href="#30-JS中bind和call、apply有什么作用？它们的区别是什么？" class="headerlink" title="30.JS中bind和call、apply有什么作用？它们的区别是什么？"></a>30.JS中bind和call、apply有什么作用？它们的区别是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：改变函数运行时的this指向</span></span><br><span class="line"><span class="keyword">var</span> uname=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    uname=<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>() <span class="comment">//李四</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>,<span class="number">0</span>)<span class="comment">//张三</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj),<span class="number">0</span>)<span class="comment">//李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//apply:两个参数，第一个是this指向，第二个是函数接收的参数，以数组的形式传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...argus</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...argus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    myname=<span class="string">&quot;王五&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="title function_">apply</span>(person,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);<span class="comment">//传入的参数必须是一个数组</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 如果第一个参数是null或者是undefined，this默认指向window</span></span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//call:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// call 和 apply改变this指向原函数立即执行，临时改变this指向一次</span></span><br><span class="line">fun.<span class="title function_">call</span>(person,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// bind:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// 改变this指向不会立即执行，返回一个永久改变this指向的函数</span></span><br><span class="line"><span class="keyword">var</span> bindFun = fun.<span class="title function_">bind</span>(person)</span><br><span class="line"><span class="title function_">bindFun</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a545.html"/>
      <url>/posts/c993a545.html</url>
      
        <content type="html"><![CDATA[<h2 id="26-JS中数组的遍历方法有哪些"><a href="#26-JS中数组的遍历方法有哪些" class="headerlink" title="26.JS中数组的遍历方法有哪些"></a>26.JS中数组的遍历方法有哪些</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// forEach:不会改变原数组，没有返回值</span></span><br><span class="line"><span class="comment">// 三个参数 遍历值，索引值，数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:不会改变原数组，有返回值（以数组的形式返回）</span></span><br><span class="line"><span class="keyword">let</span> resultMap = arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);c</span><br><span class="line">    <span class="keyword">return</span> index*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter: 过滤数组,也可直接遍历</span></span><br><span class="line"><span class="comment">// 有返回值 返回包含符合条件元素的数组</span></span><br><span class="line"><span class="keyword">let</span> resultFilter = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of:返回是数组的元素，对象的属性值。不能遍历普通的对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce :接受一个函数，作为一个累加器</span></span><br><span class="line"><span class="comment">// 前两个参数, 第一个计算之后返回的值或者初始值，第二个当前元素</span></span><br><span class="line"><span class="keyword">let</span> resultReduce = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre+item</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultReduce);</span><br></pre></td></tr></table></figure><h2 id="27-如何理解JS中原型？"><a href="#27-如何理解JS中原型？" class="headerlink" title="27.如何理解JS中原型？"></a>27.如何理解JS中原型？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prototype属性，默认对应着一个空对象（没有我们指定的方法和属性），这个空对象就是我们所说的原型对象，每一个prototype属性都是不相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 显式原型和隐式原型</span></span><br><span class="line"><span class="comment">// 每一个函数都有一个prototype属性，就是显式原型</span></span><br><span class="line"><span class="comment">// 每一个实例对象都有一个__proto__,就是隐式原型</span></span><br><span class="line"><span class="comment">// 实例对象的隐式原型等于对应的构造函数的显示原型的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>)&#123; <span class="comment">// 内部语句：Fun(this).prototype=&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> fun=<span class="keyword">new</span> <span class="title class_">Fun</span>() <span class="comment">// 内部语句：fun(this).__proto__=Fun.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>===fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="comment">// 函数的prototype属性，在定义函数是自动添加的，默认值是一个空对象</span></span><br><span class="line"><span class="comment">// 对象的__proto__属性，创建对象时自动添加的，默认值是构造函数的prototype属性。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day2(5-30)</title>
      <link href="/posts/97c25550.html"/>
      <url>/posts/97c25550.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part02</span><br><span class="line"> </span><br><span class="line">977.有序数组的平方 ，209.长度最小的子数组 ，59.螺旋矩阵II ，总结 </span><br><span class="line"></span><br><span class="line">建议大家先独立做题，然后看视频讲解，然后看文章讲解，然后在重新做一遍题，把题目AC，最后整理成今日当天的博客</span><br><span class="line"></span><br><span class="line">拓展题目可以先不做</span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 977.有序数组的平方 </span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解双指针思想 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/</span><br><span class="line">文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html</span><br><span class="line">视频讲解： https://www.bilibili.com/video/BV1QB4y1D7ep </span><br><span class="line"></span><br><span class="line"> 209.长度最小的子数组</span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/minimum-size-subarray-sum/</span><br><span class="line">文章讲解：https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1tZ4y1q7XE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 59.螺旋矩阵II</span><br><span class="line"></span><br><span class="line">题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/spiral-matrix-ii/</span><br><span class="line">文章讲解：https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1SL4y1N7mV/</span><br><span class="line"></span><br><span class="line"> 总结 </span><br><span class="line"></span><br><span class="line">题目建议：希望大家 也做一个自己 对数组专题的总结</span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day1(5-29)</title>
      <link href="/posts/762a9ea0.html"/>
      <url>/posts/762a9ea0.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 今日任务 </span><br><span class="line"></span><br><span class="line">数组理论基础，704. 二分查找，27. 移除元素  </span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 数组理论基础  </span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</span><br><span class="line"></span><br><span class="line">题目建议： 了解一下数组基础，以及数组的内存空间地址，数组也没那么简单。</span><br><span class="line"></span><br><span class="line"> 704. 二分查找 </span><br><span class="line"></span><br><span class="line">题目建议： 大家能把 704 掌握就可以，35.搜索插入位置 和 34. 在排序数组中查找元素的第一个和最后一个位置 ，如果有时间就去看一下，没时间可以先不看，二刷的时候在看。</span><br><span class="line"></span><br><span class="line">先把 704写熟练，要熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法。</span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/binary-search/</span><br><span class="line">文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1fA4y1o715</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> 27. 移除元素</span><br><span class="line"></span><br><span class="line">题目建议：  暴力的解法，可以锻炼一下我们的代码实现能力，建议先把暴力写法写一遍。 双指针法 是本题的精髓，今日需要掌握，至于拓展题目可以先不看。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/remove-element/ </span><br><span class="line">文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV12A4y1Z7LP </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id="二分法第一种写法"><a href="#二分法第一种写法" class="headerlink" title="二分法第一种写法"></a>二分法第一种写法</h5><p> target 是在一个在左闭右闭的区间里，[left, right]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><h5 id="二分法第二种写法"><a href="#二分法第二种写法" class="headerlink" title="二分法第二种写法"></a>二分法第二种写法</h5><p> target 是在一个在左闭右开的区间里，[left, right），那么二分法的边界处理方式则截然不同。</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>; <span class="comment">// target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid,left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        mid=left+((right-left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">mid</span>: <span class="built_in">number</span>, <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fast = <span class="number">0</span>;fast&lt;nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums: <span class="built_in">number</span>[], val: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">slow</span>:<span class="built_in">number</span> = <span class="number">0</span>,<span class="attr">fast</span>: <span class="built_in">number</span> =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (fast &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] !== val) &#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职场小白军规</title>
      <link href="/posts/9bdce6af.html"/>
      <url>/posts/9bdce6af.html</url>
      
        <content type="html"><![CDATA[<p>当学生的时候，老师有义务回答你的问题</p><p>但是在职场，没人有这个义务，凡事先求已后求人</p><p><img src="https://img2.imgtp.com/2024/05/28/skWfPQgT.jpg" alt=""></p><h3 id="心态调整"><a href="#心态调整" class="headerlink" title="心态调整"></a>心态调整</h3><ul><li>做、学、问，三件事，做：学：问=2:2:1</li><li>比起学习的你，其他人更希望看到在做事的你</li><li>少问<code>是什么</code>，<code>为什么</code>，<code>怎么做</code></li><li>要闻就问 <code>我这样做对不对？</code>，<code>我打算这么做可以么？</code>，<code>我这么做哪里不合适？</code></li><li>有问题优先找师傅，如果没有固定师傅，就去问问招你进来的领导，让他帮你指定一个师傅</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>电脑必装笔记软件，与手机云同步</li><li>常备便签纸，再买个好本子，配两只好笔，推荐Pentel+荧光笔</li><li>低调，别太显眼，不要把自己整滴过于帅或者漂亮，除非你的工作本身就跟颜值有关</li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>别人交代的任务，尽可能的要当场复述重点并确认，目标及时间节点要卡准</p><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>两个目标：实现、学习。</p><p>大爷心态：实习（工作）是双向的，公司要人干活又缺钱，别PUA自己，别让自己被PUA</p><p>初期框架意识：对业务全程掌握感的重要性</p><p>中期差不多意识：合理分配自己的时间精力，批量化分配70分的东西；并且多沟通，向上管理</p><p>后期观察判断意识：不要all in 转正。你首先是自己的产品经理，要借助平台撬动更大的资源，做好自己这款产品。</p><p><code>世界上成功的产品经理只有一种，那就是用自己的方式度过这一生。</code></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>正常不需要新人站队，如果要站，你师傅站哪你站哪</p><p>有些事坚持做就好了，不用想太多。没有必要短期上太高的强度，没有必要。习惯细水长流</p><p>没有必要过度安排和计划，以致过渡的压力与焦虑，走一步看一步，如今计划赶不上变化。船到桥头自然直</p><p>谁不向往更好的生活，眼界打开，自身的基础素质够高，才能走的更远。</p><p>不忘探索生活与热爱，活着的本质就是现在。</p><p>或许有时要向钱低头，但也要找到难得的兴趣所在，把自己的时间付给有价值的事情。</p>]]></content>
      
      
      <categories>
          
          <category> 非技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典前端面试题</title>
      <link href="/posts/c993a544.html"/>
      <url>/posts/c993a544.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><p><img src="https://img2.imgtp.com/2024/05/27/iU4gPmmD.png" alt="冒泡排序原理图"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序的排序  冒泡</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 轮数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">length</span>-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="2-反转数组"><a href="#2-反转数组" class="headerlink" title="2.反转数组"></a>2.反转数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>/<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i]=arr[arr.<span class="property">length</span>-<span class="number">1</span>-i];</span><br><span class="line">    arr[arr.<span class="property">length</span>-<span class="number">1</span>-i]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="3-去掉数组中重复性的数据"><a href="#3-去掉数组中重复性的数据" class="headerlink" title="3.去掉数组中重复性的数据"></a>3.去掉数组中重复性的数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 新数组</span></span><br><span class="line"><span class="keyword">let</span> t=[];</span><br><span class="line">t[<span class="number">0</span>]=arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;t.<span class="property">length</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[k]==arr[i]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(k==t.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">            t.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span><br></pre></td></tr></table></figure><h2 id="4-用css创建一个三角形"><a href="#4-用css创建一个三角形" class="headerlink" title="4.用css创建一个三角形"></a>4.用css创建一个三角形</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 用css创建一个三角形 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#box&#123;</span><br><span class="line">width: 0px;</span><br><span class="line">height: 0px;</span><br><span class="line">border: 100px solid;</span><br><span class="line"></span><br><span class="line">border-top-color: red;</span><br><span class="line">border-right-color: transparent;</span><br><span class="line">border-bottom-color: transparent;</span><br><span class="line">border-left-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="5-rem适配"><a href="#5-rem适配" class="headerlink" title="5.rem适配"></a>5.rem适配</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 实现移动端 rem适配 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* html根元素字体大小设置屏幕区域的宽 */</span></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取屏幕区域的宽度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> width= <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取html</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> htmlNode=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置字体大小</span></span></span><br><span class="line"><span class="language-javascript">    htmlNode.<span class="property">style</span>.<span class="property">fontSize</span>=width+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目打包上线</title>
      <link href="/posts/987bf438.html"/>
      <url>/posts/987bf438.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端项目上线"><a href="#前端项目上线" class="headerlink" title="前端项目上线"></a>前端项目上线</h2><h3 id="1-项目打包"><a href="#1-项目打包" class="headerlink" title="1.项目打包"></a>1.项目打包</h3><ul><li>我们开发用的脚手架其实就是一个微型服务器，用于:支撑开发环境、运行代理服务器等。</li><li>打包完的文件中不存在: <code>.vue</code>、<code>.jsx</code>、<code>.less</code> 等文件，而是:html、css、js 等。</li><li>打包后的文件，不再借助脚手架运行，而是需要部署到服务器上运行。</li><li>打包前，请务必梳理好前端项目的 <code>ajax</code>封装(请求前缀、代理规则等)</li></ul><h2 id="2-本地服务器部署"><a href="#2-本地服务器部署" class="headerlink" title="2.本地服务器部署"></a>2.本地服务器部署</h2><h2 id="3-nginx-服务器部署"><a href="#3-nginx-服务器部署" class="headerlink" title="3.nginx 服务器部署"></a>3.nginx 服务器部署</h2><h3 id="3-1-nginx-简介"><a href="#3-1-nginx-简介" class="headerlink" title="3.1.nginx 简介"></a>3.1.nginx 简介</h3><p>Nginx(发音为“engine-x”)是一款高性能的 HTTP 服务器和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。Nginx最初由 lgor Sysoev 编写，于 2004年发布。它以其高性能、高稳定性、丰富的功能集和低系统资源消耗而闻名，主要功能有:<br>1.反向代理<br>2.负载均衡<br>3.静态内容服务<br>4.HTTP/2 支持<br>5.SSL/TLS 支持<br>6.高速缓存</p><p><img src="https://img2.imgtp.com/2024/05/24/ameDRWn8.png" alt="1655883039"></p><h2 id="4-云服务器部署"><a href="#4-云服务器部署" class="headerlink" title="4.云服务器部署"></a>4.云服务器部署</h2>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品入门记录</title>
      <link href="/posts/f1288e52.html"/>
      <url>/posts/f1288e52.html</url>
      
        <content type="html"><![CDATA[<p>产品岗最终要的是实习经历 做产品的经历</p><p>star法则     描述项目经历 实习经历</p><p>Situation（情景）、Task（任务）、Action（行动）和Result（结果）</p><p>1、STAR法则，说清背景，结果要尽可能量化</p><p>2、提取产品关键词在前，方便HR阅览</p><p>3、自己尝试去将过往经历进行优化，去写对应的文档、去输出对应的框架图</p><p>工作职责</p><p>需求挖掘</p><p>产品设计</p><p>产品优化</p><p>上线效果</p><p>其中简历的个人技能与评价部分</p><p>个人技能</p><ul><li>计算机技能:Axure、Visio、Xmind、figma、墨刀、办公软件三件套、数据分析软件SQL等</li><li>语言技能:英语四六级、托福雅思等</li></ul><p>获奖情况</p><ul><li>奖项不要写太多了，该模块没有都可以…</li></ul><p>自我评价</p><ul><li>自我评价不要用大量形容词堆砌，多用动词，数量词，如坚持每月阅读5本互联网相关数据，并做读书笔记;慎用形容词，比如严谨认真，刻苦努力等</li></ul><p>产品最重要的是面试</p><p>产品最常见的灵魂三问<br>1、产品经理是什么，团队中什么样的角色?<br>2、产品经理应该具备什么特质，什么是产品思维?<br>3、产品经理日常的工作是什么，具体是？</p><p>群面</p><p>一、产品运营策划题</p><ol><li>明确目标用户</li><li>用户需求及痛点</li><li>产品解决方案</li></ol><p>AARRR海盗模型</p><p>提高触达用户数</p><p>提高用户活跃度</p><p>提高用户粘性</p><p>提高用户付费数</p><p>二、排序策略题</p><ol><li>考察逻辑思维</li><li>列出评分体系</li><li>列出打分框架</li></ol><p>什么是一个好的产品</p><ol><li>解决用户的需求 </li><li>有一定的用户粘性 </li><li>有完整的产品体验</li></ol><p>群面的心态：要认识到群面的本质是推动方案的形成，要合作而不是零和博弈。同时，要自信一点。</p><p>自我介绍：尽量说一些和题目、团队有关的经历、专业知识，少谈题外话。</p><p>自由讨论：一开始的时候要站出来说要3分钟的时间来看题目，3分钟之后给后面的时间划分出一个框架出来。</p><p>观点如何出来？</p><p>横向拆解：需求、用户、场景</p><p>纵向拆解：前中后，比如设计一种购物app，分析购物前、购物中、购物后</p><p>如果没有观点的时候，使用复读机战略。不断去重复别人的观点（询问式）</p><p>要注意不要将自己的角色框死了，随机应变。</p><p>要有打断别人的勇气。如果讨论没有结论，就会团灭，所以当一个人发言很垃圾的时候，一定要去打断、拉回来。</p><p>初次群面体验</p><p><img src="https://img2.imgtp.com/2024/05/24/4bBqlpdl.png" alt="群面题"></p><p>讨论得出：2,3,8,9,10.</p><p>群面总结：</p><p>Leader</p><p>Timer</p><p>小组成员</p><p>Recorder</p><p>reporter</p><p>洞察力 </p><p>优先级的能力 挑资源</p><p>合作能力</p><p>抗压能力</p><p>决策能力</p><p>创新思维</p><p>成本控制</p><p>能否被人记住</p><p>近期读《幕后产品》脑图</p><p><img src="https://img2.imgtp.com/2024/05/24/n79jCxeI.png" alt="幕后产品"></p>]]></content>
      
      
      <categories>
          
          <category> 非技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/posts/100fa4c9.html"/>
      <url>/posts/100fa4c9.html</url>
      
        <content type="html"><![CDATA[<ul><li>防抖(Debounce)是指对于短时间内重复发生的输入事件,只处理最后一次输入。它的目的是消除输入抖动。</li></ul><ul><li>节流(Throttle)是指对于短时间内频繁发生的输入事件,只处理一定时间内的第一次输入。它的目的是限制输入频率。</li></ul><p>使用场景不同：</p><ul><li>防抖通常用于处理诸如按钮点击、滚动条滚动等偶尔发生的输入事件,以避免重复触发。</li><li>节流通常用于处理诸如鼠标移动、窗口大小调整等频繁发生的输入事件,以限制更新频率,提高性能。</li></ul><p>实现方式不同：</p><ul><li>防抖一般通过设置一个延迟时间,只在指定时间内没有新的输入事件发生时才触发。</li><li>节流一般通过设置一个固定的时间间隔,每隔一定时间触发一次输入事件的处理。</li></ul><p>效果不同：</p><ul><li>防抖可以确保在输入稳定后才触发一次事件处理。</li><li>节流可以确保在指定时间内至多触发一次事件处理。</li></ul><p>防抖函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">debence</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debence</span>(<span class="params">handle</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果第二次的时间没到1s，就销毁上一个定时器</span></span><br><span class="line">        <span class="comment">// 第二次点击时，会找到上一次闭包中的timer，并且销毁</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            handle.<span class="title function_">call</span>(<span class="variable language_">this</span>,e);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节流函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    获取当前时间戳 now。</span></span><br><span class="line"><span class="comment">    计算当前时间与上次执行时间 lastTime 的差值。</span></span><br><span class="line"><span class="comment">    如果差值大于等于 1000ms (1 秒), 则执行 handle 函数,并更新 lastTime 为当前时间。</span></span><br><span class="line"><span class="comment">    如果差值小于 1000ms, 则不执行 handle 函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">handle</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="comment">// 如果当前时间 - 上次执行时间 &gt;= 1000ms，则执行 handle 函数</span></span><br><span class="line">    <span class="keyword">if</span> (now - lastTime &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">      lastTime = now;</span><br><span class="line">      handle.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样,当我们在 1 秒内多次点击按钮时,throttle 函数只会在第一次点击时执行 handle 函数,后续的点击事件会被忽略,直到 1 秒后再次执行。</span></span><br></pre></td></tr></table></figure><p>可以使用lodash中的Debounce、Throttle 函数</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-15简单题开始找手感</title>
      <link href="/posts/43cc8af.html"/>
      <url>/posts/43cc8af.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-牛群排列去重"><a href="#1-牛群排列去重" class="headerlink" title="1.  牛群排列去重"></a>1.  牛群排列去重</h2><p>[<a href="https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4">https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* pre=head;</span><br><span class="line">        ListNode* cur=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;val==cur-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=cur-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-调整牛群顺序"><a href="#2-调整牛群顺序" class="headerlink" title="2.调整牛群顺序"></a>2.调整牛群顺序</h2><p>[<a href="https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4">https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @param n int整型 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">moveNthToEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 统一操作，设置一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* tail=dummy;</span><br><span class="line">  <span class="comment">// 先有一个指针走到最后一个节点，并计算个数</span></span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p=dummy;</span><br><span class="line">  <span class="comment">//另一个指正走到倒数n个节点的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count-n;i++)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp=p-&gt;next;</span><br><span class="line">        p-&gt;next=tmp-&gt;next;</span><br><span class="line">        tail-&gt;next=tmp;</span><br><span class="line">        tmp-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-合并两群能量值"><a href="#3-合并两群能量值" class="headerlink" title="3.合并两群能量值"></a>3.合并两群能量值</h2><p>[<a href="https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec">https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param l1 ListNode类 </span></span><br><span class="line"><span class="comment">     * @param l2 ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeEnergyValues</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* cur=dummy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归并排序思想</span></span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&gt;=l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接剩余节点</span></span><br><span class="line">        <span class="keyword">if</span>(l1) cur-&gt;next=l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) cur-&gt;next=l2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-牛牛队列成环"><a href="#4-牛牛队列成环" class="headerlink" title="4.牛牛队列成环"></a>4.牛牛队列成环</h2><p>[<a href="https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7">https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span> || head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow-&gt;val!=fast-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">nullptr</span> || fast-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关键是这，快慢指针，快指针每次走两步，慢指针每次走一步，如果存在环，一定会相遇。</span></span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-牛群编号的回文顺序"><a href="#5-牛群编号的回文顺序" class="headerlink" title="5.牛群编号的回文顺序"></a>5.牛群编号的回文顺序</h2><p>[<a href="https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528">https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以将链表中的数据保存到一个vector数组中，然后判断这个数组是否回文。</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;<span class="function">s</span></span><br><span class="line"><span class="function">    <span class="title">for</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>,j=v.size()<span class="number">-1</span>;i&lt;j;i++,j--)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=v[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-牛群的秘密通信"><a href="#6-牛群的秘密通信" class="headerlink" title="6.牛群的秘密通信"></a>6.牛群的秘密通信</h2><ol><li>创建一个栈用于存储左括号。栈的作用是用于判断括号的闭合性，它遵循先进后出的原则。每当遇到左括号时，就将其压入栈中，当遇到右括号时，就需要判断当前栈顶的左括号是否与之匹配。</li><li>遍历字符串s的每个字符。在遍历过程中，对于每个字符，我们需要判断它是否是左括号或右括号，并进行相应的操作。</li><li>如果当前字符是左括号（‘(’, ‘{’, ‘[’），将其压入栈中。</li><li>如果当前字符是右括号（‘)’, ‘}’,‘]’），我们需要判断栈是否为空。如果栈为空，说明没有相应的左括号与之匹配，直接返回false。如果栈不为空，将栈顶的左括号弹出，判断当前右括号是否与弹出的左括号匹配。如果不匹配，返回false。</li><li>遍历结束后，判断栈是否为空。如果栈不为空，说明左括号没有完全闭合，返回false；如果栈为空，说明所有左括号都有相应的右括号匹配，返回true。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param s string字符串</span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_valid_cow_communication</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-牛的表达式计算器"><a href="#7-牛的表达式计算器" class="headerlink" title="7.牛的表达式计算器"></a>7.牛的表达式计算器</h2><p>[<a href="https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906">https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param tokens string字符串vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用到队列，从左往右，依次入队，遇到运算符，出队两个进行计算，再入队</span></span><br><span class="line">        <span class="comment">// 将数组中的数据入栈，如果遇到符号，则出数据并进行相加，再入数据，直到遍历完。</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> str:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str==<span class="string">&quot;+&quot;</span>||str==<span class="string">&quot;-&quot;</span>||str==<span class="string">&quot;*&quot;</span>||str==<span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> right=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> left=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (str[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left+right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left-right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left*right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left/right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tokens[i] != <span class="string">&quot;+&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;-&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;*&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sk.<span class="built_in">push</span>(<span class="built_in">stoi</span>(tokens[i])); <span class="comment">// 遇到数字将其入栈（需要将字符串转为整型）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 遇到运算符则依次弹出栈顶的两个数字进行相应的运算</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> a = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> res;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a + b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a - b; <span class="comment">// 注意弹出和运算顺序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a * b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res = a / b;</span><br><span class="line">            &#125;</span><br><span class="line">            sk.<span class="built_in">push</span>(res); <span class="comment">// 将运算结果入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sk.<span class="built_in">top</span>(); <span class="comment">// 最终栈顶元素即为运算结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.day9 (5-14)</title>
      <link href="/posts/a5d80461.html"/>
      <url>/posts/a5d80461.html</url>
      
        <content type="html"><![CDATA[<h2 id="牛客-前端专业面试真题"><a href="#牛客-前端专业面试真题" class="headerlink" title="牛客-前端专业面试真题"></a>牛客-前端专业面试真题</h2><h3 id="1-说一说HTML语义化？"><a href="#1-说一说HTML语义化？" class="headerlink" title="1.说一说HTML语义化？"></a>1.说一说HTML语义化？</h3><p>语义化标签、利于页面内容结构化、利于无CSS页面可读、利于SEO、利于代码可读  标准回答 HTML语义化就是指在使用HTML标签构建页面时，避免大篇幅的使用无语义的标签</p><p>使用HTML语义化标签的作用：</p><ul><li>易于用户阅读，样式文件未加载时，页面结构清晰</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重</li><li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li><li>有利于开发和维护，代码更具可读性，代码更好维护</li></ul><p>加分回答 HTML5语义化标签并没有广泛使用，比如京东、淘宝等，还是使用div元素，设置id是header或者footer，这个可能是因为HTML5新增的语义化标签的作用不是特别大，网站没有必要重写</p><h3 id="2-说一说盒模型？"><a href="#2-说一说盒模型？" class="headerlink" title="2.说一说盒模型？"></a>2.说一说盒模型？</h3><p>CSS盒模型定义了盒的每个部分包含 margin, border, padding,  content 。根据盒子大小的计算方式不同盒模型分成了两种，标准盒模型和怪异盒模型。 标准模型，给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是 content box。<code>padding</code> 和 <code>border</code>再加上设置的宽高一起决定整个盒子的大小。  怪异盒模型，给盒设置 <code>width</code> 和 <code>height</code>，包含了<code>padding</code>和<code>border</code>，设置的 <code>width</code> 和 <code>height</code>就是盒子实际的大小 默认情况下，盒模型都是标准盒模型 设置标准盒模型：<code>box-sizing:content-box</code> 设置怪异盒模型：<code>box-sizing:border-box</code></p><h3 id="3-说一下浮动？"><a href="#3-说一下浮动？" class="headerlink" title="3.说一下浮动？"></a>3.说一下浮动？</h3><p>得分点 脱离文档流、盒子塌陷、 影响其他元素排版、伪元素  、<code>overflow:hidden</code> 、标签插入法  </p><p>标准回答 浮动的作用，设置浮动的图片，可以实现文字环绕图片，设置了浮动的块级元素可以排列在同一行，设置了浮动的行内元素可以设置宽高，同时可以按照浮动设置的方向对齐排列盒子。</p><p>设置浮动元素的特点：</p><ul><li>设置了浮动，该元素脱标。元素不占位置 -浮动可以进行模式转换（行内块元素）  浮动造成的影响，使盒子脱离文档流，如果父级盒子没有设置高度，需要被子盒子撑开，那么这时候父级盒子的高度就塌陷了，同时也会造成父级盒子后面的兄弟盒子布局受到影响。如果浮动元素后面还有其他兄弟元素，其他兄弟元素的布局也会受到影响。  </li></ul><p>清除浮动的方法：</p><ul><li>伪元素清除浮动：给浮动元素父级增加 .clearfix::after {      content: ‘’; display: table; clear: both;  } /<em>兼容IE低版本 </em>/ .clearfix {  *zoom: 1; } overflow：hidden<code>：给浮动元素父级增加</code>overflow：hidden`属性 额外标签法：给浮动元素父级增加标签 </li></ul><p>加分回答 三种清除浮动的特点和影响：</p><ul><li>伪元素清除浮动：不会新增标签，不会有其他影响，是当下清除浮动最流行的方法 </li><li><code>overflow：hidden</code>：不会新增标签，但是如果父级元素有定位元素超出父级，超出部分会隐藏，在不涉及父级元素有超出内容的情况，overflow：hidden比较常用，毕竟写法方便简洁 </li><li>标签插入法：清除浮动的语法加在新增标签上，由于新增标签会造成不必要的渲染，所以这种方法目前不建议使用</li></ul><h3 id="4-说一说样式优先级的规则是什么？"><a href="#4-说一说样式优先级的规则是什么？" class="headerlink" title="4.说一说样式优先级的规则是什么？"></a>4.说一说样式优先级的规则是什么？</h3><p>得分点 <code>!important</code>、行内样式、嵌入样式、外链样式、id选择器、类选择器、标签选择器、复合选择器、通配符、继承样式  </p><p>标准回答:</p><p>CSS样式的优先级应该分成四大类</p><ul><li>第一类<code>!important</code>，无论引入方式是什么，选择器是什么，它的优先级都是最高的。</li><li>第二类引入方式，行内样式的优先级要高于嵌入和外链，嵌入和外链如果使用的选择器相同就看他们在页面中插入的顺序，在后面插入的会覆盖前面的。</li><li>第三类选择器，选择器优先级：id选择器&gt;（类选择器 | 伪类选择器 | 属性选择器 ）&gt; （后代选择器 | 伪元素选择器 ）&gt; （子选择器 | 相邻选择器） &gt; 通配符选择器 。</li><li>第四类继承样式，是所有样式中优先级比较低的。</li><li>第五类浏览器默认样式优先级最低。</li></ul><p>加分回答：</p><p>用!important要谨慎</p><ul><li>一定要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li><li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li><li>永远不要在你的插件中使用 <code>!important</code></li><li>永远不要在全站范围的 CSS 代码中使用 <code>!important</code>  优先级的比较指的是相同的样式属性，不同样式属性优先级比较失效，比如：在设置<code>max-width</code>时注意，已经给元素的<code>max-width</code>设置了<code>!important</code>但是还不生效，很有可能就是被width覆盖了  举例：<code>div</code>最终的宽度还是<code>200px</code>  <code>div &#123;  max-width: 400px !important; height: 200px;background-color: tomato;width: 200px;&#125;</code></li></ul><h3 id="5-说一说CSS尺寸设置的单位"><a href="#5-说一说CSS尺寸设置的单位" class="headerlink" title="5.说一说CSS尺寸设置的单位"></a>5.说一说CSS尺寸设置的单位</h3><p>px、rem、em、vw、vh </p><p>标准回答:</p><p>px：pixel像素的缩写，绝对长度单位，它的大小取决于屏幕的分辨率，是开发网页中常常使用的单位。</p><p>em：相对长度单位，在 <code>font-size</code> 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width。如当前元素的字体尺寸未设置，由于字体大小可继承的原因，可逐级向上查找，最终找不到则相对于浏览器默认字体大小。</p><p>rem：相对长度单位，相对于根元素的字体大小，根元素字体大小未设置，使用浏览器默认字体大小。</p><p>vw：相对长度单位，相对于视窗宽度的1%。</p><p>vh：相对长度单位，相对于视窗高度的1%。</p><p> 加分回答:</p><p>rem应用：在移动端网页开发中，页面要做成响应式的，可使用rem配合媒体查询或者flexible.js实现。原理是通过媒体查询或者flexible.js，能够在屏幕尺寸发生改变时，重置html根元素的字体大小，页面中的元素都是使用rem为单位设置的尺寸，因此只要改变根元素字体大小，页面中的其他元素的尺寸就自动跟着修改  vw应用：由于vw被更多浏览器兼容之后，在做移动端响应式页面时，通常使用vw配合rem。原理是使用vw设置根元素html字体的大小，当窗口大小发生改变，vw代表的尺寸随着修改，无需加入媒体查询和flexible.js，页面中的其他元素仍使用rem为单位，就可实现响应式。</p><h3 id="6-说一说BFC"><a href="#6-说一说BFC" class="headerlink" title="6.说一说BFC"></a>6.说一说BFC</h3><p>定义：BFC(Block Formatting Context)块级格式化上下文，是Web页面一块独立的渲染区域，内部元素的渲染不会影响边界以外的元素。</p><p>形成条件：a.flaot  b.position  3. overflow  4.display</p><p>布局规则：</p><p>a.区域内box从上到下排列 </p><p>b.box垂直方向的距离由margin决定 </p><p>c.同一个bfc内box margin会重叠</p><p>d.bfc不会与flaot重叠 </p><p>e.bfc计算高度 也会计算float元素 </p><h3 id="7-说几个未知宽高元素水平垂直居中方法"><a href="#7-说几个未知宽高元素水平垂直居中方法" class="headerlink" title="7.说几个未知宽高元素水平垂直居中方法"></a>7.说几个未知宽高元素水平垂直居中方法</h3><p><code>position</code>   <code>transform</code>   <code>flex</code>   <code>justify-content</code>   <code>align-items</code>  <code>vertical-align</code>  <code>text-align</code></p><p> 标准回答</p><p> 未知宽高元素水平垂直都居中的实现方法：</p><ol><li>设置元素相对父级定位<code>position:absolute;left:50%;right:50%</code>，让自身平移自身高度50% <code>transform: translate(-50%,-50%);</code>，这种方式兼容性好，被广泛使用的一种方式</li><li>设置元素的父级为弹性盒子<code>display:flex</code>，设置父级和盒子内部子元素水平垂直都居中<code>justify-content:center; align-items:center</code>  ，这种方式代码简洁，但是兼容性ie 11以上支持，由于目前ie版本都已经很高，很多网站现在也使用这种方式实现水平垂直居中</li><li>设置元素的父级为网格元素<code>display: grid</code>，设置父级和盒子内部子元素水平垂直都居中<code>justify-content:center; align-items:center</code>  ，这种方式代码简洁，但是兼容性ie 10以上支持<ol><li>设置元素的父级为表格元素<code>display: table-cell</code>，其内部元素水平垂直都居中<code>text-align: center;vertical-align: middle;</code> ，设置子元素为行内块<code>display: inline-block;</code>，这种方式兼容性较好</li></ol></li></ol><p>加分回答</p><p>京东的移动端顶部京东logo，使用的是<code>display:flex</code>这种模式 </p><h3 id="8-说一说三栏布局的实现方案"><a href="#8-说一说三栏布局的实现方案" class="headerlink" title="8.说一说三栏布局的实现方案"></a>8.说一说三栏布局的实现方案</h3><p>三栏布局：三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，一共有五种实现方式。  这里以左边宽度固定为100px，右边宽度固定为200px为例。  （1）利用绝对定位的方式，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。  （2）利用flex布局的方式，左右两栏的宽度分别设置为100px和200px，中间一栏增长系数设置为1  （3）利用浮动的方式，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后。  （4）圣杯布局，利用浮动和负边距来实现。父级元素设置左右的padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置margin负值将其移动到上一行，再利用相对定位，定位到两边。圣杯布局中间列的宽度不能小于左边列的宽度，否则左边列上不去，而双飞翼布局则不存在这个问题。  （5）双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的margin值来实现的，而不是通过父元素的padding来实现的。本质上来说，也是通过浮动和外边距负值来实现的。</p><h3 id="9-说一说JS数据类型有哪些-区别是什么？"><a href="#9-说一说JS数据类型有哪些-区别是什么？" class="headerlink" title="9.说一说JS数据类型有哪些,区别是什么？"></a>9.说一说JS数据类型有哪些,区别是什么？</h3><p>Number、String、Boolean、BigInt、Symbol、Null、Undefined、Object、8种</p><p>标准回答：</p><p> JS数据类型分为两类：一类是基本数据类型，也叫简单数据类型，包含7种类型，分别是Number 、String、Boolean、BigInt、Symbol、Null、Undefined。另一类是引用数据类型也叫复杂数据类型，通常用Object代表，普通对象，数组，正则，日期，Math数学函数都属于Object。</p><p> 数据分成两大类的本质区别：基本数据类型和引用数据类型它们在内存中的存储方式不同。</p><p> 基本数据类型是直接存储在栈中的简单数据段，占据空间小，属于被频繁使用的数据。</p><p>引用数据类型是存储在堆内存中，占据空间大。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。</p><p> 加分回答：</p><p> Symbol是ES6新出的一种数据类型，这种数据类型的特点就是没有重复的数据，可以作为object的key。</p><p>数据的创建方法Symbol()，因为它的构造函数不够完整，所以不能使用new Symbol()创建数据。由于Symbol()创建数据具有唯一性，所以 Symbol() !== Symbol(), 同时使用Symbol数据作为key不能使用for获取到这个key，需要使用Object.getOwnPropertySymbols(obj)获得这个obj对象中key类型是Symbol的key值。</p><p>BigInt也是ES6新出的一种数据类型，这种数据类型的特点就是数据涵盖的范围大，能够解决超出普通数据类型范围报错的问题。</p><p>使用方法：</p><ul><li>整数末尾直接+n：647326483767797n</li><li>调用BigInt()构造函数：BigInt(“647326483767797”)</li><li>注意：BigInt和Number之间不能进行混合操作  </li></ul><h3 id="10-说一说null-和-undefined-的区别，如何让一个属性变为null"><a href="#10-说一说null-和-undefined-的区别，如何让一个属性变为null" class="headerlink" title="10.说一说null 和 undefined 的区别，如何让一个属性变为null"></a>10.说一说null 和 undefined 的区别，如何让一个属性变为null</h3><p>undefind 是全局对象的一个属性，当一个变量没有被赋值或者一个函数没有返回值或者某个对象不存在某个属性却去访问或者函数定义了形参但没有传递实参，这时候都是undefined。undefined通过typeof判断类型是’undefined’。undefined == undefined  undefined === undefined 。</p><p>null代表对象的值未设置，相当于一个对象没有设置指针地址就是null。null通过typeof判断类型是’object’。</p><p>undefined 表示一个变量初始状态值，而 null 则表示一个变量被人为的设置为空对象，而不是原始状态。</p><p>null 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。因此，需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。</p><h3 id="11-说一说JavaScript有几种方法判断变量的类型？"><a href="#11-说一说JavaScript有几种方法判断变量的类型？" class="headerlink" title="11.说一说JavaScript有几种方法判断变量的类型？"></a>11.说一说JavaScript有几种方法判断变量的类型？</h3><p>typeof、instanceof、Object.prototype.toString.call()（对象原型链判断方法）、 constructor (用于引用数据类型)   </p><p>标准回答:</p><p>typeof：常用于判断基本数据类型，对于引用数据类型除了function返回’function‘，其余全部返回’object’。</p><p>instanceof：主要用于区分引用数据类型，检测方法是检测的类型在当前实例的原型链上，用其检测出来的结果都是true，不太适合用于简单数据类型的检测，检测过程繁琐且对于简单数据类型中的undefined, null, symbol检测不出来。</p><p>constructor：用于检测引用数据类型，检测方法是获取实例的构造函数判断和某个类是否相同，如果相同就说明该数据是符合那个数据类型的，这种方法不会把原型链上的其他类也加入进来，避免了原型链的干扰。</p><p>Object.prototype.toString.call()：适用于所有类型的判断检测，检测方法是Object.prototype.toString.call(数据) 返回的是该数据类型的字符串。 </p><h3 id="12-说一说数组去重都有哪些方法？"><a href="#12-说一说数组去重都有哪些方法？" class="headerlink" title="12.说一说数组去重都有哪些方法？"></a>12.说一说数组去重都有哪些方法？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">new</span> <span class="title class_">Set</span>(): </span><br><span class="line"><span class="keyword">let</span> array = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="number">2.</span><span class="attr">indexOf</span>: </span><br><span class="line"><span class="keyword">if</span>(array.<span class="title function_">indexOf</span>(arr[i]) == -<span class="number">1</span>)&#123; array.<span class="title function_">push</span>(arr[i])&#125;  </span><br><span class="line">或者 arr5.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;<span class="keyword">return</span> self.<span class="title function_">indexOf</span>(item) === index&#125;)  </span><br><span class="line"><span class="number">3.</span>使用reduce+includes：</span><br><span class="line"><span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,curr</span>) =&gt;</span> prev.<span class="title function_">includes</span>(curr) ? prev : [...prev,curr],[])   </span><br></pre></td></tr></table></figure><h3 id="13-说一说伪数组和数组的区别？"><a href="#13-说一说伪数组和数组的区别？" class="headerlink" title="13.说一说伪数组和数组的区别？"></a>13.说一说伪数组和数组的区别？</h3><p> 伪数组它的类型不是Array，而是Object，而数组类型是Array。可以使用的length属性查看长度，也可以使用[index]获取某个元素，但是不能使用数组的其他方法，也不能改变长度，遍历使用for in方法。</p><p>伪数组的常见场景：</p><ul><li>函数的参数arguments </li><li>原生js获取DOM：document.querySelector(‘div’) 等</li><li>jquery获取DOM：$(“div”)等 </li></ul><p>伪数组转换成真数组方法 </p><ul><li>Array.prototype.slice.call(伪数组) </li><li>[].slice.call(伪数组) </li><li>Array.from(伪数组) 转换后的数组长度由 <code>length</code> 属性决定。索引不连续时转换结果是连续的，会自动补位。</li></ul><h3 id="14-说一说map-和-forEach-的区别？"><a href="#14-说一说map-和-forEach-的区别？" class="headerlink" title="14.说一说map 和 forEach 的区别？"></a>14.说一说map 和 forEach 的区别？</h3><p>map有返回值，可以开辟新空间，return出来一个length和原数组一致的数组，即便数组元素是undefined或者是null。</p><p>forEach默认无返回值，返回结果为undefined，可以通过在函数体内部使用索引修改数组元素。</p><p>map的处理速度比forEach快，而且返回一个新的数组，方便链式调用其他数组新方法，比如filter、reduce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; </span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> value * value).<span class="title function_">filter</span>(<span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">10</span>); <span class="comment">// arr2 = [16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="15-说一说es6中箭头函数？"><a href="#15-说一说es6中箭头函数？" class="headerlink" title="15.说一说es6中箭头函数？"></a>15.说一说es6中箭头函数？</h3><p>得分点 没有this、this是从外部获取、不能使用new、没有arguments、没有原型和super</p><p>标准回答</p><p>箭头函数相当于匿名函数，简化了函数定义。箭头函数有两种写法，当函数体是单条语句的时候可以省略{}和return。另一种是包含多条语句，不可以省略{}和return。</p><p>箭头函数最大的特点就是没有this，所以this是从外部获取，就是继承外部的执行上下文中的this，由于没有this关键字所以箭头函数也不能作为构造函数， 同时通过 <code>call()</code> 或 <code>apply()</code> 方法调用一个函数时，只能传递参数（不能绑定this），第一个参数会被忽略。箭头函数也没有原型和super。</p><p>不能使用yield关键字，因此箭头函数不能用作 Generator 函数。不能返回直接对象字面量。  </p><p>加分回答</p><p>箭头函数函数适用场景:</p><ul><li><p>简单的函数表达式，内部没有this引用，没有递归、事件绑定、解绑定，适用于map、filter等方法中，写法简洁  <code>var arr = [1,2,3]; var newArr = arr.map((num)=&gt;num*num)</code></p></li><li><p>内层函数表达式，需要调用this，且this应与外层函数一致时</p></li><li><blockquote><p>let group = {   title: “Our Group”,   students: [“John”, “Pete”, “Alice”],   </p><p>showList() {     this.students.forEach(       student =&gt; alert(this.title + ‘: ‘ + student)     );   } }; group.showList();</p></blockquote></li></ul><h3 id="16-事件扩展符用过吗-…-，什么场景下？"><a href="#16-事件扩展符用过吗-…-，什么场景下？" class="headerlink" title="16.事件扩展符用过吗(…)，什么场景下？"></a>16.事件扩展符用过吗(…)，什么场景下？</h3><ol><li>数组克隆 let a = [1,2,3];let b = […a] </li><li>数组合并 let a = [1,2,3];let b = [4,5,6];let c = […a,…b] </li><li>类数组转成真正的数组 let a = new Set([1,2,3]); let b = […a] </li></ol><p>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历的属性，浅拷贝到当前的对象中，浅拷贝和深拷贝：浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p><h3 id="17-说一说你对闭包的理解？"><a href="#17-说一说你对闭包的理解？" class="headerlink" title="17.说一说你对闭包的理解？"></a>17.说一说你对闭包的理解？</h3><ol><li>内层函数引用外层函数中变量，这些变量的集合就是闭包 </li><li>通过作用域链，当前作用域可以访问上级作用域中的变量 </li><li>解决的问题：保存变量，保护变量 </li><li>带来的问题：内存泄露 </li><li>块级作用域</li></ol><p>闭包形成的原理：作用域链，当前作用域可以访问上级作用域中的变量</p><p>闭包解决的问题：能够让函数作用域中的变量在函数执行结束之后不被销毁，同时也能在函数外部可以访问函数内部的局部变量。 </p><p>闭包带来的问题：由于垃圾回收器不会将闭包中变量销毁，于是就造成了内存泄露，内存泄露积累多了就容易导致内存溢出。</p><p>加分回答 闭包的应用，能够模仿块级作用域，能够实现柯里化，在构造函数中定义特权方法、Vue中数据响应式Observer中使用闭包等。 </p><h3 id="18-说一说JS变量提升？"><a href="#18-说一说JS变量提升？" class="headerlink" title="18.说一说JS变量提升？"></a>18.说一说JS变量提升？</h3><p>函数和var声明的变量会有变量提升，js在预编译阶段会将函数和var声明的变量提升至最前面先执行，之后再按顺序执行代码块进行赋值，而let和const声明的变量只是创建提升，在预编译中将其创建，形成暂时性死区，不能提前访问和调用变量，只能在赋值之后进行调用和访问</p><h3 id="19-说一说this指向（普通函数、箭头函数）？"><a href="#19-说一说this指向（普通函数、箭头函数）？" class="headerlink" title="19.说一说this指向（普通函数、箭头函数）？"></a>19.说一说this指向（普通函数、箭头函数）？</h3><p>普通函数指向调用处，箭头函数指向定义处</p><h3 id="20-说一说call-apply-bind的作用和区别？"><a href="#20-说一说call-apply-bind的作用和区别？" class="headerlink" title="20.说一说call apply bind的作用和区别？"></a>20.说一说call apply bind的作用和区别？</h3><p>首先，call apply bind三个方法都可以用来改变函数的this指向，具体区别如下：</p><p>1、fn.call (newThis,params) call函数的第一个参数是this的新指向，后面依次传入函数fn要用到的参数。会立即执行fn函数。  </p><p>  2、fn.apply (newThis,paramsArr) apply函数的第一个参数是this的新指向,第二个参数是fn要用到的参数数组，会立即执行fn函数。  </p><p>  3、fn.bind (newThis,params) bind函数的第一个参数是this的新指向，后面的参数可以直接传递，也可以按数组的形式传入。  不会立即执行fn函数，且只能改变一次fn函数的指向，后续再用bind更改无效。返回的是已经更改this指向的新fn</p><h3 id="21-说一说js继承的方法和优缺点？"><a href="#21-说一说js继承的方法和优缺点？" class="headerlink" title="21.说一说js继承的方法和优缺点？"></a>21.说一说js继承的方法和优缺点？</h3><p>1、原型链继承 </p><p>优点：写法简单、容易理解。</p><p>缺点：①引用类型的值会被所有实例共享；②在子类实例对象创建时，不能向父类传参；</p><p>2、借用构造函数继承 </p><p>优点：①避免了引用类型的值会被所有实例共享；②在子类实例对象创建时，可以向父类传参；</p><p>缺点：方法在构造函数中，每次创建实例对象时都会重新创建一遍方法；</p><p>3、组合继承</p><p>融合原型链和借用构造函数的优点，是js中最常用的继承方式；</p><p>缺点：无论什么情况下，父类构造函数都会被调用两次，一是创建子类原型对象时，二是子类构造函数内部。</p><p>4、原型式继承 </p><p>优点：不需要单独创建构造函数；</p><p>缺点：引用类型的值会被所有实例共享。</p><p>5、寄生式继承</p><p>优点：不需要单独创建构造函数；</p><p>缺点：方法在构造函数中，每次创建实例对象时都会重新创建一遍。</p><p>6、寄生组合继承</p><p>优点：高效率只调用一次父类构造函数，并且避免了子类原型对象上不必要、多余的属性，同时，还能将原型链保持不变，因此能使用instanceof 和 isPrototypeOf。</p><p>缺点：代码复杂</p><h3 id="22-说一说new会发生什么？"><a href="#22-说一说new会发生什么？" class="headerlink" title="22.说一说new会发生什么？"></a>22.说一说new会发生什么？</h3><ol><li>创建一个空的简单JavaScript对象（即<code>&#123;&#125;</code>）</li><li>为步骤1新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象</li><li>将步骤1新创建的对象作为<code>this</code>的上下文</li><li><p>如果该函数没有返回对象，则返回<code>this</code></p><p><code>new</code>关键字后面的构造函数不能是箭头函数。</p></li></ol><h3 id="23-说一说defer和async区别？"><a href="#23-说一说defer和async区别？" class="headerlink" title="23.说一说defer和async区别？"></a>23.说一说defer和async区别？</h3><p>html文件都是按顺序执行的，script标签中没有加defer和async时，浏览器在解析文档时遇到script标签就会停止解析阻塞文档解析，先加载JS文件，加载完之后立即执行，执行完毕后才能继续解析文档。 而在script标签中写入defer或者async时，就会使JS文件异步加载，即html执行到script标签时，JS加载和文档解析同时进行，而async是在JS加载完成后立即执行JS脚本，阻塞文档解析，而defer则是JS加载完成后，在文档解析完成后执行JS脚本。</p><p>因为js文件存在服务器中并不是在浏览器中，当浏览器遇见script标签时就发起请求，也就是加载的意思，然后把js代码解析再执行  </p><p>文档解析就是解析html创建dom树</p><h3 id="24-说一说promise是什么与使用方法？"><a href="#24-说一说promise是什么与使用方法？" class="headerlink" title="24.说一说promise是什么与使用方法？"></a>24.说一说promise是什么与使用方法？</h3><ol><li>概念：异步编程的一种解决方案，解决了地狱回调的问题</li><li>使用方法：new Promise((resolve,reject) =&gt; { resolve（）; reject（）; })里面有多个resovle或者reject只执行第一个。如果第一个是resolve的话后面可以接.then查看成功消息。如果第一个是reject的话，.catch查看错误消息。</li></ol><p>Promise的作用：Promise是异步微任务，解决了异步多层嵌套回调的问题，让代码的可读性更高，更容易维护</p><p>Promise使用：Promise是ES6提供的一个构造函数，可以使用Promise构造函数new一个实例，Promise构造函数接收一个函数作为参数，这个函数有两个参数，分别是两个函数 <code>resolve</code>和<code>reject</code>，<code>resolve</code>将Promise的状态由等待变为成功，将异步操作的结果作为参数传递过去；<code>reject</code>则将状态由等待转变为失败，在异步操作失败时调用，将异步操作报出的错误作为参数传递过去。实例创建完成后，可以使用<code>then</code>方法分别指定成功或失败的回调函数，也可以使用catch捕获失败，then和catch最终返回的也是一个Promise，所以可以链式调用。</p><p>Promise的特点：</p><ol><li>对象的状态不受外界影响（Promise对象代表一个异步操作，有三种状态）。</li><li>pending（执行中）  Resolved（成功，又称Fulfilled）  rejected（拒绝）<br>其中pending为初始状态，fulfilled和rejected为结束状态（结束状态表示promise的生命周期已结束）</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。 Promise对象的状态改变，只有两种可能（状态凝固了，就不会再变了，会一直保持这个结果）从Pending变为Resolved   从Pending变为Rejected</li><li>resolve 方法的参数是then中回调函数的参数，reject 方法中的参数是catch中的参数</li><li>then 方法和 catch方法 只要不报错，返回的都是一个fullfilled状态的promise</li></ol><blockquote><p>Promise.resolve() :返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。 Promise.reject()：返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法。 Promise.all()：返回一个新的promise对象，该promise对象在参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。 Promise.any()：接收一个Promise对象的集合，当其中的一个 promise 成功，就返回那个成功的promise的值。 </p><p>Promise.race()：当参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。 </p></blockquote><h3 id="25-说一说JS实现异步的方法？"><a href="#25-说一说JS实现异步的方法？" class="headerlink" title="25.说一说JS实现异步的方法？"></a>25.说一说JS实现异步的方法？</h3><p>得分点：回调函数、事件监听、setTimeout、Promise、生成器Generators/yield、async/await </p><h3 id="26-说一说cookie、sessionStorage、localStorage-区别？"><a href="#26-说一说cookie、sessionStorage、localStorage-区别？" class="headerlink" title="26.说一说cookie、sessionStorage、localStorage 区别？"></a>26.说一说cookie、sessionStorage、localStorage 区别？</h3><p>1.都是浏览器存储 </p><p>2.都存储在浏览器本地 </p><p>区别： </p><ol><li>cookie由服务器写入， sessionStorage以及localStorage都是由前端写入</li><li>cookie的生命周期由服务器端写入时就设置好的，localStorage是写入就一直存在，除非手动清除，sessionStorage是由页面关闭时自动清除 </li><li>cookie存储空间大小约4kb， sessionStorage及localStorage空间比较大，大约5M </li><li>3者的数据共享都遵循同源原则，sessionStorage还限制必须是同一个页面 </li><li>前端给后端发送请求时，自动携带Cookie中的数据, 但是SessionStorage、 LocalStorage不会</li><li>cookie一般存储登录验证信息或者token，localStorage常用于存储不易变动的数据，减轻服务器压力，sessionStorage可以用来监测用户是否是刷新进入页面，如音乐播放器恢复进度条功能</li></ol><h3 id="27-说一说如何实现可过期的localstorage数据？"><a href="#27-说一说如何实现可过期的localstorage数据？" class="headerlink" title="27.说一说如何实现可过期的localstorage数据？"></a>27.说一说如何实现可过期的localstorage数据？</h3><p>惰性删除是指某个键值过期后，该键值不会被马上删除，而是等到下次被使用的时候，才会被检查到过期，此时才能得到删除。</p><p>定时删除是指，每隔一段时间执行一次删除操作，并通过限制删除操作执行的次数和频率，来减少删除操作对CPU的长期占用。另一方面定时删除也有效的减少了因惰性删除带来的对localStorage空间的浪费。</p><h3 id="28-说一下token-能放在cookie中吗？"><a href="#28-说一下token-能放在cookie中吗？" class="headerlink" title="28.说一下token 能放在cookie中吗？"></a>28.说一下token 能放在cookie中吗？</h3><p>能、不设置cookie有效期、重新登录重写cookie覆盖原来的cookie </p><p>token认证流程 </p><ol><li>客户端使用用户名跟密码请求登录 </li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端签发一个 token ，并把它发送给客户端</li><li>客户端接收 token 以后会把它存储起来，比如放在  cookie 里或者 localStorage 里</li><li>客户端每次发送请求时都需要带着服务端签发的 token（把 token 放到 HTTP 的 Header 里） </li><li>服务端收到请求后，需要验证请求里带有的 token ，如验证成功则返回对应的数据</li></ol><h3 id="29-说一说axios的拦截器原理及应用？"><a href="#29-说一说axios的拦截器原理及应用？" class="headerlink" title="29.说一说axios的拦截器原理及应用？"></a>29.说一说axios的拦截器原理及应用？</h3><p> 1.拦截器分为 请求（request）拦截器和响应（response）拦截器。<br> 2.请求拦截器用于在接口请求之前做的处理，比如为每个请求带上相应的参数（token，时间戳等）。<br> 3.响应拦截器用于在接口返回之后做的处理，比如对返回的状态进行判断（token是否过期）<br> 4.拦截器原理：创建一个chn数组，数组中保存了拦截器相应方法以及dispatchRequest（dispatchRequest这个函数调用才会真正的开始下发请求），把请求拦截器的方法放到chn数组中dispatchRequest的前面，把响应拦截器的方法放到chn数组中dispatchRequest的后面，把请求拦截器和响应拦截器forEach将它们分unshift,push到chn数组中，为了保证它们的执行顺序，需要使用promise，以出队列的方式对chn数组中的方法挨个执行。</p><h3 id="30-说一说创建ajax过程？"><a href="#30-说一说创建ajax过程？" class="headerlink" title="30.说一说创建ajax过程？"></a>30.说一说创建ajax过程？</h3><p>（1）创建异步对象，即 XMLHttpRequest 对象。 </p><p>（2）使用 open 方法设置请求参数。open(method, url, async)。</p><p>​    参数解释：请求的方法、请求的 url、是否异步。第三个参数如果不写，则默认为 true。 </p><p>（3）发送请求：send()。 </p><p>（4）注册事件：注册 onreadystatechange 事件，状态改变时就会调用。如果要在数据完整请求回来的时候才调  用，我们需要手动写一些判断的逻辑。</p><p> （5）服务端响应，获取返回的数据。 </p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.ES6中扩展运算符的作用</title>
      <link href="/posts/1a75aa6a.html"/>
      <url>/posts/1a75aa6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="23-ES6中扩展运算符的作用"><a href="#23-ES6中扩展运算符的作用" class="headerlink" title="23.ES6中扩展运算符的作用"></a>23.ES6中扩展运算符的作用</h2><p>ES6中扩展运算符(…)的作用:将一个数组变为一个以空格分隔的参数序列</p><p>数组的复制 （浅拷贝）</p><p>数组的和合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> arr4=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> arr5=[...arr3,...arr4];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5)</span><br><span class="line">对象合并同理</span><br></pre></td></tr></table></figure><p>字符串改为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr=[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArr)</span><br></pre></td></tr></table></figure><h2 id="24-ES6中的rest参数"><a href="#24-ES6中的rest参数" class="headerlink" title="24.ES6中的rest参数"></a>24.ES6中的rest参数</h2><p>ES6中的rest参数，用于禁取函数多余的参数，形式:(…变量名)，把一个分离的参数序列整合为一个数组，值是一个数组</p><p>rest参数只能放在最后一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,...argus</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> argus)&#123;</span><br><span class="line">        total+=value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(total)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="25-ES6中对象和数组的解构"><a href="#25-ES6中对象和数组的解构" class="headerlink" title="25.ES6中对象和数组的解构"></a>25.ES6中对象和数组的解构</h2><p>解构：一种提取数据的模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的解构：以元素的位置为匹配条件</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c] =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line"><span class="keyword">const</span> [a,,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的解构:是以属性的名称为匹配条件</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:name,age&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">children</span>:&#123;<span class="attr">name1</span>:<span class="string">&quot;张三2&quot;</span>,<span class="attr">age</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,<span class="attr">children</span>:&#123;name1&#125;&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS中什么是DOM和BOM?</span></span><br><span class="line"><span class="comment">//DOM:document,文档对象类型，用来获取或者设置文档标签的属性</span></span><br><span class="line"><span class="comment">// JS可以通过DOM获取到有哪些标签，标签有哪些属性，内容有哪些</span></span><br><span class="line"><span class="comment">// DOM操作的对象是文档，所以DOM和浏览器没有关系，关注网页本身的内容</span></span><br><span class="line"><span class="comment">// BOM:browser object model，浏览器对象模型，提供独立于内容而与浏览器窗口进行交瓦的对象</span></span><br><span class="line"><span class="comment">// 管理窗口与窗口之间的通讯，核心对象是window --&gt; location(用于url相关的操作)、history(用于历史相关的操作)，navigator(包含了浏览器相关的信息)...</span></span><br><span class="line"><span class="comment">// BOM是控制浏览器行为的api,DOM是一个页面结构的api</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fetchAPI处理流式数据+打字机效果</title>
      <link href="/posts/14b8c4f6.html"/>
      <url>/posts/14b8c4f6.html</url>
      
        <content type="html"><![CDATA[<p>首先在对接api时 参数要设置stream: true,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">chatId</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">stream</span>: <span class="literal">true</span>,<span class="comment">//这里true返回流式数据</span></span><br><span class="line">  <span class="attr">detail</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">variables</span>: &#123;</span><br><span class="line">    <span class="attr">uid</span>: <span class="string">&#x27;sfdsdf&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhaoyunyao,&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">messages</span>: [&#123; <span class="attr">content</span>: text, <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span> &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>不要用axios发请求 不然处理不了流式数据 我这里使用fetch</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: headers,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> reader = response.<span class="property">body</span>.<span class="title function_">getReader</span>();</span><br><span class="line"><span class="comment">//创建了一个读取器对象，用于从响应主体中读取数据。response.body 是一个 ReadableStream 对象，通过调用 getReader() 方法可以获取一个读取器对象，以便逐步读取响应的内容。</span></span><br><span class="line"><span class="comment">// 循环读取响应流</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader.<span class="title function_">read</span>();</span><br><span class="line">  <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// 将ArrayBuffer转为文本</span></span><br><span class="line">  <span class="keyword">const</span> chunk = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">decode</span>(value);</span><br><span class="line">  <span class="comment">// 处理文本为json格式</span></span><br><span class="line">  <span class="keyword">const</span> jsonArr = chunk.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;data: &#x27;</span>).<span class="title function_">splice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; jsonArr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> json = jsonArr[index];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">parse</span>(json).<span class="property">choices</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> text = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json).<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ?? <span class="string">&#x27;&#x27;</span></span><br><span class="line">        content += text.<span class="title function_">replace</span>(<span class="regexp">/^\n/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        content = <span class="string">&quot;内部出了问题&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="comment">// 处理转json不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  obj.<span class="property">content</span> = content <span class="comment">//这里的content就是最终输出的文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再加一个打字机的光标 用html+css实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-item-details&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.content &#125;&#125;</span><br><span class="line">    /** 这里的span就是光标 **/</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cursor-blink&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;item.awaitReply&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再写上对应的css </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cursor-blink</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: blink <span class="number">1s</span> infinite <span class="built_in">steps</span>(<span class="number">1</span>, start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里设置动画blink*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> blink &#123;</span><br><span class="line"></span><br><span class="line">    <span class="number">0%</span>,</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#bbb</span>;</span><br><span class="line">        <span class="comment">/* not #aaa because it&#x27;s seem there is Google Chrome bug */</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过呢 但在传输过程中每次停顿后会跳出一串内容然后又停顿一会,阅读体验有些不流畅, 就像玩游戏时帧数低卡顿的感觉, 我们用一个队列让它逐字地展示出来,并且根据传输速度控制输出的速度</p><blockquote><ol><li>需要一个打字机队列</li><li>队列提供入队和出队（消费）功能</li><li>需要一个动态时间来控制文字输出</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打字机队列</span></span><br><span class="line"><span class="comment">// 添加队列</span></span><br><span class="line"><span class="title function_">addQueue</span>(<span class="params">str,obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">queue</span>.<span class="title function_">push</span>(...str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 消费队列</span></span><br><span class="line"><span class="title function_">consume</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">queue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = obj.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">    str &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">onConsume</span>(str,obj)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.<span class="property">isDone</span>) &#123;</span><br><span class="line">    obj.<span class="property">consuming</span> = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(obj.<span class="property">timmer</span>)</span><br><span class="line">    obj.<span class="property">awaitReply</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">scrollBottom</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 消费间隔</span></span><br><span class="line"><span class="title function_">time</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">1000</span> / obj.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> time &gt; <span class="number">100</span> ? <span class="number">100</span> : time</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 消费下一个</span></span><br><span class="line"><span class="title function_">next</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">consume</span>(obj)</span><br><span class="line">  obj.<span class="property">timmer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">consuming</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="variable language_">this</span>.<span class="title function_">time</span>(obj))</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">start</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">consuming</span> = <span class="literal">true</span></span><br><span class="line">  obj.<span class="property">isDone</span>=<span class="literal">false</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">next</span>(obj)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">done</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">isDone</span>=<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">onConsume</span>(<span class="params">str,obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">content</span> += str</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后附上完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">      <span class="title class_">AppId</span>: <span class="string">&quot;xx&quot;</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">readonly</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">messages</span>: [</span><br><span class="line">        &#123; <span class="attr">content</span>: <span class="string">&quot;您好！请问需要什么帮助呢？&quot;</span>, <span class="attr">role</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="attr">awaitReply</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">userImg</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">avatar</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">nickname</span>,</span><br><span class="line">      <span class="attr">awaitReply</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">timmer</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">obj</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">queue</span>: [],</span><br><span class="line">      <span class="attr">consuming</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">isDone</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> messageTextarea = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messageTextarea&#x27;</span>);</span><br><span class="line">    messageTextarea.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果按下的是回车键（Enter）</span></span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span> &amp;&amp; !event.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认的换行行为</span></span><br><span class="line">        <span class="comment">// 在这里可以添加发送消息的逻辑</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">send</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span> &amp;&amp; event.<span class="property">ctrlKey</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cursorPosition = messageTextarea.<span class="property">selectionStart</span>; <span class="comment">// 获取光标位置</span></span><br><span class="line">        <span class="keyword">const</span> textBeforeCursor = messageTextarea.<span class="property">value</span>.<span class="title function_">substring</span>(<span class="number">0</span>, cursorPosition); <span class="comment">// 获取光标前的文本</span></span><br><span class="line">        <span class="keyword">const</span> textAfterCursor = messageTextarea.<span class="property">value</span>.<span class="title function_">substring</span>(cursorPosition); <span class="comment">// 获取光标后的文本</span></span><br><span class="line">        messageTextarea.<span class="property">value</span> = textBeforeCursor + <span class="string">&#x27;\n&#x27;</span> + textAfterCursor; <span class="comment">// 在光标位置插入换行符</span></span><br><span class="line">        messageTextarea.<span class="property">selectionStart</span> = cursorPosition + <span class="number">1</span>; <span class="comment">// 设置光标位置为插入换行符后的位置</span></span><br><span class="line">        messageTextarea.<span class="property">selectionEnd</span> = cursorPosition + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 打字机队列</span></span><br><span class="line">    <span class="comment">// 添加队列</span></span><br><span class="line">    <span class="title function_">addQueue</span>(<span class="params">str, obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">queue</span>.<span class="title function_">push</span>(...str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 消费队列</span></span><br><span class="line">    <span class="title function_">consume</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.<span class="property">queue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = obj.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">        str &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">onConsume</span>(str, obj)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.<span class="property">isDone</span>) &#123;</span><br><span class="line">        obj.<span class="property">consuming</span> = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(obj.<span class="property">timmer</span>)</span><br><span class="line">        obj.<span class="property">awaitReply</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">scrollBottom</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 消费间隔</span></span><br><span class="line">    <span class="title function_">time</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> time = <span class="number">500</span> / obj.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">      <span class="keyword">return</span> time &gt; <span class="number">50</span> ? <span class="number">50</span> : time</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 消费下一个</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">consume</span>(obj)</span><br><span class="line">      obj.<span class="property">timmer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">consuming</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">next</span>(obj)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="variable language_">this</span>.<span class="title function_">time</span>(obj))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">start</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">consuming</span> = <span class="literal">true</span></span><br><span class="line">      obj.<span class="property">isDone</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>(obj)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">done</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">isDone</span> = <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onConsume</span>(<span class="params">str, obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">content</span> += str</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">text</span> === <span class="string">&quot;&quot;</span> || <span class="regexp">/^\s+$/</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">text</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;请输入内容&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> text = <span class="variable language_">this</span>.<span class="property">text</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">const</span> url = <span class="string">&#x27;https://api.fastgpt.in/api/v1/chat/completions&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(&#123; <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">content</span>: text &#125;);</span><br><span class="line">      <span class="keyword">let</span> obj = &#123; <span class="attr">content</span>: <span class="string">&quot;&quot;</span>, <span class="attr">role</span>: <span class="string">&#x27;assistant&#x27;</span>, <span class="attr">awaitReply</span>: <span class="literal">true</span>, <span class="attr">queue</span>: [], <span class="attr">consuming</span>: <span class="literal">false</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">timmer</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(obj);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">scrollBottom</span>()</span><br><span class="line">      <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="comment">// 这里可以设置请求参数</span></span><br><span class="line">        <span class="attr">chatId</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="attr">stream</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">detail</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">variables</span>: &#123;</span><br><span class="line">          <span class="attr">uid</span>: <span class="string">&#x27;sfdsdf&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;zhaoyunyao,&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">messages</span>: [&#123; <span class="attr">content</span>: text, <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span> &#125;]</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> headers = &#123;</span><br><span class="line">        <span class="comment">// 这里可以设置请求头</span></span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.key&#125;</span>`</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>`</span>, &#123;</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">          <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> reader = response.<span class="property">body</span>.<span class="title function_">getReader</span>();</span><br><span class="line">        <span class="comment">//let content = &quot;&quot;</span></span><br><span class="line">        <span class="comment">// 开始打字机队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>(obj)</span><br><span class="line">        <span class="comment">// 循环读取响应流</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader.<span class="title function_">read</span>();</span><br><span class="line">          <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">// 将ArrayBuffer转为文本</span></span><br><span class="line">          <span class="keyword">const</span> chunk = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">decode</span>(value);</span><br><span class="line">          <span class="comment">// 处理文本为json格式</span></span><br><span class="line">          <span class="keyword">const</span> jsonArr = chunk.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;data: &#x27;</span>).<span class="title function_">splice</span>(<span class="number">1</span>)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; jsonArr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            <span class="keyword">const</span> json = jsonArr[index];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">parse</span>(json).<span class="property">choices</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> text = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json).<span class="property">choices</span>[<span class="number">0</span>].<span class="property">delta</span>.<span class="property">content</span> ?? <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">addQueue</span>(text.<span class="title function_">replace</span>(<span class="regexp">/^\n/g</span>, <span class="string">&#x27;&#x27;</span>), obj)</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">addQueue</span>(<span class="string">&#x27;内部出了问题o(╥﹏╥)o&#x27;</span>, obj)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">              <span class="comment">// 处理转json不报错</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">scrollBottom</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求错误:&#x27;</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">done</span>(obj)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 滚到最底部</span></span><br><span class="line">    <span class="title function_">scrollBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> mainChat = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mainChat</span></span><br><span class="line">        mainChat.<span class="property">scrollTop</span> = mainChat.<span class="property">scrollHeight</span></span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.ES6中const定义的对象属性可以修改吗？</title>
      <link href="/posts/5d1f741e.html"/>
      <url>/posts/5d1f741e.html</url>
      
        <content type="html"><![CDATA[<h2 id="19-ES6中const定义的对象属性可以修改吗？"><a href="#19-ES6中const定义的对象属性可以修改吗？" class="headerlink" title="19.ES6中const定义的对象属性可以修改吗？"></a>19.ES6中const定义的对象属性可以修改吗？</h2><p>const定义后，当然可以修改对象中的属性的值</p><p>const保证并不是变量的值不能改动，而是变量指向内存地址不能改动</p><h2 id="20-ES6中let、const和var有哪些用法和区别？"><a href="#20-ES6中let、const和var有哪些用法和区别？" class="headerlink" title="20.ES6中let、const和var有哪些用法和区别？"></a>20.ES6中let、const和var有哪些用法和区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var</span>:</span><br><span class="line">使用<span class="keyword">var</span>声明的变量既是顶级变量(顶层对象(<span class="variable language_">window</span>对象)的属性)也是全局变量</span><br><span class="line">使用<span class="keyword">var</span>声明的变量存在变量提升的情况</span><br><span class="line">使用<span class="keyword">var</span>可以对一个变量进行多次声明，后面的声明会覆盖前面的变量声明</span><br><span class="line">在函数中再次使用<span class="keyword">var</span>声明这个变量的时候，这个变量就是局部的，如果不是用<span class="keyword">var</span>，那就全局的</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> :</span><br><span class="line"><span class="keyword">let</span>所声明变量只在<span class="keyword">let</span>命令所在的代码块中生效</span><br><span class="line"><span class="keyword">let</span>不存在变量提升</span><br><span class="line"><span class="keyword">let</span>不允许在相同的作用域下重复声明</span><br><span class="line"></span><br><span class="line"><span class="attr">const</span>:</span><br><span class="line"><span class="keyword">const</span>声明一个只读的常量，一旦声明，常量的值就不能改变</span><br><span class="line"><span class="keyword">const</span>一旦声明，就必须赋值</span><br><span class="line">除了以上的其他的都和<span class="keyword">let</span>一样的</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">变量提升:</span><br><span class="line"><span class="keyword">var</span>声明的变量存在变量提升，<span class="keyword">let</span>和<span class="keyword">const</span>不存在变量提升</span><br><span class="line">块级作用域:</span><br><span class="line"><span class="keyword">var</span>不存在块级作用域，<span class="keyword">let</span>和<span class="keyword">const</span>存在块级作用域，只在所在代码块生效</span><br><span class="line">重复声明:</span><br><span class="line"><span class="keyword">var</span>允许重复声明，<span class="keyword">let</span>和<span class="keyword">const</span>不允许在同一个作用域重复声明</span><br><span class="line">修改声明的变量:</span><br><span class="line"><span class="keyword">var</span>和<span class="keyword">let</span>可以改变声明的变量，<span class="keyword">const</span>，不可以，一旦声明，必须赋值，并且常量的值不能改变</span><br></pre></td></tr></table></figure><h2 id="21-JS中如何判断一个对象是空对象？"><a href="#21-JS中如何判断一个对象是空对象？" class="headerlink" title="21.JS中如何判断一个对象是空对象？"></a>21.JS中如何判断一个对象是空对象？</h2><p>使用JSON自带的.stringify方法来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)===<span class="string">&quot;&#123;&#125;&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用object.keys()来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))<span class="comment">//[name,age]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是一个空对象&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-如果在ES6中new一个箭头函数会怎么样？"><a href="#22-如果在ES6中new一个箭头函数会怎么样？" class="headerlink" title="22.如果在ES6中new一个箭头函数会怎么样？"></a>22.如果在ES6中new一个箭头函数会怎么样？</h2><p>会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new关键字的执行过程</span></span><br><span class="line"><span class="number">1.</span><span class="keyword">new</span>构造函数会在内存中创建一个空对象</span><br><span class="line"><span class="number">2.</span><span class="variable language_">this</span>就会指向刚才创建的那个空对象</span><br><span class="line"><span class="number">3.</span>执行构造函数中的代码，给空对象添加属性和方法</span><br><span class="line"><span class="number">4.</span>返回这个新的对象（所以构造函数中不需要<span class="keyword">return</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"> 箭头函数内的<span class="variable language_">this</span>是静态的，指向定义时所在的对象，而不是调用时，<span class="variable language_">this</span>指向不可以改变的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.你是如何在JS中进行隐式转换的？</title>
      <link href="/posts/2b5cd5a6.html"/>
      <url>/posts/2b5cd5a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="16-你是如何在JS中进行隐式转换的？"><a href="#16-你是如何在JS中进行隐式转换的？" class="headerlink" title="16.你是如何在JS中进行隐式转换的？"></a>16.你是如何在JS中进行隐式转换的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// + 操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串;其他情况下两边的变量都会被转换为数字。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="string">&quot;23&quot;</span>);<span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="literal">false</span>);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>+<span class="literal">false</span>);<span class="comment">//1false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>+<span class="literal">false</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -、*、/ 操作运算符会转换为数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">25</span>-<span class="string">&#x27;23&#x27;</span>);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>*<span class="literal">false</span>);<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="string">&#x27;aa&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于==操作符来说</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>==<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span>==<span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span>==<span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于 &lt; 和 &gt; 比较符，按照字母的排列顺序来比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>&gt;<span class="string">&#x27;d&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;de&#x27;</span>&gt;<span class="string">&#x27;fg&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他情况下，转换为数字再比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>&lt;<span class="number">13</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>&lt;-<span class="number">1</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a&gt;<span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">valueOf</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(a.<span class="title function_">toString</span>()));</span><br></pre></td></tr></table></figure><h2 id="17-你是如何理解JS中深拷贝和浅拷贝的？"><a href="#17-你是如何理解JS中深拷贝和浅拷贝的？" class="headerlink" title="17.你是如何理解JS中深拷贝和浅拷贝的？"></a>17.你是如何理解JS中深拷贝和浅拷贝的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要在于复制出来的新对象和原来的对象是否会互相影响</span></span><br><span class="line"><span class="comment">// 浅拷贝:仅仅是指向被复制的内存地址，如果原地址发生改变，那么浅拷贝出来的对象也会相应的改变</span></span><br><span class="line"><span class="comment">// 新旧对象共享内存，修改其中一个，另一个也会受到影响</span></span><br><span class="line"><span class="comment">// 深拷贝:在内存中开辟一块新的地址用于存放复制的对象</span></span><br><span class="line"><span class="comment">// 新旧对象不会共享内存，修改其中的一个不会影响另一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝 通过‘=’直接赋值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=obj;</span><br><span class="line"><span class="comment">//而后改变obj1中的属性值，obj中的也会变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝 Object.assign()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1= <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj)</span><br><span class="line">obj1.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 通过JSON对象来实现</span></span><br><span class="line"><span class="comment">// JSON.stringify:将js的值(对象或者数组)转为一个JSON字符串</span></span><br><span class="line"><span class="comment">// JSON.parse:用来解析JSON字符串，转换为Object类型</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">obj1.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 通过扩展运算符实现深拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1= &#123;...obj,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure><h2 id="18-你是怎么理解JS中-操作符的强制类型转换规则的？"><a href="#18-你是怎么理解JS中-操作符的强制类型转换规则的？" class="headerlink" title="18.你是怎么理解JS中==操作符的强制类型转换规则的？"></a>18.你是怎么理解JS中==操作符的强制类型转换规则的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS中==操作符的强制类型转换规定</span></span><br><span class="line"><span class="comment">//首先判断两者的类型是否相同，如果不相同会进行类型转换，相同的话就比较大小</span></span><br><span class="line"><span class="comment">// 转换情况:</span></span><br><span class="line"><span class="comment">// 1、字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较大小</span></span><br><span class="line"><span class="comment">// 2、其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</span></span><br><span class="line"><span class="comment">// 3、nu11和undefined之间的相等比较，结果为真，其他值和它们进行比较都返回假值</span></span><br><span class="line"><span class="comment">// 4、对象和非对象之间的相等比较，会将对象先转为基本数据类型再进行判断</span></span><br><span class="line"><span class="comment">// 5、如果两个操作值都是对象，则比较它们是不是指向同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回true,否则返回false</span></span><br></pre></td></tr></table></figure><p><em>你想成为一个成功的人，怎么能不累</em> </p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.JS中有哪几种判断数组的方法？</title>
      <link href="/posts/2d646d77.html"/>
      <url>/posts/2d646d77.html</url>
      
        <content type="html"><![CDATA[<h2 id="13-JS中有哪几种判断数组的方法？"><a href="#13-JS中有哪几种判断数组的方法？" class="headerlink" title="13.JS中有哪几种判断数组的方法？"></a>13.JS中有哪几种判断数组的方法？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js中判断数组的方法</span></span><br><span class="line"><span class="comment">//通过Object.prototype.toString.call()做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]))&gt;&gt;&gt; [object <span class="title class_">Array</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>))&gt;&gt;&gt; <span class="title class_">Array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>)===<span class="string">&#x27;Array&#x27;</span>)&gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过原型链做判断</span></span><br><span class="line"><span class="comment">//对象的隐式原型等于构造函数的显式原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">__proto__</span>===<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>); &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ES6的Array.isArray()做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([])); &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过instanceof做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Array.prototype.isPrototypeOf做判断,判断Array是否在传入内容的原型链上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>([])) &gt;&gt;&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="14-JS中“-”操作符什么时候用于字符串拼接？"><a href="#14-JS中“-”操作符什么时候用于字符串拼接？" class="headerlink" title="14.JS中“+”操作符什么时候用于字符串拼接？"></a>14.JS中“+”操作符什么时候用于字符串拼接？</h2><p>如果 + 操作符其中一个操作数是字符串(或者通过ToPrimitive操作之后最终得到的字符串),则执行字符串的拼接，否则执行数字加法</p><h2 id="15-JS中Object-is-和-、-有什么区别？"><a href="#15-JS中Object-is-和-、-有什么区别？" class="headerlink" title="15.JS中Object.is()和===、==有什么区别？"></a>15.JS中Object.is()和===、==有什么区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Js中object.is()与比较操作符 ”===“(严格相等运算符)和”==“(相等运算符)的区别</span></span><br><span class="line"><span class="comment">// 双等号(==):如果两边的类型不一致，进行强制类型转换，然后再去进行比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="string">&#x27;1&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三等号(===):如果两边的类型不一致，不会进行强制类型转换，直接返回false。等型等值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>===<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>===<span class="string">&#x27;1&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// object.is() : 用来判断两个值是否严格相等。处理一些特殊的情况，-0和+0不再相等，两个NaN是相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">is</span>(+<span class="number">0</span>，-<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.JS数据类型检测的方式有哪些？</title>
      <link href="/posts/4b968259.html"/>
      <url>/posts/4b968259.html</url>
      
        <content type="html"><![CDATA[<h2 id="10-JS数据类型检测的方式有哪些？"><a href="#10-JS数据类型检测的方式有哪些？" class="headerlink" title="10.JS数据类型检测的方式有哪些？"></a>10.JS数据类型检测的方式有哪些？</h2><ol><li><p>typeof（检测数据类型的运算符）</p></li><li><p>instanceof（检测某一个实例是否属于这个类）</p><blockquote><p>可以正确判断对象的类型，不可以判断基本数据类型，内部运行机制，判断在它的原型链上能否找到这个类型的原型。</p></blockquote></li><li><p>constructor(检测实例和类的关系，从而检测数据类型)，引用原来构造该对象的函数</p><blockquote><p>除了undefined和null，其他类型都能检测正确</p></blockquote></li><li><p>Object.prototype.toString.call() (检测数据类型)</p><blockquote><p>都能检测</p></blockquote></li></ol><h2 id="11-JS中instanceof操作符的实现原理以及实现方法"><a href="#11-JS中instanceof操作符的实现原理以及实现方法" class="headerlink" title="11.JS中instanceof操作符的实现原理以及实现方法"></a>11.JS中instanceof操作符的实现原理以及实现方法</h2><p>instanceof操作符用于判断构造函数的prototype属性是否出现在对象的原型链中的任何位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); &gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手写instanceof实现原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instance</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line"><span class="comment">//获取对象的原型</span></span><br><span class="line"><span class="keyword">let</span> proto=<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left)；</span><br><span class="line"><span class="comment">//获取构造函数的prototype属性</span></span><br><span class="line"><span class="keyword">let</span> prototype=right.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!proto)&#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"><span class="keyword">if</span>(proto===prototype)&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"><span class="comment">//如果没有找到，就继续在原型链上找</span></span><br><span class="line">proto=<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-JS中typeof-NaN的结果是什么？"><a href="#12-JS中typeof-NaN的结果是什么？" class="headerlink" title="12.JS中typeof NaN的结果是什么？"></a>12.JS中typeof NaN的结果是什么？</h2><p>NaN(not a number)不是一个数字，表示是否属于number类型的一种状态:是或否，不是确切的值</p><p>Js中number数据类型除了浮点型和整数型，还有一个特殊值NaN</p><p><code>console.log(typeof NaN)</code>     &gt;&gt;&gt;number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NaN,表达式中存在不可转化的变量，返回了无效的结果，不是返回确切的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//NaN不等于本身,不是确切的值,代表一个范围</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（<span class="title class_">NaN</span>==<span class="title class_">NaN</span>）<span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas网页电子签名实现方式</title>
      <link href="/posts/14b8c4f5.html"/>
      <url>/posts/14b8c4f5.html</url>
      
        <content type="html"><![CDATA[<p>直接上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>签名<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">canvas</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* cursor: url(&#x27;./pan.cur&#x27;),auto; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持Canva，请升级浏览器</span><br><span class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交签名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空签名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cvs = $(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取画笔工具对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ctx = cvs.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置线条的粗细</span></span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineWidth</span>=<span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置线端、折角样式</span></span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineCap</span>=<span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineJoin</span>=<span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    cvs.<span class="property">onmousedown</span>=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开始绘制名字</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将画笔起点设置为当前位置</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(e.<span class="property">offsetX</span>,e.<span class="property">offsetY</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      cvs.<span class="property">onmousemove</span>=<span class="function"><span class="params">ev</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 画笔跟着鼠标绘制线</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(ev.<span class="property">offsetX</span>,ev.<span class="property">offsetY</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 上色</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ctx.strokeStyle=&#x27;#f00&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    cvs.<span class="property">onmouseup</span>=<span class="function">()=&gt;</span>cvs.<span class="property">onmousemove</span>=<span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.clear&quot;</span>).<span class="property">onclick</span>=<span class="function">()=&gt;</span>ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,cvs.<span class="property">width</span>,cvs.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.submit&quot;</span>).<span class="property">onclick</span>=<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 借助a标签实现下载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> aEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将canvas转换为base64的图片格式路径，赋值给a标签的链接</span></span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="property">href</span> = cvs.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/webp&#x27;</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="property">download</span>=<span class="string">&#x27;签名&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">appendChild</span>(aEl).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">select</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(select);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://img2.imgtp.com/2024/05/08/bYP9oJjc.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 技术杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.你能解释下作用域和作用域链吗？</title>
      <link href="/posts/6b729202.html"/>
      <url>/posts/6b729202.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-作用域和作用域链"><a href="#5-作用域和作用域链" class="headerlink" title="5.作用域和作用域链"></a>5.作用域和作用域链</h2><p>作用域：就是一个规则；用来查找变量</p><p>全局作用域</p><p>局部作用域</p><p>作用域链：多层嵌套作用域产生作用域链，会向外查找</p><p>面试题1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a) &gt;&gt;&gt; <span class="number">2</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a=<span class="number">4</span></span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>面试题2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a) &gt;&gt;&gt; <span class="literal">undefined</span> 函数内没有，向上一级查找到a，但是没有赋值</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> a</span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">        a=<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> fn=<span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h2 id="6-你能讲清VUE中diff算法的原理吗？"><a href="#6-你能讲清VUE中diff算法的原理吗？" class="headerlink" title="6.你能讲清VUE中diff算法的原理吗？"></a>6.你能讲清VUE中diff算法的原理吗？</h2><p>vue2：递归+双指针</p><blockquote><p>1.判断是不是同一个元素，不是同一个元素，直接替换</p><p>2.是同一个元素 &gt;&gt; 比对属性 &gt;&gt; 比对儿子（1老的有儿子，新的没儿子 2新的有儿子老的没有儿子 3是文本的情况（直接创建插入/替换） 4都有children(双指针：头头，尾尾，头尾，尾头)=&gt; 对比查找 继续复用）</p></blockquote><p>vue3：采用了最长递增子序列 优化乱序的情况</p><p>补充：vue中为什么需要虚拟dom</p><ol><li>如果我们直接操作真实dom 性能低</li><li>vnode就是一个js对象，也可以理解为 它是真实dom的抽象</li><li>减少对真实dom的操作，从而提高性能</li></ol><h2 id="7-说说你对Vue2和Vue3响应式的理解"><a href="#7-说说你对Vue2和Vue3响应式的理解" class="headerlink" title="7.说说你对Vue2和Vue3响应式的理解"></a>7.说说你对Vue2和Vue3响应式的理解</h2><p>响应式：就是数据改变，对应的视图也会改变</p><p>vue2：是通过Object.defineProperty()，如果是多层次就要递归</p><p>vue3：采用proxy，如果是多层次数据，用户不使用，就不会递归</p><h2 id="8-在vue2中你是如何检测数组变化的"><a href="#8-在vue2中你是如何检测数组变化的" class="headerlink" title="8.在vue2中你是如何检测数组变化的"></a>8.在vue2中你是如何检测数组变化的</h2><p>vue2中没有使用defineProperty对这个数组的每一项进行拦截，而是选择重写数组{push,shift…}方法</p><p>数组中如果是对象的数据类型 也继续递归处理 [{},{}]</p><p>数组的索引和长度变化是无法监控的</p><h2 id="9-nextTick是在哪里使用？你能说说它的原理吗？"><a href="#9-nextTick是在哪里使用？你能说说它的原理吗？" class="headerlink" title="9.nextTick是在哪里使用？你能说说它的原理吗？"></a>9.nextTick是在哪里使用？你能说说它的原理吗？</h2><p>vue中的数据更新是异步的，使用nextTick方法可以保证用户定义的逻辑在更新之后执行</p><p>业务：dom更新完毕之后，需要做一些处理</p><p>this.$nextTick(()=&gt;{</p><p>})</p><p>原理：使用nextTick中的回调函数，在下一次dom更新循环结束之后执行回调</p><p>用于获取更新后的dom</p><hr><p>意外：markdown语法还能画流程图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st =&gt;start: 开始</span><br><span class="line">op =&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e =&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt; op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.什么是闭包？闭包是如何使用的？</title>
      <link href="/posts/71a30201.html"/>
      <url>/posts/71a30201.html</url>
      
        <content type="html"><![CDATA[<h2 id="2-什么是闭包？闭包是如何使用的？"><a href="#2-什么是闭包？闭包是如何使用的？" class="headerlink" title="2.什么是闭包？闭包是如何使用的？"></a>2.什么是闭包？闭包是如何使用的？</h2><p>概念：</p><ol><li>函数中返回一个函数 </li><li>函数的声明的作用域和函数使用的作用域不同</li></ol><p>用途：</p><ol><li><p>获取私有作用域中的变量</p></li><li><p>这些变量可以保存到内存中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">        n++</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getN = <span class="title function_">a</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getN</span>()) &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getN</span>()) &gt;&gt;&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><p>面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)&gt;&gt;&gt; <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fnArr[<span class="number">3</span>]())&gt;&gt;&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//闭包</span></span><br><span class="line">        <span class="keyword">let</span> j= i </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fnArr[<span class="number">3</span>]()) &gt;&gt;&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="3-能说说你是怎么实现防抖的吗？"><a href="#3-能说说你是怎么实现防抖的吗？" class="headerlink" title="3.能说说你是怎么实现防抖的吗？"></a>3.能说说你是怎么实现防抖的吗？</h2><p>防抖：用户点击 &gt;&gt; 多次点击 &gt;&gt; 浪费性能</p><p>防抖：只有最后一次点击后才触发一次</p><p>节流：固定时间只触发一次</p><p>1.定时器 2.高阶函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户点击发送请求&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高阶函数 1.函数的返回值是一个函数 2.它的参数是一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dalay</span>(<span class="params">cb,time</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer<span class="comment">//这个变量会保存在内存，只会创建一次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">cb</span>()<span class="comment">//处理业务逻辑</span></span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">dalay</span>(change,<span class="number">2000</span>))</span><br></pre></td></tr></table></figure><h2 id="4-请说明Vue中key的作用和原理，谈谈你对它的理解"><a href="#4-请说明Vue中key的作用和原理，谈谈你对它的理解" class="headerlink" title="4.请说明Vue中key的作用和原理，谈谈你对它的理解"></a>4.请说明Vue中key的作用和原理，谈谈你对它的理解</h2><ul><li>vue中在patch过程中，通过key可以判断两个vnode节点是否相同（可以复用老的节点）</li><li>没有key会导致出错，性能会有极大的损耗</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.JS有哪些数据类型？它们有什么区别？</title>
      <link href="/posts/71a30200.html"/>
      <url>/posts/71a30200.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-javaScript有哪些数据类型？它们有什么区别？"><a href="#1-javaScript有哪些数据类型？它们有什么区别？" class="headerlink" title="1.javaScript有哪些数据类型？它们有什么区别？"></a>1.javaScript有哪些数据类型？它们有什么区别？</h2><p>总共有7种<br>基本数据类型：string/number/boolean/null/undefined/symbol(代表创建后独一无二并且不可变的数据类型)<br>引用数据类型：Object</p><p>区别：</p><ol><li><p>声明变量时的存储分配</p><p>基本数据类型存储在栈中，var a=10<br>引用数据类型存储在堆中，var arr=[1,2,3,4,5,…]</p></li><li><p>不同的内存分配机制也带来了不同的访问机制</p><p>不可以直接访问堆内存空间的位置以及直接操作堆内存空间，只能操作对象在栈内存中引用地址</p><p>基本数据类型直接访问到，引用数据类型访问引用地址，根据引用地址找到堆中实体</p></li><li><p>复制变量时的不同</p><p>基本数据类型:var a=1,var b=a,将原始值的副本赋值新的变量 -传值</p><p>引用数据类型:var obj={name:’张三’},var obj1=obj,将引用地址赋值给新的变量 -传址</p></li></ol><p><img src="https://img2.imgtp.com/2024/05/05/cFbxYL8B.png" alt="案例图片"></p><hr><h3 id="基本数据类型中null和undefined的区别以及应用"><a href="#基本数据类型中null和undefined的区别以及应用" class="headerlink" title="基本数据类型中null和undefined的区别以及应用"></a>基本数据类型中null和undefined的区别以及应用</h3><p>都是代表没有值<br>null表示“没有对象”，该处不应该有值</p><p>undefined表示“缺少值”，该处应该有值，但是还没有定义</p><p>转为数值也不同，null转为数值为0，undefined转为数值NaN(不是一个数字)<br>console.log(Number(nul1));》》》0</p><p>console.log(Number(undefined));》》》NaN</p><p>什么时候会有null：</p><ol><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ol><p>什么时候会出现undefined：</p><ol><li>变量被声明了。但是没有赋值，就等于undefined</li><li>调用函数时，应该提供的参数没有提供，该参数就等于undefined</li><li>对象没有赋值的属性，该属性的值为undefined</li><li>函数没有返回值时，默认返回undefined</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试hexo标签</title>
      <link href="/posts/7c2466b0.html"/>
      <url>/posts/7c2466b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮 Button"></a>按钮 Button</h2><a class="btn-beautify " href="#"   title="#"><span>#</span></a><a class="btn-beautify " href="#"   title="#"><i class="outline"></i><span>#</span></a><a class="btn-beautify block larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify block center larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify block right blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><div class\="btn-center"\>  <a class="btn-beautify larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify pink larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify red larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify purple larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify orange larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify green larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  </div\><div class\="btn-center"\>  <a class="btn-beautify outline larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline pink larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline red larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline purple larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline orange larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline green larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  </div><hr><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><u>文本内容</u>  <emp>文本内容</emp>  <wavy>文本内容</wavy>  <del>文本内容</del>  <kbd>文本内容</kbd>  <psw>文本内容</psw>  <mark class="hl-label red">文本内容</mark>   <span class='nota' data-nota='悬停显示的注解内容'>注释词汇</span><span class='p 样式参数(参数以空格划分)'>文本内容</span><span class='p center logo large'>康纳百川</span>  <span class='p center small'>康纳百川</span><hr><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><p class='p 样式参数(参数以空格划分)'>文本内容</p><p class='p center logo large'>tao's Blog</p>  <p class='p center small'>tao's Blog</p><hr><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><p><code>&#123;% tip \[参数，可选\] %&#125;文本内容&#123;% endtip %&#125;</code></p><ul><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持 fontawesome。</li></ul><div class="tip "><p>默认情况</p></div>  <div class="tip success"><p>success</p></div>  <div class="tip error"><p>error</p></div>  <div class="tip warning"><p>warning</p></div>  <div class="tip bolt"><p>bolt</p></div>  <div class="tip ban"><p>ban</p></div>  <div class="tip home"><p>home</p></div>  <div class="tip sync"><p>sync</p></div>  <div class="tip cogs"><p>cogs</p></div>  <div class="tip key"><p>key</p></div>  <div class="tip bell"><p>bell</p></div>  <div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><hr><h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><p><code>&#123;% tip \[参数，可选\] %&#125;文本内容&#123;% endtip %&#125;</code></p><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div>  <div class="tip ban faa-flash animated"><p>ban</p></div><p>2.调整动画速度</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div>  <div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><p>3.On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div>  <div class="tip ban faa-flash animated-hover"><p>ban</p></div><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p><p class\="faa-horizontal"\>warning&lt;/p></p></div>  <div class="tip ban faa-parent animated-hover"><p><p class\="faa-flash"\>ban&lt;/p></p></div><hr><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br><span class="line">*   颜色: red,yellow,green,cyan,blue,gray</span><br><span class="line">*   选中状态: checked</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div>  <div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 [markdown](<a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a>) 语法</p>            </div>  <div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div>  <div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div>  <div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div>  <div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div>  <div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><hr><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br><span class="line">*   样式: plus, minus, times</span><br><span class="line">*   颜色: red,yellow,green,cyan,blue,gray</span><br><span class="line">*   选中状态: checked</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div>  <div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 [markdown](<a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a>) 语法</p>            </div>  <div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div>  <div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div>  <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div>  <div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div>  <div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div>  <div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div>  <div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div>  <div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><hr><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;  </span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;  </span><br><span class="line">正文内容  </span><br><span class="line">&#123;% endtimenode %&#125;  </span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;  </span><br><span class="line">正文内容  </span><br><span class="line">&#123;% endtimenode %&#125;  </span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><div class="tag link"><a class="link-card" title="标题" href="https://www.baidu.com"><div class="left"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="right"><p class="text">标题</p><p class="url">https://www.baidu.com</p></div></a></div><hr><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;  </span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;  </span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;  </span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><div class="site-card-group">  <a class="site-card" href="https://www.baidu.com"><div class="img"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="info"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/><span class="title">标题1</span><span class="desc">描述（可选）</span></div></a>  <a class="site-card" href="https://www.baidu.com"><div class="img"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="info"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/><span class="title">标题2</span><span class="desc">描述（可选）</span></div></a>  </div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage https://i.imgtg.com/2022/11/21/tCRfB.jpg, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><img no-lazy class="inline" src="https://i.imgtg.com/2022/11/21/tCRfB.jpg" style="height:100px;"/><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br><span class="line">*   图片宽度高度：width=300px, height=32px</span><br><span class="line">*   图片描述：alt=图片描述（butterfly 需要在主题配置文件中开启图片描述）</span><br><span class="line">*   占位背景色：bg=#f2f2f2</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg" style="background:#f2f2f2"><img class="img" src="https://i.imgtg.com/2022/11/21/tCRfB.jpg" alt="草莓" style="width:200px;height:200px;"/></div><span class="image-caption">草莓</span></div><hr><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><p><code>&#123;% audio 音频链接 %&#125;</code></p><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line">*   对其方向：left, center, right</span><br><span class="line">*   列数：逗号后面直接写列数，支持 1 ～ 4 列。</span><br><span class="line">*   100%宽度</span><br></pre></td></tr></table></figure><div class="video"><video controls preload><source src='https://baikevideo.cdn.bcebos.com/media/mda-O0F30U7ehu4iIlST/d2c61d5f04b6ea36c3cd8d07b940f228.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><hr><h2 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.gallerygroup 相册图库</span><br><span class="line">&lt;div class\=&quot;gallery-group-main&quot;\&gt;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&lt;/div\&gt;</span><br><span class="line">2.gallery 相册</span><br><span class="line">&#123;% gallery %&#125;  </span><br><span class="line">markdown 图片格式  </span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">11</div>  <p>111</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">22</div>  <p>222</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">33</div>  <p>333</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <hr><h2 id="隐藏折叠-tag-hide"><a href="#隐藏折叠-tag-hide" class="headerlink" title="隐藏折叠 tag-hide"></a>隐藏折叠 tag-hide</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline 描述,按钮颜色,字体颜色 %&#125;  </span><br><span class="line">&#123;% hideInline 描述 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% hideBlock 描述 %&#125;  </span><br><span class="line">  </span><br><span class="line">......  </span><br><span class="line">  </span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% hideToggle 描述 %&#125;  </span><br><span class="line">  </span><br><span class="line">......  </span><br><span class="line">  </span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><span class="hide-inline"><button type="button" class="hide-button" style="background-color: red;">green  </button><span class="hide-content">描述1</span></span>  <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">描述2</span></span><div class="hide-block"><button type="button" class="hide-button" style="">描述3    </button><div class="hide-content"><p>……  </p></div></div><details class="toggle" ><summary class="toggle-button" style="">描述4</summary><div class="toggle-content"><p>……  </p></div></details>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一假期开始了</title>
      <link href="/posts/1465c773.html"/>
      <url>/posts/1465c773.html</url>
      
        <content type="html"><![CDATA[<p>做完今天工作量 就润了，首先先看一下效果。</p><img no-lazy class="inline" src="https://img2.imgtp.com/2024/04/29/CF3ayoEm.png" style="height:1.5em"/><img no-lazy class="inline" src="https://img2.imgtp.com/2024/04/29/J5fnp2wI.png" style="height:1.5em"/><hr><p>虽然很多原生css+js都不记得了，但是借助gpt的帮助，还是顺利做出设计图效果</p><p>不得不说从gpt身上学到了很多</p><hr><p>以下附上笔记 懂得都懂</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">494px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 平滑过渡效果 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">object-fit</span>: cover;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 保持图片宽高比，同时覆盖整个容器 */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">32%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .image-wrapper:not(:hover) img &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      transform: scale(0.9);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125; */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hover-effect</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">32%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide-overflow</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*  溢出用省略号显示 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 作为弹性伸缩盒子模型显示。 */</span></span></span><br><span class="line"><span class="language-css">      -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 设置伸缩盒子的子元素排列方式：从上到下垂直排列 */</span></span></span><br><span class="line"><span class="language-css">      -webkit-line-clamp: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 显示的行数 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 黑色半透明背景 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 初始状态透明 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 平滑过渡效果 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 确保点击事件可以穿透到图片上 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-class">.active</span> <span class="selector-class">.overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 激活状态下显示蒙版 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- background: linear-gradient(to right, rgba(20, 72, 141,.6), rgba(20, 72, 141,.1)); --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>石臼湖特大桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span></span><br><span class="line">        结构健康监测系统升级改造项目<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>南京市城市生命线<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>一期建设试点项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>司马港桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>G204如海河大桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-5.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>双桥门立交<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的.image-wrapper元素  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageWrappers = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.image-wrapper&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.image-container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给第一个.image-wrapper添加active类  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    imageWrappers.<span class="title function_">forEach</span>(<span class="function"><span class="params">container</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移除所有容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        imageWrappers.<span class="title function_">forEach</span>(<span class="function"><span class="params">c</span> =&gt;</span> c.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加当前容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移除当前容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给第一个.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听每个.image-wrapper的mouseenter事件  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">wrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      wrapper.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 给当前鼠标进入的.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清除所有.image-wrapper上的hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">        imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">otherWrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          otherWrapper.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听每个.image-wrapper的mouseleave事件（如果需要的话）  </span></span></span><br><span class="line"><span class="language-javascript">      wrapper.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在鼠标离开时清除hover-effect类，如果需要的话  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    imageContainer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清除所有.image-wrapper上的hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">      imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">wrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        wrapper.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 给第一个.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">      imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没想到就就已经到家了</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一倒计时 3</title>
      <link href="/posts/8cf5ddd9.html"/>
      <url>/posts/8cf5ddd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="111"><a href="#111" class="headerlink" title="111"></a>111</h1><p>快速做完工作，能完善网站了 还是挺有意思的</p><p>从0开始 空杯心态 边学边记</p><p>记录，让生活留下痕迹。</p><p>种一棵树最好的时间是十年前,其次是现在。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建成 开始记录</title>
      <link href="/posts/da03094c.html"/>
      <url>/posts/da03094c.html</url>
      
        <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><ul><li>ah</li><li>ahh</li><li>ahhh</li><li>ahhhh</li><li>ahhhhh</li><li>ahhhhhh</li></ul><p>脚手架创建vue2项目：create vue<br>脚手架创建vue3项目：npm init vue@latest</p><p> <img src="https://img2.imgtp.com/2024/05/08/7g6Yqcbp.png" alt="111"></p><p> <img src="https://img1.baidu.com/it/u=2850108062,2186206047&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=197" alt="text"></p><p> 人生属实处处是围城</p><p> 很难有不焦虑的，不妨做个快乐的人吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"陶同学's Blog","short_name":"陶同学","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[@font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;}/* @font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;} */div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}/* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 10px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 4rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden;}.pace-inactive .pace-progress {  opacity: 0;  transition: 0.3s ease-in;}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);  animation: gradient 1.5s ease infinite;  background-size: 200%;}.pace.pace-inactive {  opacity: 0;  transition: 0.3s;  top: -8px;}@keyframes gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "w(ﾟДﾟ)w 不要走！再看看嘛！";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "♪(^∇^*)欢迎回来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: $button-hover-color;}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(      circle at 45% 92%,      rgba(3, 16, 50, 0.4) 0.04rem,      transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at        65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: "";  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(            --coin-rotation-multiplier          ) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(      to bottom,      #fcfaf9 44%,      transparent 44%,      transparent 65%,      #fcfaf9 65%,      #fcfaf9 71%,      #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9        47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent        72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent        35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent        calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(              --shine-bg-multiplier            ) + 50%));  content: "";  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))    rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: "";  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var grt = new Date("04/27/2024 00:00:00");  now.setTime(now.getTime() + 250);  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9      // ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      // : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),      // ? `<img class='boardsign' src='/source/img/备用.png' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      ? `<img class='boardsign' src='https://img2.imgtp.com/2024/04/27/uIpgfMIE.png' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `<img class='boardsign' src='https://img2.imgtp.com/2024/04/27/uIpgfMIE.png' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
  
</search>
