<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陶同学&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/85a0cbb73a82a62a3f9fc11c5e6f5f5c</icon>
  <subtitle>hhh</subtitle>
  <link href="https://daixueshengt.github.io/atom.xml" rel="self"/>
  
  <link href="https://daixueshengt.github.io/"/>
  <updated>2024-08-14T14:51:02.509Z</updated>
  <id>https://daixueshengt.github.io/</id>
  
  <author>
    <name>陶同学</name>
    <email>2568510567@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://daixueshengt.github.io/posts/110fa4c6.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c6.html</id>
    <published>2024-07-16T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vuex概述"><a href="#Vuex概述" class="headerlink" title="Vuex概述"></a>Vuex概述</h3><p>Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享</p><p>使用Vuex管理数据的好处：<br>A.能够在vuex中集中管理共享的数据，便于开发和后期进行维护<br>B.能够高效的实现组件之间的数据共享，提高开发效率<br>C.存储在vuex中的数据是响应式的，当数据发生改变时，页面中的数据也会同步更新</p><h3 id="使用Vuex完成计数器案例"><a href="#使用Vuex完成计数器案例" class="headerlink" title="使用Vuex完成计数器案例"></a>使用Vuex完成计数器案例</h3><p>打开创建的vuex项目，找到src目录中的App.vue组件，将代码重新编写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-addition&gt;&lt;/my-addition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;----------------------------------------&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;my-subtraction&gt;&lt;/my-subtraction&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Addition from &#x27;./components/Addition.vue&#x27;</span><br><span class="line">import Subtraction from &#x27;./components/Subtraction.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x27;my-subtraction&#x27;: Subtraction,</span><br><span class="line">    &#x27;my-addition&#x27;: Addition</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在components文件夹中创建Addition.vue组件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;/h3&gt;</span><br><span class="line">        &lt;button&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在components文件夹中创建Subtraction.vue组件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;当前最新的count值为：&lt;/h3&gt;</span><br><span class="line">        &lt;button&gt;-1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>最后在项目根目录(与src平级)中创建 .prettierrc 文件，编写代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;semi&quot;:false,</span><br><span class="line">    &quot;singleQuote&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vuex中的核心特性"><a href="#Vuex中的核心特性" class="headerlink" title="Vuex中的核心特性"></a>Vuex中的核心特性</h3><h4 id="A-State"><a href="#A-State" class="headerlink" title="A.State"></a>A.State</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储</span><br><span class="line">例如，打开项目中的store.js文件，在State对象中可以添加我们要共享的数据，如：count:0</span><br><span class="line"></span><br><span class="line">在组件中访问State的方式：</span><br><span class="line">1).this.$store.state.全局数据名称  如：this.$store.state.count</span><br><span class="line">2).先按需导入mapState函数： import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">然后数据映射为计算属性： computed:&#123; ...mapState([&#x27;全局数据名称&#x27;]) &#125;</span><br></pre></td></tr></table></figure><h4 id="B-Mutation"><a href="#B-Mutation" class="headerlink" title="B.Mutation"></a>B.Mutation</h4><p>Mutation用于修改变更$store中的数据<br>使用方式：<br>打开store.js文件，在mutations中添加代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    add(state,step)&#123;</span><br><span class="line">      //第一个形参永远都是state也就是$state对象</span><br><span class="line">      //第二个形参是调用add时传递的参数</span><br><span class="line">      state.count+=step;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后在Addition.vue中给按钮添加事件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;Add&quot;&gt;+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  Add()&#123;</span><br><span class="line">    //使用commit函数调用mutations中的对应函数，</span><br><span class="line">    //第一个参数就是我们要调用的mutations中的函数名</span><br><span class="line">    //第二个参数就是传递给add函数的参数</span><br><span class="line">    this.$store.commit(&#x27;add&#x27;,10)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用mutations的第二种方式：<br>import { mapMutations } from ‘vuex’</p><p>methods:{<br>  …mapMutations([‘add’])<br>}<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-Action"><a href="#C-Action" class="headerlink" title="C.Action"></a>C.Action</h4><p>在mutations中不能编写异步的代码，会导致vue调试器的显示出错。<br>在vuex中我们可以使用Action来执行异步操作。<br>操作步骤如下：<br>打开store.js文件，修改Action，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">addAsync</span>(<span class="params">context,step</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,step);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Addition.vue中给按钮添加事件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;AddAsync&quot;&gt;...+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  AddAsync()&#123;</span><br><span class="line">    this.$store.dispatch(&#x27;addAsync&#x27;,5)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式：<br>import { mapActions } from ‘vuex’</p><p>methods:{<br>  …mapMutations([‘subAsync’])<br>}<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations,mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//获得mapMutations映射的sub函数</span></span><br><span class="line">      ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;sub&#x27;</span>]),</span><br><span class="line">      <span class="comment">//当点击按钮时触发Sub函数</span></span><br><span class="line">      <span class="title class_">Sub</span>()&#123;</span><br><span class="line">          <span class="comment">//调用sub函数完成对数据的操作</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">sub</span>(<span class="number">10</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//获得mapActions映射的addAsync函数</span></span><br><span class="line">      ...<span class="title function_">mapActions</span>([<span class="string">&#x27;subAsync&#x27;</span>]),</span><br><span class="line">      <span class="title function_">asyncSub</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">subAsync</span>(<span class="number">5</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">      ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="D-Getter"><a href="#D-Getter" class="headerlink" title="D.Getter"></a>D.Getter</h4><p>Getter用于对Store中的数据进行加工处理形成新的数据<br>它只会包装Store中保存的数据，并不会修改Store中保存的数据，当Store中的数据发生变化时，Getter生成的内容也会随之变化<br>打开store.js文件，添加getters，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  .......</span><br><span class="line">  getters:&#123;</span><br><span class="line">    //添加了一个showNum的属性</span><br><span class="line">    showNum : state =&gt;&#123;</span><br><span class="line">      return &#x27;最新的count值为：&#x27;+state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后打开Addition.vue中，添加插值表达式使用getters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&#123;&#123;$store.getters.showNum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">或者也可以在Addition.vue中，导入mapGetters，并将之映射为计算属性</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">computed:&#123;</span><br><span class="line">  ...mapGetters([&#x27;showNum&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vuex概述&quot;&gt;&lt;a href=&quot;#Vuex概述&quot; class=&quot;headerlink&quot; title=&quot;Vuex概述&quot;&gt;&lt;/a&gt;Vuex概述&lt;/h3&gt;&lt;p&gt;Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享&lt;/p&gt;
&lt;p&gt;使用Vue</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day06(前端工程化)</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c5.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c5.html</id>
    <published>2024-07-15T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h3><h4 id="A-浏览器端的模块化"><a href="#A-浏览器端的模块化" class="headerlink" title="A.浏览器端的模块化"></a>A.浏览器端的模块化</h4><pre><code>    1).AMD(Asynchronous Module Definition,异步模块定义)    代表产品为：Require.js    2).CMD(Common Module Definition,通用模块定义)    代表产品为：Sea.js</code></pre><h4 id="B-服务器端的模块化"><a href="#B-服务器端的模块化" class="headerlink" title="B.服务器端的模块化"></a>B.服务器端的模块化</h4><pre><code>    服务器端的模块化规范是使用CommonJS规范：    1).使用require引入其他模块或者包    2).使用exports或者module.exports导出模块成员    3).一个文件就是一个模块，都拥有独立的作用域</code></pre><h4 id="C-ES6模块化"><a href="#C-ES6模块化" class="headerlink" title="C.ES6模块化"></a>C.ES6模块化</h4><pre><code>    ES6模块化规范中定义：        1).每一个js文件都是独立的模块        2).导入模块成员使用import关键字        3).暴露模块成员使用export关键字</code></pre><p>小结：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。<br>      ES6模块化是浏览器端和服务器端通用的规范.</p><h3 id="2-在NodeJS中安装babel"><a href="#2-在NodeJS中安装babel" class="headerlink" title="2.在NodeJS中安装babel"></a>2.在NodeJS中安装babel</h3><h4 id="A-安装babel"><a href="#A-安装babel" class="headerlink" title="A.安装babel"></a>A.安装babel</h4><pre><code>打开终端，输入命令：npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node安装完毕之后，再次输入命令安装：npm install --save @babel/polyfill</code></pre><h4 id="B-创建babel-config-js"><a href="#B-创建babel-config-js" class="headerlink" title="B.创建babel.config.js"></a>B.创建babel.config.js</h4><pre><code>在项目目录中创建babel.config.js文件。编辑js文件中的代码如下：    const presets = [        [&quot;@babel/env&quot;,&#123;            targets:&#123;                edge:&quot;17&quot;,                firefox:&quot;60&quot;,                chrome:&quot;67&quot;,                safari:&quot;11.1&quot;            &#125;        &#125;]    ]    //暴露    module.exports = &#123; presets &#125;</code></pre><h4 id="C-创建index-js文件"><a href="#C-创建index-js文件" class="headerlink" title="C.创建index.js文件"></a>C.创建index.js文件</h4><pre><code>在项目目录中创建index.js文件作为入口文件在index.js中输入需要执行的js代码，例如：    console.log(&quot;ok&quot;);</code></pre><h4 id="D-使用npx执行文件"><a href="#D-使用npx执行文件" class="headerlink" title="D.使用npx执行文件"></a>D.使用npx执行文件</h4><pre><code>打开终端，输入命令：npx babel-node ./index.js</code></pre><h3 id="3-设置默认导入-导出"><a href="#3-设置默认导入-导出" class="headerlink" title="3.设置默认导入/导出"></a>3.设置默认导入/导出</h3><h4 id="A-默认导出"><a href="#A-默认导出" class="headerlink" title="A.默认导出"></a>A.默认导出</h4><pre><code>export default &#123;    成员A,    成员B,    .......&#125;,如下：let num = 100;export default&#123;    num&#125;</code></pre><h4 id="B-默认导入"><a href="#B-默认导入" class="headerlink" title="B.默认导入"></a>B.默认导入</h4><pre><code>import 接收名称 from &quot;模块标识符&quot;，如下：import test from &quot;./test.js&quot;</code></pre><p>注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。<br>如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象 </p><h3 id="4-设置按需导入-导出"><a href="#4-设置按需导入-导出" class="headerlink" title="4.设置按需导入/导出"></a>4.设置按需导入/导出</h3><h4 id="A-按需导出"><a href="#A-按需导出" class="headerlink" title="A.按需导出"></a>A.按需导出</h4><pre><code>export let num = 998;export let myName = &quot;jack&quot;;export function fn = function()&#123; console.log(&quot;fn&quot;) &#125;</code></pre><h4 id="B-按需导入"><a href="#B-按需导入" class="headerlink" title="B.按需导入"></a>B.按需导入</h4><pre><code>import &#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;//同时导入默认导出的成员以及按需导入的成员import test,&#123; num,fn as printFn ,myName &#125; from &quot;./test.js&quot;</code></pre><p>注意：一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p><h3 id="5-直接导入并执行代码"><a href="#5-直接导入并执行代码" class="headerlink" title="5.直接导入并执行代码"></a>5.直接导入并执行代码</h3><pre><code>import &quot;./test2.js&quot;;</code></pre><h3 id="6-webpack的概念"><a href="#6-webpack的概念" class="headerlink" title="6.webpack的概念"></a>6.webpack的概念</h3><p>webpack是一个流行的前端项目构建工具，可以解决目前web开发的困境。<br>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目的可维护性</p><h3 id="7-webpack的基本使用"><a href="#7-webpack的基本使用" class="headerlink" title="7.webpack的基本使用"></a>7.webpack的基本使用</h3><h4 id="A-创建项目目录并初始化"><a href="#A-创建项目目录并初始化" class="headerlink" title="A.创建项目目录并初始化"></a>A.创建项目目录并初始化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建项目，并打开项目所在目录的终端，输入命令：</span><br><span class="line">    npm init -y</span><br></pre></td></tr></table></figure><h4 id="B-创建首页及js文件"><a href="#B-创建首页及js文件" class="headerlink" title="B.创建首页及js文件"></a>B.创建首页及js文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在项目目录中创建index.html页面，并初始化页面结构：在页面中摆放一个ul，ul里面放置几个li</span><br><span class="line">在项目目录中创建js文件夹，并在文件夹中创建index.js文件</span><br></pre></td></tr></table></figure><h4 id="C-安装jQuery"><a href="#C-安装jQuery" class="headerlink" title="C.安装jQuery"></a>C.安装jQuery</h4><pre><code>打开项目目录终端，输入命令:npm install jQuery -S</code></pre><h4 id="D-导入jQuery"><a href="#D-导入jQuery" class="headerlink" title="D.导入jQuery"></a>D.导入jQuery</h4><pre><code>打开index.js文件，编写代码导入jQuery并实现功能：import $ from &quot;jquery&quot;;$(function()&#123;    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;cyan&quot;);    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;pink&quot;);&#125;)</code></pre><p>注意：此时项目运行会有错误，因为import $ from “jquery”;这句代码属于ES6的新语法代码，在浏览器中可能会存在兼容性问题<br>所以我们需要webpack来帮助我们解决这个问题。</p><h4 id="E-安装webpack"><a href="#E-安装webpack" class="headerlink" title="E.安装webpack"></a>E.安装webpack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1).打开项目目录终端，输入命令:</span><br><span class="line">npm install webpack webpack-cli -D</span><br><span class="line">2).然后在项目根目录中，创建一个 webpack.config.js 的配置文件用来配置webpack</span><br><span class="line">在 webpack.config.js 文件中编写代码进行webpack配置，如下：</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;//可以设置为development(开发模式)，production(发布模式)</span><br><span class="line">&#125;</span><br><span class="line">补充：mode设置的是项目的编译模式。</span><br><span class="line">如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些</span><br><span class="line">如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</span><br><span class="line">3).修改项目中的package.json文件添加运行脚本dev，如下：</span><br><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;</span><br><span class="line">注意：scripts节点下的脚本，可以通过 npm run 运行，如：</span><br><span class="line">运行终端命令：npm run dev</span><br><span class="line">将会启动webpack进行项目打包</span><br><span class="line">4).运行dev命令进行项目打包，并在页面中引入项目打包生成的js文件</span><br><span class="line">打开项目目录终端，输入命令:</span><br><span class="line">npm run dev</span><br><span class="line">等待webpack打包完毕之后，找到默认的dist路径中生成的main.js文件，将其引入到html页面中。</span><br><span class="line">浏览页面查看效果。</span><br></pre></td></tr></table></figure><h3 id="8-设置webpack的打包入口-出口"><a href="#8-设置webpack的打包入口-出口" class="headerlink" title="8.设置webpack的打包入口/出口"></a>8.设置webpack的打包入口/出口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在webpack 4.x中，默认会将src/index.js 作为默认的打包入口js文件</span><br><span class="line">                 默认会将dist/main.js 作为默认的打包输出js文件</span><br><span class="line">如果不想使用默认的入口/出口js文件，我们可以通过改变 webpack.config.js 来设置入口/出口的js文件，如下：</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode:&quot;development&quot;,</span><br><span class="line">    //设置入口文件路径</span><br><span class="line">    entry: path.join(__dirname,&quot;./src/xx.js&quot;),</span><br><span class="line">    //设置出口文件</span><br><span class="line">    output:&#123;</span><br><span class="line">        //设置路径</span><br><span class="line">        path:path.join(__dirname,&quot;./dist&quot;),</span><br><span class="line">        //设置文件名</span><br><span class="line">        filename:&quot;res.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-设置webpack的自动打包"><a href="#9-设置webpack的自动打包" class="headerlink" title="9.设置webpack的自动打包"></a>9.设置webpack的自动打包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">默认情况下，我们更改入口js文件的代码，需要重新运行命令打包webpack，才能生成出口的js文件</span><br><span class="line">那么每次都要重新执行命令打包，这是一个非常繁琐的事情，那么，自动打包可以解决这样繁琐的操作。</span><br><span class="line">实现自动打包功能的步骤如下：</span><br><span class="line">    A.安装自动打包功能的包:webpack-dev-server</span><br><span class="line">        npm install webpack-dev-server -D</span><br><span class="line">    B.修改package.json中的dev指令如下：</span><br><span class="line">        &quot;scripts&quot;:&#123;</span><br><span class="line">            &quot;dev&quot;:&quot;webpack-dev-server&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    C.将引入的js文件路径更改为：&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    D.运行npm run dev，进行打包</span><br><span class="line">    E.打开网址查看效果：http://localhost:8080</span><br><span class="line"></span><br><span class="line">注意：webpack-dev-server自动打包的输出文件，默认放到了服务器的根目录中.</span><br></pre></td></tr></table></figure><p>补充：<br>在自动打包完毕之后，默认打开服务器网页，实现方式就是打开package.json文件，修改dev命令：<br>    “dev”: “webpack-dev-server —open —host 127.0.0.1 —port 9999”</p><h3 id="10-配置html-webpack-plugin"><a href="#10-配置html-webpack-plugin" class="headerlink" title="10.配置html-webpack-plugin"></a>10.配置html-webpack-plugin</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">使用html-webpack-plugin 可以生成一个预览页面。</span><br><span class="line">因为当我们访问默认的 http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面</span><br><span class="line">还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。</span><br><span class="line">实现默认预览页面功能的步骤如下：</span><br><span class="line">    A.安装默认预览功能的包:html-webpack-plugin</span><br><span class="line">        npm install html-webpack-plugin -D</span><br><span class="line">    B.修改webpack.config.js文件，如下：</span><br><span class="line">        //导入包</span><br><span class="line">        const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">        //创建对象</span><br><span class="line">        const htmlPlugin = new HtmlWebpackPlugin(&#123;</span><br><span class="line">            //设置生成预览页面的模板文件</span><br><span class="line">            template:&quot;./src/index.html&quot;,</span><br><span class="line">            //设置生成的预览页面名称</span><br><span class="line">            filename:&quot;index.html&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    C.继续修改webpack.config.js文件，添加plugins信息：</span><br><span class="line">        module.exports = &#123;</span><br><span class="line">            ......</span><br><span class="line">            plugins:[ htmlPlugin ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="11-webpack中的加载器"><a href="#11-webpack中的加载器" class="headerlink" title="11.webpack中的加载器"></a>11.webpack中的加载器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包</span><br><span class="line">    loader加载器包含：</span><br><span class="line">        <span class="number">1</span>).<span class="property">less</span>-loader</span><br><span class="line">        <span class="number">2</span>).<span class="property">sass</span>-loader</span><br><span class="line">        <span class="number">3</span>).<span class="property">url</span>-<span class="attr">loader</span>:打包处理css中与url路径有关的文件</span><br><span class="line">        <span class="number">4</span>).<span class="property">babel</span>-<span class="attr">loader</span>:处理高级js语法的加载器</span><br><span class="line">        <span class="number">5</span>).<span class="property">postcss</span>-loader</span><br><span class="line">        <span class="number">6</span>).<span class="property">css</span>-loader,style-loader</span><br><span class="line"></span><br><span class="line">注意：指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用</span><br><span class="line"></span><br><span class="line">A.安装style-loader,css-loader来处理样式文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install style-loader css-loader -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">B.安装less,less-loader处理less文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install less-loader less -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">C.安装sass-loader,node-sass处理less文件</span><br><span class="line">    <span class="number">1</span>).安装包</span><br><span class="line">        npm install sass-loader node-sass -D</span><br><span class="line">    <span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">        <span class="variable language_">module</span> : &#123;</span><br><span class="line">            <span class="attr">rules</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    补充：安装sass-loader失败时，大部分情况是因为网络原因，详情参考：</span><br><span class="line">    <span class="attr">https</span>:<span class="comment">//segmentfault.com/a/1190000010984731?utm_source=tag-newest</span></span><br><span class="line"></span><br><span class="line">D.安装post-css自动添加css的兼容性前缀（-ie-,-webkit-）</span><br><span class="line"><span class="number">1</span>).安装包</span><br><span class="line">    npm install postcss-loader autoprefixer -D</span><br><span class="line"><span class="number">2</span>).在项目根目录创建并配置postcss.<span class="property">config</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[ autoprefixer ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E.打包样式表中的图片以及字体文件</span><br><span class="line">在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理</span><br><span class="line">使用url-loader和file-loader来处理打包图片文件以及字体文件</span><br><span class="line"><span class="number">1</span>).安装包</span><br><span class="line">    npm install url-loader file-loader -D</span><br><span class="line"><span class="number">2</span>).配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,</span><br><span class="line">                <span class="comment">//limit用来设置字节数，只有小于limit值的图片，才会转换</span></span><br><span class="line">                <span class="comment">//为base64图片</span></span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;url-loader?limit=16940&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F.打包js文件中的高级语法：在编写js的时候，有时候我们会使用高版本的js语法</span><br><span class="line">有可能这些高版本的语法不被兼容，我们需要将之打包为兼容性的js代码</span><br><span class="line">我们需要安装babel系列的包</span><br><span class="line">A.安装babel转换器</span><br><span class="line">    npm install babel-loader @babel/core @babel/runtime -D</span><br><span class="line">B.安装babel语法插件包</span><br><span class="line">    npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-<span class="keyword">class</span>-properties -D</span><br><span class="line">C.在项目根目录创建并配置babel.<span class="property">config</span>.<span class="property">js</span>文件</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        <span class="attr">presets</span>:[<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">        <span class="attr">plugins</span>:[ <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>, <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">D.配置规则：更改webpack.<span class="property">config</span>.<span class="property">js</span>的<span class="variable language_">module</span>中的rules数组</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="attr">plugins</span>:[ htmlPlugin ],</span><br><span class="line">    <span class="variable language_">module</span> : &#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//test设置需要匹配的文件类型，支持正则</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">//use表示该文件类型需要调用的loader</span></span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>,<span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>,</span><br><span class="line">                <span class="comment">//limit用来设置字节数，只有小于limit值的图片，才会转换</span></span><br><span class="line">                <span class="comment">//为base64图片</span></span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;url-loader?limit=16940&quot;</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="comment">//exclude为排除项，意思是不要处理node_modules中的js文件</span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-Vue单文件组件"><a href="#12-Vue单文件组件" class="headerlink" title="12.Vue单文件组件"></a>12.Vue单文件组件</h3><p>传统Vue组件的缺陷：<br>全局定义的组件不能重名，字符串模板缺乏语法高亮，不支持css(当html和js组件化时，css没有参与其中)<br>没有构建步骤限制，只能使用H5和ES5，不能使用预处理器（babel）<br>解决方案：<br>使用Vue单文件组件，每个单文件组件的后缀名都是.vue<br>每一个Vue单文件组件都由三部分组成<br>1).template组件组成的模板区域<br>2).script组成的业务逻辑区域<br>3).style样式区域</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    组件代码区域</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    js代码区域</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    样式代码区域</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>补充：安装Vetur插件可以使得.vue文件中的代码高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">配置.vue文件的加载器</span><br><span class="line"></span><br><span class="line">A.安装vue组件的加载器</span><br><span class="line"></span><br><span class="line">    npm install vue-loader vue-template-compiler -D</span><br><span class="line"></span><br><span class="line">B.配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line"></span><br><span class="line">    const VueLoaderPlugin = require(&quot;vue-loader/lib/plugin&quot;);</span><br><span class="line"></span><br><span class="line">    const vuePlugin = new VueLoaderPlugin();</span><br><span class="line"></span><br><span class="line">    module.exports = &#123;</span><br><span class="line"></span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        plugins:[ htmlPlugin, vuePlugin  ],</span><br><span class="line"></span><br><span class="line">        module : &#123;</span><br><span class="line"></span><br><span class="line">            rules:[</span><br><span class="line"></span><br><span class="line">                ...//其他规则</span><br><span class="line"></span><br><span class="line">                &#123; </span><br><span class="line"></span><br><span class="line">                    test:/.vue$/,</span><br><span class="line"></span><br><span class="line">                    loader:&quot;vue-loader&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-在webpack中使用vue"><a href="#13-在webpack中使用vue" class="headerlink" title="13.在webpack中使用vue"></a>13.在webpack中使用vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">上一节我们安装处理了vue单文件组件的加载器，想要让vue单文件组件能够使用，我们必须要安装vue</span><br><span class="line"></span><br><span class="line">并使用vue来引用vue单文件组件。</span><br><span class="line"></span><br><span class="line">A.安装Vue</span><br><span class="line"></span><br><span class="line">    npm install vue -S</span><br><span class="line"></span><br><span class="line">B.在index.js中引入vue：import Vue from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">C.创建Vue实例对象并指定el，最后使用render函数渲染单文件组件</span><br><span class="line"></span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">        el:&quot;#first&quot;,</span><br><span class="line"></span><br><span class="line">        render:h=&gt;h(app)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="14-使用webpack打包发布项目"><a href="#14-使用webpack打包发布项目" class="headerlink" title="14.使用webpack打包发布项目"></a>14.使用webpack打包发布项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在项目上线之前，我们需要将整个项目打包并发布。</span><br><span class="line"></span><br><span class="line">A.配置package.json</span><br><span class="line"></span><br><span class="line">    &quot;scripts&quot;:&#123;</span><br><span class="line"></span><br><span class="line">        &quot;dev&quot;:&quot;webpack-dev-server&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;build&quot;:&quot;webpack -p&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">B.在项目打包之前，可以将dist目录删除，生成全新的dist目录</span><br></pre></td></tr></table></figure><h3 id="15-Vue脚手架"><a href="#15-Vue脚手架" class="headerlink" title="15.Vue脚手架"></a>15.Vue脚手架</h3><p>Vue脚手架可以快速生成Vue项目基础的架构。<br>A.安装3.x版本的Vue脚手架：<br>    npm install -g @vue/cli<br>B.基于3.x版本的脚手架创建Vue项目：<br>    1).使用命令创建Vue项目<br>        命令：vue create my-project<br>        选择Manually select features(选择特性以创建项目)<br>        勾选特性可以用空格进行勾选。<br>        是否选用历史模式的路由：n<br>        ESLint选择：ESLint + Standard config<br>        何时进行ESLint语法校验：Lint on save<br>        babel，postcss等配置文件如何放置：In dedicated config files(单独使用文件进行配置)<br>        是否保存为模板：n<br>        使用哪个工具安装包：npm<br>    2).基于ui界面创建Vue项目<br>        命令：vue ui<br>        在自动打开的创建项目网页中配置项目信息。<br>    3).基于2.x的旧模板，创建Vue项目<br>        npm install -g @vue/cli-init<br>        vue init webpack my-project</p><p>C.分析Vue脚手架生成的项目结构<br>    node_modules:依赖包目录<br>    public：静态资源目录<br>    src：源码目录<br>    src/assets:资源目录<br>    src/components：组件目录<br>    src/views:视图组件目录<br>    src/App.vue:根组件<br>    src/main.js:入口js<br>    src/router.js:路由js<br>    babel.config.js:babel配置文件</p><h3 id="16-Vue脚手架的自定义配置"><a href="#16-Vue脚手架的自定义配置" class="headerlink" title="16.Vue脚手架的自定义配置"></a>16.Vue脚手架的自定义配置</h3><pre><code>A.通过 package.json 进行配置 [不推荐使用]    &quot;vue&quot;:&#123;        &quot;devServer&quot;:&#123;            &quot;port&quot;:&quot;9990&quot;,            &quot;open&quot;:true        &#125;    &#125;B.通过单独的配置文件进行配置，创建vue.config.js    module.exports = &#123;        devServer:&#123;            port:8888,            open:true        &#125;    &#125;</code></pre><h3 id="17-Element-UI的基本使用"><a href="#17-Element-UI的基本使用" class="headerlink" title="17.Element-UI的基本使用"></a>17.Element-UI的基本使用</h3><p>Element-UI:一套基于2.0的桌面端组件库<br>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a><br>A.安装：<br>    npm install element-ui -S<br>B.导入使用：<br>    import ElementUI from “element-ui”;<br>    import “element-ui/lib/theme-chalk/index.css”;</p><pre><code>Vue.use(ElementUI)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-模块化的分类&quot;&gt;&lt;a href=&quot;#1-模块化的分类&quot; class=&quot;headerlink&quot; title=&quot;1.模块化的分类&quot;&gt;&lt;/a&gt;1.模块化的分类&lt;/h3&gt;&lt;h4 id=&quot;A-浏览器端的模块化&quot;&gt;&lt;a href=&quot;#A-浏览器端的模块化&quot; class=&quot;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day05(路由)</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c4.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c4.html</id>
    <published>2024-07-14T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件的切换）<br>核心实现依靠一个事件，即监听hash值变化的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//location.hash可以获取到最新的hash值</span></span><br><span class="line">    location.<span class="property">hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心思路：<br>在页面中有一个vue实例对象，vue实例对象中有四个组件，分别是tab栏切换需要显示的组件内容<br>在页面中有四个超链接，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;#/zhuye&quot;</span>&gt;主页&lt;/a&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/keji&quot;</span>&gt;</span>科技<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/caijing&quot;</span>&gt;</span>财经<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当我们点击这些超链接的时候，就会改变url地址中的hash值，当hash值被改变时，就会触发onhashchange事件<br>在触发onhashchange事件的时候，我们根据hash值来让不同的组件进行显示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span><br><span class="line">    <span class="keyword">switch</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/zhuye&#x27;</span>:</span><br><span class="line">        <span class="comment">//通过更改数据comName来指定显示的组件</span></span><br><span class="line">        <span class="comment">//因为 &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt; ，组件已经绑定了comName</span></span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;zhuye&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/keji&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;keji&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/caijing&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;caijing&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/yule&#x27;</span>:</span><br><span class="line">        vm.<span class="property">comName</span> = <span class="string">&#x27;yule&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-Router简介"><a href="#Vue-Router简介" class="headerlink" title="Vue Router简介"></a>Vue Router简介</h3><p>它是一个Vue.js官方提供的路由管理器。是一个功能更加强大的前端路由器，推荐使用。<br>Vue Router和Vue.js非常契合，可以一起方便的实现SPA(single page web application,单页应用程序)应用程序的开发。<br>Vue Router依赖于Vue，所以需要先引入Vue，再引入Vue Router</p><p>Vue Router的特性：<br>支持H5历史模式或者hash模式<br>支持嵌套路由<br>支持路由参数<br>支持编程式路由<br>支持命名路由<br>支持路由导航守卫<br>支持路由过渡动画特效<br>支持路由懒加载<br>支持路由滚动行为</p><h3 id="Vue-Router的使用步骤-★★★"><a href="#Vue-Router的使用步骤-★★★" class="headerlink" title="Vue Router的使用步骤(★★★)"></a>Vue Router的使用步骤(★★★)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">A.导入js文件</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;lib/vue_2.5.22.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">B.添加路由链接:<span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span>&gt;</span>是路由中提供的标签，默认会被渲染为a标签，to属性默认被渲染为href属性，</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">to属性的值会被渲染为#开头的hash地址</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">C.添加路由填充位（路由占位符）</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">D.定义路由组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var User = &#123; template:&quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>This is User<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var Login = &#123; template:&quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>This is Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot; &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">E.配置路由规则并创建路由实例</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var myRouter = new VueRouter(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //routes是路由规则数组</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    routes:[</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //每一个路由规则都是一个对象，对象中至少包含path和component两个属性</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //path表示  路由匹配的hash地址，component表示路由规则对应要展示的组件对象</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;path:&quot;/user&quot;,component:User&#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;path:&quot;/login&quot;,component:Login&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">F.将路由挂载到Vue实例中</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">new Vue(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    el:&quot;#app&quot;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //通过router属性挂载路由对象</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    router:myRouter</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">小结：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">Vue Router的使用步骤还是比较清晰的，按照步骤一步一步就能完成路由操作</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">A.导入js文件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">B.添加路由链接</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">C.添加路由占位符(最后路由展示的组件就会在占位符的位置显示)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">D.定义路由组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">E.配置路由规则并创建路由实例</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">F.将路由挂载到Vue实例中</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">补充：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">路由重定向：可以通过路由重定向为页面设置默认展示的组件</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">在路由规则中添加一条路由规则即可，如下：</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">var myRouter = new VueRouter(&#123;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    //routes是路由规则数组</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    routes: [</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        //path设置为/表示页面最初始的地址 / ,redirect表示要被重定向的新地址，设置为一个路由即可</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path:&quot;/&quot;,redirect:&quot;/user&quot;&#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path: &quot;/user&quot;, component: User &#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123; path: &quot;/login&quot;, component: Login &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    ]</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由，动态路由的实现方式"><a href="#嵌套路由，动态路由的实现方式" class="headerlink" title="嵌套路由，动态路由的实现方式"></a>嵌套路由，动态路由的实现方式</h3><h4 id="A-嵌套路由的概念-★★★"><a href="#A-嵌套路由的概念-★★★" class="headerlink" title="A.嵌套路由的概念(★★★)"></a>A.嵌套路由的概念(★★★)</h4><p>当我们进行路由的时候显示的组件中还有新的子级路由链接以及内容。</p><p>嵌套路由最关键的代码在于理解子级路由的概念：<br>比如我们有一个/login的路由<br>那么/login下面还可以添加子级路由，如:<br>/login/account<br>/login/phone</p><p>参考代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123; <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;This is User&lt;/div&gt;&quot;</span> &#125;</span><br><span class="line"><span class="comment">//Login组件中的模板代码里面包含了子级路由链接以及子级路由的占位符</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Login</span> = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;This is Login&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;hr&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to=&quot;/login/account&quot;&gt;账号密码登录&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;router-link to=&quot;/login/phone&quot;&gt;扫码登录&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- 子路由组件将会在router-view中显示 --&gt;</span></span><br><span class="line"><span class="string">        &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义两个子级路由组件</span></span><br><span class="line">    <span class="keyword">var</span> account = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;账号：&lt;input&gt;&lt;br&gt;密码：&lt;input&gt;&lt;/div&gt;&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> phone = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;扫我二维码&lt;/h1&gt;&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        <span class="comment">//routes是路由规则数组</span></span><br><span class="line">        <span class="attr">routes</span>: [</span><br><span class="line">            &#123; <span class="attr">path</span>:<span class="string">&quot;/&quot;</span>,<span class="attr">redirect</span>:<span class="string">&quot;/user&quot;</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>, </span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Login</span>,</span><br><span class="line">                <span class="comment">//通过children属性为/login添加子路由规则</span></span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&quot;/login/account&quot;</span>, <span class="attr">component</span>: account &#125;,</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&quot;/login/phone&quot;</span>, <span class="attr">component</span>: phone &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">router</span>:myRouter</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="B-动态路由匹配-★★★"><a href="#B-动态路由匹配-★★★" class="headerlink" title="B.动态路由匹配(★★★)"></a>B.动态路由匹配(★★★)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123; <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;用户：&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//routes是路由规则数组</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过/:参数名  的形式传递参数 </span></span><br><span class="line"></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line"></span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-命名路由以及编程式导航"><a href="#7-命名路由以及编程式导航" class="headerlink" title="7.命名路由以及编程式导航"></a>7.命名路由以及编程式导航</h3><h4 id="A-命名路由：给路由取别名"><a href="#A-命名路由：给路由取别名" class="headerlink" title="A.命名路由：给路由取别名"></a>A.命名路由：给路由取别名</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRouter = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//routes是路由规则数组</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过name属性为路由添加一个别名</span></span><br><span class="line"></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">name</span>:<span class="string">&quot;user&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加了别名之后，可以使用别名进行跳转</span></span><br><span class="line"></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/user&quot;</span>&gt;<span class="title class_">User</span>&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name:&#x27;user&#x27; , params: &#123;id:123&#125; &#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以编程式导航</span></span><br><span class="line"></span><br><span class="line">myRouter.<span class="title function_">push</span>( &#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="B-编程式导航-★★★"><a href="#B-编程式导航-★★★" class="headerlink" title="B.编程式导航(★★★)"></a>B.编程式导航(★★★)</h4><p>页面导航的两种方式：<br>A.声明式导航：通过点击链接的方式实现的导航<br>B.编程式导航：调用js的api方法实现导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>-<span class="title class_">Router</span>中常见的导航方式：</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;hash地址&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>:<span class="string">&#x27;user&#x27;</span> , <span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="number">123</span>&#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>:<span class="string">&quot;/login&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">username</span>:<span class="string">&quot;jack&quot;</span>&#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>( n );<span class="comment">//n为数字，参考history.go</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>( -<span class="number">1</span> );</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前端路由&quot;&gt;&lt;a href=&quot;#前端路由&quot; class=&quot;headerlink&quot; title=&quot;前端路由&quot;&gt;&lt;/a&gt;前端路由&lt;/h3&gt;&lt;p&gt;前端路由是基于hash值的变化进行实现的（比如点击页面中的菜单或者按钮改变URL的hash值，根据hash值的变化来控制组件</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day04</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c3.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c3.html</id>
    <published>2024-07-13T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><ul><li>原生ajax</li><li>基于jQuery的ajax</li><li>fetch</li><li>axios</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>JavaScript的执行环境是「单线程」</li><li>所谓单线程，是指JS引擎中负责解释和执行JavaScript代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li><li>异步模式可以一起执行<strong>多个任务</strong></li><li>JS中常见的异步调用<ul><li>定时任何</li><li>ajax</li><li>事件函数</li></ul></li></ul><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul><li>主要解决异步深层嵌套的问题</li><li>promise 提供了简洁的API  使得异步操作更加容易</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   1. Promise基本使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数：   resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 这里用于实现异步任务  setTimeout</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(flag) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3. 正常情况</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 异常情况</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数 </span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了  </span></span></span><br><span class="line"><span class="language-javascript">  p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">  &#125;,<span class="keyword">function</span>(<span class="params">info</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于Promise发送Ajax请求"><a href="#基于Promise发送Ajax请求" class="headerlink" title="基于Promise发送Ajax请求"></a>基于Promise发送Ajax请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /*</span><br><span class="line">     基于Promise发送Ajax请求</span><br><span class="line">   */</span><br><span class="line">   function queryData(url) &#123;</span><br><span class="line">    #   1.1 创建一个Promise实例</span><br><span class="line">     var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">       var xhr = new XMLHttpRequest();</span><br><span class="line">       xhr.onreadystatechange = function()&#123;</span><br><span class="line">         if(xhr.readyState != 4) return;</span><br><span class="line">         if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">           # 1.2 处理正常的情况</span><br><span class="line">           resolve(xhr.responseText);</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">           # 1.3 处理异常情况</span><br><span class="line">           reject(&#x27;服务器错误&#x27;);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       xhr.open(&#x27;get&#x27;, url);</span><br><span class="line">       xhr.send(null);</span><br><span class="line">     &#125;);</span><br><span class="line">     return p;</span><br><span class="line">   &#125;</span><br><span class="line"># 注意：  这里需要开启一个服务 </span><br><span class="line">   # 在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span><br><span class="line">   queryData(&#x27;http://localhost:3000/data&#x27;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data)</span><br><span class="line">       #  1.4 想要继续链式编程下去 需要 return  </span><br><span class="line">       return queryData(&#x27;http://localhost:3000/data1&#x27;);</span><br><span class="line">     &#125;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data);</span><br><span class="line">       return queryData(&#x27;http://localhost:3000/data2&#x27;);</span><br><span class="line">     &#125;)</span><br><span class="line">     .then(function(data)&#123;</span><br><span class="line">       console.log(data)</span><br><span class="line">     &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-基本API"><a href="#Promise-基本API" class="headerlink" title="Promise  基本API"></a>Promise  基本API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul><li>得到异步任务正确的结果</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul><li>获取异常信息</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul><li>成功与否都会执行（不是正式标准） </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    Promise常用API-实例方法</span><br><span class="line">  */</span><br><span class="line">  // console.dir(Promise);</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    return new Promise(function(resolve, reject)&#123;</span><br><span class="line">      setTimeout(function()&#123;</span><br><span class="line">        // resolve(123);</span><br><span class="line">        reject(&#x27;error&#x27;);</span><br><span class="line">      &#125;, 100);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // foo()</span><br><span class="line">  //   .then(function(data)&#123;</span><br><span class="line">  //     console.log(data)</span><br><span class="line">  //   &#125;)</span><br><span class="line">  //   .catch(function(data)&#123;</span><br><span class="line">  //     console.log(data)</span><br><span class="line">  //   &#125;)</span><br><span class="line">  //   .finally(function()&#123;</span><br><span class="line">  //     console.log(&#x27;finished&#x27;)</span><br><span class="line">  //   &#125;);</span><br><span class="line"></span><br><span class="line">  // --------------------------</span><br><span class="line">  // 两种写法是等效的</span><br><span class="line">  foo()</span><br><span class="line">    .then(function(data)&#123;</span><br><span class="line">      # 得到异步任务正确的结果</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;,function(data)&#123;</span><br><span class="line">      # 获取异常信息</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    # 成功与否都会执行（不是正式标准） </span><br><span class="line">    .finally(function()&#123;</span><br><span class="line">      console.log(&#x27;finished&#x27;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul><li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定</li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul><li><code>Promise.race</code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Promise常用API-对象方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// console.dir(Promise)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params">url</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 处理正常的情况</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">reject</span>(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="language-javascript">      xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p1 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p2 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> p3 = <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/a3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 由于p1执行较快，Promise的then()将获得结果&#x27;P1&#x27;。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &quot;HELLO TOM&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>Fetch API是新的ajax解决方案 Fetch会返回Promise</li><li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li><li>fetch(url, options).then(）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Fetch API 基本用法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    fetch(url).then()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   第一个参数请求的路径   Fetch会返回Promise   所以我们可以使用then 拿到请求成功的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/fdata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   在这个then里面我们能拿到最终的数据  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API  中的 HTTP  请求"></a>fetch API  中的 HTTP  请求</h4><ul><li>fetch(url, options).then(）</li><li>HTTP协议，它给我们提供了很多的方法，如POST，GET，DELETE，UPDATE，PATCH和PUT<ul><li>默认的是 GET 请求</li><li>需要在 options 对象中 指定对应的 method       method:请求使用的方法 </li><li>post 和 普通 请求的时候 需要在options 中 设置  请求头 headers   和  body</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">     /*</span><br><span class="line">           Fetch API 调用接口传递参数</span><br><span class="line">     */</span><br><span class="line">    #1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参 </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books?id=123&#x27;, &#123;</span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line">             method: &#x27;get&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">         # 它返回一个Promise实例对象，用于获取后台返回的数据</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">         # 在这个then里面我们能拿到最终的数据  </span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   #1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关   </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/456&#x27;, &#123;</span><br><span class="line">         # get 请求可以省略不写 默认的是GET </span><br><span class="line">             method: &#x27;get&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #2.1  DELETE请求方式参数传递      删除id  是  id=789</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/789&#x27;, &#123;</span><br><span class="line">             method: &#x27;delete&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    #3 POST请求传参</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;</span><br><span class="line">             method: &#x27;post&#x27;,</span><br><span class="line">         # 3.1  传递数据 </span><br><span class="line">             body: &#x27;uname=lisi&amp;pwd=123&#x27;,</span><br><span class="line">         #  3.2  设置请求头 </span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">    # POST请求传参</span><br><span class="line">     fetch(&#x27;http://localhost:3000/books&#x27;, &#123;</span><br><span class="line">             method: &#x27;post&#x27;,</span><br><span class="line">             body: JSON.stringify(&#123;</span><br><span class="line">                 uname: &#x27;张三&#x27;,</span><br><span class="line">                 pwd: &#x27;456&#x27;</span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     # PUT请求传参     修改id 是 123 的 </span><br><span class="line">     fetch(&#x27;http://localhost:3000/books/123&#x27;, &#123;</span><br><span class="line">             method: &#x27;put&#x27;,</span><br><span class="line">             body: JSON.stringify(&#123;</span><br><span class="line">                 uname: &#x27;张三&#x27;,</span><br><span class="line">                 pwd: &#x27;789&#x27;</span><br><span class="line">             &#125;),</span><br><span class="line">             headers: &#123;</span><br><span class="line">                 &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(function(data) &#123;</span><br><span class="line">             return data.text();</span><br><span class="line">         &#125;).then(function(data) &#123;</span><br><span class="line">             console.log(data)</span><br><span class="line">         &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul><li>用fetch来获取数据，如果响应正常返回，我们首先看到的是一个response对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Fetch响应结果的数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="comment">// return data.json();   //  将获取到的数据使用 json 转换对象</span></span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">text</span>(); <span class="comment">//  //  将获取到的数据 转换成字符串 </span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="comment">// console.log(data.uname)</span></span><br><span class="line">  <span class="comment">// console.log(typeof data)</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>,obj.<span class="property">age</span>,obj.<span class="property">gender</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>基于promise用于浏览器和node.js的http客户端</li><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>自动转换JSON数据</li><li>能转换请求和响应数据</li></ul><h4 id="axios基础用法"><a href="#axios基础用法" class="headerlink" title="axios基础用法"></a>axios基础用法</h4><ul><li>get和 delete请求传递参数<ul><li>通过传统的url  以 ? 的形式传递参数</li><li>restful 形式传递参数 </li><li>通过params  形式传递参数 </li></ul></li><li>post  和 put  请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParams  传递参数 </li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   # <span class="number">1.</span> 发送get 请求 </span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/adata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123; </span><br><span class="line">     #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span><br><span class="line">     <span class="comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">2.</span>  get 请求传递参数</span><br><span class="line">   # <span class="number">2.1</span>  通过传统的url  以 ? 的形式传递参数</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios?id=123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   # <span class="number">2.2</span>  restful 形式传递参数 </span><br><span class="line">   axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">2.3</span>  通过params  形式传递参数 </span><br><span class="line">   axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">params</span>: &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">789</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">#<span class="number">3</span> axios <span class="keyword">delete</span> 请求传参     传参的形式和 get 请求一样</span><br><span class="line">   axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">params</span>: &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">111</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>  axios 的 post 请求</span><br><span class="line">   # <span class="number">4.1</span>  通过选项传递参数</span><br><span class="line">   axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"># <span class="number">4.2</span>  通过 <span class="title class_">URLSearchParams</span>  传递参数 </span><br><span class="line">   <span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">   params.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">   params.<span class="title function_">append</span>(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">   axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, params).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">5</span>  axios put 请求传参   和 post 请求一样 </span><br><span class="line">   axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  配置公共的请求头 </span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">#  配置 超时时间</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line">#  配置公共的请求头</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line"># 配置公共的 post 的 <span class="title class_">Content</span>-<span class="title class_">Type</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul><li>请求拦截器<ul><li>请求拦截器的作用是在请求发送前进行一些操作<ul><li>例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易</li></ul></li></ul></li><li>响应拦截器<ul><li>响应拦截器的作用是在接收到响应后进行一些操作<ul><li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 请求拦截器 </span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">url</span>)</span><br><span class="line">    # <span class="number">1.1</span>  任何请求都会经过这一步   在发送请求之前做些什么   </span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">mytoken</span> = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">    # <span class="number">1.2</span>  这里一定要<span class="keyword">return</span>   否则配置不成功  </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    #<span class="number">1.3</span> 对请求错误做点什么    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line">#<span class="number">2.</span> 响应拦截器 </span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    #<span class="number">2.1</span>  在接收响应做些什么  </span><br><span class="line">    <span class="keyword">var</span> data = res.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    #<span class="number">2.2</span> 对响应错误做点什么  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async  和 await"></a>async  和 await</h3><ul><li>async作为一个关键字放到函数前面<ul><li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li></ul></li><li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul><li>​    await后面可以直接跟一个 Promise实例对象</li><li>​     await函数不能单独使用</li></ul></li><li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>  <span class="keyword">async</span> 基础用法</span><br><span class="line">   # <span class="number">1.1</span> <span class="keyword">async</span>作为一个关键字放到函数前面</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">     # <span class="number">1.2</span> <span class="keyword">await</span>关键字只能在使用<span class="keyword">async</span>定义的函数中使用      <span class="keyword">await</span>后面可以直接跟一个 <span class="title class_">Promise</span>实例对象</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">resolve</span>(<span class="string">&#x27;nihao&#x27;</span>)</span><br><span class="line">       &#125;,<span class="number">1000</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// console.log(ret.data)</span></span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br><span class="line"># <span class="number">1.3</span> 任何一个<span class="keyword">async</span>函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span><br><span class="line">   <span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>  <span class="keyword">async</span>    函数处理多个异步函数</span><br><span class="line">   axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">     # <span class="number">2.1</span>  添加<span class="keyword">await</span>之后 当前的<span class="keyword">await</span> 返回结果之后才会执行后面的代码   </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">var</span> info = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">     #<span class="number">2.2</span>  让异步代码看起来、表现起来更像同步代码</span><br><span class="line">     <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async2?info=&#x27;</span> + info.<span class="property">data</span>);</span><br><span class="line">     <span class="keyword">return</span> ret.<span class="property">data</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;接口调用方式&quot;&gt;&lt;a href=&quot;#接口调用方式&quot; class=&quot;headerlink&quot; title=&quot;接口调用方式&quot;&gt;&lt;/a&gt;接口调用方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原生ajax&lt;/li&gt;
&lt;li&gt;基于jQuery的ajax&lt;/li&gt;
&lt;li&gt;fetch&lt;/li</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day03</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c2.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c2.html</id>
    <published>2024-07-12T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li>组件 (Component) 是 Vue.js 最强大的功能之一</li><li>组件可以扩展 HTML 元素，封装可重用的代码</li></ul><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><ul><li>Vue.component(‘组件名称’, { })     第1个参数是标签名称，第2个参数是一个选项对象</li><li><strong>全局组件</strong>注册后，任何<strong>vue实例</strong>都可以用</li></ul><h5 id="组件基础用法"><a href="#组件基础用法" class="headerlink" title="组件基础用法"></a>组件基础用法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2、 组件使用 组件名称 是以HTML标签的形式使用  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   注册组件 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1、 my-component 就是组件中自定义的标签名</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="组件注意事项"><a href="#组件注意事项" class="headerlink" title="组件注意事项"></a>组件注意事项</h5><ul><li>组件参数的data值必须是函数同时这个函数要求返回一个对象 </li><li>组件模板必须是单个根元素</li><li>组件模板的内容可以是模板字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">4、  组件可以重复使用多次 </span></span><br><span class="line"><span class="comment">      因为data中返回的是一个对象所以每个组件中的数据是私有的</span></span><br><span class="line"><span class="comment">  即每个实例可以维护一份被返回对象的独立的拷贝   </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 8、必须使用短横线的方式使用组件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5  如果使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 7、但是在普通的标签模板中，必须使用短横线的方式使用组件</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HelloWorld&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;HelloWorld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1、组件参数的data值必须是函数 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 同时这个函数要求返回一个对象  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  2、组件模板必须是单个根元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//  3、组件模板的内容可以是模板字符串  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button&gt;测试123&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">#  6 在字符串模板中可以使用驼峰的方式使用组件</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">   &lt;HelloWorld&gt;&lt;/HelloWorld&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><ul><li>只能在当前注册它的vue实例中使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//局部注册组件  </span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;my-component&gt; 将只在父模板可用  一定要在实例上注册了才能在html文件中使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;my-component&#x27;</span>: <span class="title class_">Child</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue组件之间传值"><a href="#Vue组件之间传值" class="headerlink" title="Vue组件之间传值"></a>Vue组件之间传值</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><ul><li>父组件发送的形式是以属性的形式绑定值到子组件身上。</li><li>然后子组件用属性props接收</li><li>在props中使用驼峰形式，模板中需要使用短横线的形式字符串形式的模板中没有这个限制</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、menu-item  在 APP中嵌套着 故 menu-item   为  子组件      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给子组件传入一个静态的值 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2、 需要动态的数据的时候 需要属性绑定的形式设置 此时 ptitle  来自父组件data 中的数据 . </span></span><br><span class="line"><span class="comment">  传的值可以是数字、对象、数组等等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&#x27;ptitle&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 3、 子组件用属性props接收父组件传递过来的数据  </span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">msg</span>: <span class="string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg + &quot;----&quot; + title + &quot;-----&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">pmsg</span>: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">ptitle</span>: <span class="string">&#x27;动态绑定属性&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h4><ul><li>子组件用<code>$emit()</code>触发事件</li><li><code>$emit()</code>  第一个参数为 自定义的事件名称     第二个参数为需要传递的数据</li><li>父组件用v-on 监听子组件的事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;fontSize: fontSize + &quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 父组件用v-on 监听子组件的事件</span></span><br><span class="line"><span class="comment">这里 enlarge-text  是从 $emit 中的第一个参数对应   handle 为对应的事件处理函数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:parr</span>=<span class="string">&#x27;parr&#x27;</span> @<span class="attr">enlarge-text</span>=<span class="string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     子组件向父组件传值-携带参数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   Vue.component(&#x27;menu-item&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     props: [&#x27;parr&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  1、子组件用$emit()触发事件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">### 第一个参数为 自定义的事件名称   第二个参数为需要传递的数据  </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 5)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;enlarge-text&quot;, 10)&#x27;</span>&gt;</span>扩大父组件中字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       pmsg: &#x27;父组件中内容&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       parr: [&#x27;apple&#x27;,&#x27;orange&#x27;,&#x27;banana&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       fontSize: 10</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       handle: function(val)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         // 扩大字体大小</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         this.fontSize += val;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"> </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="兄弟之间的传递"><a href="#兄弟之间的传递" class="headerlink" title="兄弟之间的传递"></a>兄弟之间的传递</h4><ul><li>兄弟之间传递数据需要借助于事件中心，通过事件中心传递数据   <ul><li>提供事件中心    var hub = new Vue()</li></ul></li><li>传递数据方，通过一个事件触发hub.$emit(方法名，传递的数据)</li><li>接收数据方，通过mounted(){} 钩子中  触发hub.$on()方法名</li><li>销毁事件 通过hub.$off()方法名销毁之后无法进行传递数据</li></ul><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><ul><li>组件的最大特性就是复用性，而用好插槽能大大提高组件的可复用能力</li></ul><h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的所有组件标签中嵌套的内容会替换掉slot  如果不传值 则使用 slot 中的默认值  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有一个警告<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      组件插槽：父组件向子组件传递内容</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;alert-box&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 当组件渲染的时候，这个 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 元素将会被替换为“组件标签中嵌套的内容”。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"># 插槽内可以包含任何模板代码，包括 HTML</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><ul><li>具有名字的插槽 </li><li>使用 <slot> 中的 “name” 属性绑定元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 通过slot属性来指定, 这个slot的值必须和下面slot组件得name值对应上</span></span><br><span class="line"><span class="comment">如果没有匹配到 则放到匿名的插槽中   --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注意点：template临时的包裹标签最终不会渲染到页面上     --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      具名插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###1、 使用 <span class="tag">&lt;<span class="name">slot</span>&gt;</span> 中的 &quot;name&quot; 属性绑定元素 指定当前插槽的名字</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  注意点： </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  具名插槽的渲染顺序，完全取决于模板，而不是取决于父组件中元素的顺序</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><ul><li>父组件对子组件加工处理</li><li>既可以复用子组件的slot，又可以使slot内容不一致</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1、当我们希望li 的样式由外部使用组件的地方定义，因为可能有多种地方要使用该组件，</span></span><br><span class="line"><span class="comment">但样式希望不一样 这个时候我们需要使用作用域插槽 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 2、 父组件中使用了&lt;template&gt;元素,而且包含scope=&quot;slotProps&quot;,</span></span><br><span class="line"><span class="comment">slotProps在这里只是临时变量   </span></span><br><span class="line"><span class="comment">---&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&#x27;slotProps.info.id==3&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;slotProps.info.name&#125;&#125;         </span><br><span class="line">         <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    /*</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      作用域插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    */</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;fruit-list&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      props: [&#x27;list&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###  3、 在子组件模板中,<span class="tag">&lt;<span class="name">slot</span>&gt;</span>元素上有一个类似props传递数据给组件的写法msg=&quot;xxx&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">###   插槽可以提供一个默认内容，如果如果父组件没有为这个插槽提供了内容，会显示默认的内容。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">如果父组件为这个插槽提供了内容，则默认的内容会被替换掉</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        list: [&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;apple&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 2,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          id: 3,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          name: &#x27;banana&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组件 (Component) 是 Vue.js 最强大的功能之一&lt;/li&gt;
&lt;li&gt;组件可以扩展 HTML 元素，封装可重用的代</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day02</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c1.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c1.html</id>
    <published>2024-07-11T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h2><h3 id="表单基本操作"><a href="#表单基本操作" class="headerlink" title="表单基本操作"></a>表单基本操作</h3><ul><li>获取单选框中的值<ul><li>通过v-model</li></ul></li><li>获取复选框中的值<ul><li>通过v-model</li><li>和获取单选框中的值一样 </li><li>复选框 <code>checkbox</code> 这种的组合时   data 中的 hobby 我们要定义成数组 否则无法实现多选</li></ul></li><li>获取下拉框和文本框中的值<ul><li>通过v-model</li></ul></li></ul><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><ul><li>.number  转换为数值<ul><li>注意点：    </li><li>当开始输入非数字的字符串时，因为Vue无法将字符串转换成数值</li><li>所以属性值将实时更新成相同的字符串。即使后面输入数字，也将被视作字符串。</li></ul></li><li>.trim  自动过滤用户输入的首尾空白字符<ul><li>只能去掉首尾的 不能去除中间的空格</li></ul></li><li>.lazy   将input事件切换成change事件<ul><li>.lazy 修饰符延迟了同步更新属性值的时机。即将原本绑定在 input 事件的同步逻辑转变为绑定在 change 事件上</li></ul></li><li>在失去焦点 或者 按下回车键时才更新</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为数值类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动过滤用户输入的首尾空白字符   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>内置指令不能满足我们特殊的需求</li><li>Vue允许我们自定义指令</li></ul><h4 id="Vue-directive-注册全局指令"><a href="#Vue-directive-注册全局指令" class="headerlink" title="Vue.directive  注册全局指令"></a>Vue.directive  注册全局指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  使用自定义的指令，只需在对用的元素中，加上<span class="string">&#x27;v-&#x27;</span>的前缀形成类似于内部指令<span class="string">&#x27;v-if&#x27;</span>，<span class="string">&#x27;v-text&#x27;</span>的形式。 </span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注意点： </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   1、 在自定义指令中  如果以驼峰命名的方式定义 如  Vue.directive(&#x27;focusA&#x27;,function()&#123;&#125;) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//   2、 在HTML中使用的时候 只能通过 v-focus-a 来使用 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 当绑定元素插入到 DOM 中。 其中 el为dom元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 聚焦元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">　　<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Vue-directive-注册全局指令-带参数"><a href="#Vue-directive-注册全局指令-带参数" class="headerlink" title="Vue.directive  注册全局指令 带参数"></a>Vue.directive  注册全局指令 带参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> &lt;input type=<span class="string">&quot;text&quot;</span> v-color=<span class="string">&#x27;msg&#x27;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     自定义指令-带参数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     bind - 只调用一次，在指令第一次绑定到元素上时候调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">   */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// bind声明周期, 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// el 为当前自定义指令的DOM元素  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// binding 为自定义的函数形参   通过自定义属性传递过来的值 存在 binding.value 里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 根据指令的参数设置背景色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// console.log(binding.value.color)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="自定义指令局部指令"><a href="#自定义指令局部指令" class="headerlink" title="自定义指令局部指令"></a>自定义指令局部指令</h4><ul><li>局部指令，需要定义在  directives 的选项   用法和全局用法一样 </li><li>局部指令只能在当前组件里面使用</li><li>当全局指令和局部指令同名时以局部指令为准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-color=<span class="string">&#x27;msg&#x27;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      自定义指令-局部指令</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">    */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//局部指令，需要定义在  directives 的选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">color</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">focus</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            el.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性   computed"></a>计算属性   computed</h3><ul><li>模板中放入太多的逻辑会让模板过重且难以维护  使用计算属性可以让模板更加的简洁</li><li><strong>计算属性是基于它们的响应式依赖进行缓存的</strong></li><li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化</li></ul><p>计算属性与方法的区别:计算属性是基于依赖进行缓存的，而方法不缓存</p><h3 id="侦听器-watch"><a href="#侦听器-watch" class="headerlink" title="侦听器   watch"></a>侦听器   watch</h3><ul><li>使用watch来响应数据的变化</li><li>一般用于异步或者开销较大的操作</li><li>watch 中的属性 一定是data 中 已经存在的数据 </li><li><strong>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watch  属性 定义 和 data 已经 methods 平级 </span></span><br><span class="line">           <span class="attr">watch</span>: &#123;</span><br><span class="line">               <span class="comment">//   注意：  这里firstName  对应着data 中的 firstName </span></span><br><span class="line">               <span class="comment">//   当 firstName 值 改变的时候  会自动触发 watch</span></span><br><span class="line">               <span class="attr">firstName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//   注意：  这里 lastName 对应着data 中的 lastName </span></span><br><span class="line">               <span class="attr">lastName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li>Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。</li><li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li><li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li><li>支持级联操作</li><li>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本</li><li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">//  lower  为全局过滤器     </span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;lower&#x27;</span>, <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">       <span class="comment">//filters  属性 定义 和 data 已经 methods 平级 </span></span><br><span class="line">       <span class="comment">//  定义filters 中的过滤器为局部过滤器 </span></span><br><span class="line">      <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="comment">//   upper  自定义的过滤器名字 </span></span><br><span class="line">        <span class="comment">//    upper 被定义为接收单个参数的过滤器函数，表达式  msg  的值将作为参数传入到函数中</span></span><br><span class="line">        <span class="attr">upper</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">         <span class="comment">//  过滤器中一定要有返回值 这样外界使用过滤器的时候才能拿到结果</span></span><br><span class="line">          <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="过滤器中传递参数"><a href="#过滤器中传递参数" class="headerlink" title="过滤器中传递参数"></a>过滤器中传递参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">filterA 被定义为接收三个参数的过滤器函数。</span><br><span class="line">其中 message 的值作为第一个参数，</span><br><span class="line">普通字符串 <span class="string">&#x27;arg1&#x27;</span> 作为第二个参数，表达式 arg2 的值作为第三个参数。</span><br><span class="line">--&gt;</span><br><span class="line">      &#123;&#123; message | <span class="title function_">filterA</span>(<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在过滤器中 第一个参数 对应的是  管道符前面的数据   n  此时对应 message</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第2个参数  a 对应 实参  arg1 字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 第3个参数  b 对应 实参  arg2 字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="keyword">function</span>(<span class="params">n,a,b</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> n+a;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> n+b;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">message</span>: <span class="string">&quot;哈哈哈&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>事物从出生到死亡的过程</li><li>Vue实例从创建 到销毁的过程 ，这些过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数</li></ul><h4 id="常用的-钩子函数"><a href="#常用的-钩子函数" class="headerlink" title="常用的 钩子函数"></a>常用的 钩子函数</h4><div class="table-container"><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后，数据观测和事件配置之前被调用 此时data 和 methods 以及页面的DOM结构都没有初始化   什么都做不了</th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用此时data 和 methods已经可以使用  但是页面还没有渲染出来</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用   此时页面上还看不到真实数据 只是一个模板页面而已</td></tr><tr><td>mounted</td><td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。  数据已经真实渲染到页面上  在这个钩子函数里面我们可以使用一些第三方的插件</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟DOM打补丁之前。   页面上数据还是旧的</td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用</td></tr><tr><td>destroyed</td><td>实例销毁后调用</td></tr></tbody></table></div><ul><li><h3 id="数组变异方法"><a href="#数组变异方法" class="headerlink" title="数组变异方法"></a>数组变异方法</h3><ul><li>在 Vue 中，直接修改对象属性的值无法触发响应式。当你直接修改了对象属性的值，你会发现，只有数据改了，但是页面内容并没有改变</li><li>变异数组方法即保持数组方法原有功能不变的前提下对其进行功能拓展</li></ul><p>| <code>push()</code>    | 往数组最后面添加一个元素，成功返回当前数组的长度             |<br>| —————- | —————————————————————————————— |<br>| <code>pop()</code>     | 删除数组的最后一个元素，成功返回删除元素的值                 |<br>| <code>shift()</code>   | 删除数组的第一个元素，成功返回删除元素的值                   |<br>| <code>unshift()</code> | 往数组最前面添加一个元素，成功返回当前数组的长度             |<br>| <code>splice()</code>  | 有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选），第三个是删除 后想要在原位置替换的值 |<br>| <code>sort()</code>    | sort()  使数组按照字符编码默认从小到大排序,成功返回排序后的数组 |<br>| <code>reverse()</code> | reverse()  将数组倒序，成功返回倒序后的数组                  |</p><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><ul><li>不会改变原始数组，但总是返回一个新数组</li></ul><p>| filter | filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。 |<br>| ——— | —————————————————————————————— |<br>| concat | concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组 |<br>| slice  | slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组 |</p></li></ul><h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><ul><li>Vue.set(a,b,c)    让 触发视图重新更新一遍，数据动态起来</li><li>a是要更改的数据 、   b是数据的第几项、   c是更改后的数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue常用特性&quot;&gt;&lt;a href=&quot;#Vue常用特性&quot; class=&quot;headerlink&quot; title=&quot;Vue常用特性&quot;&gt;&lt;/a&gt;Vue常用特性&lt;/h2&gt;&lt;h3 id=&quot;表单基本操作&quot;&gt;&lt;a href=&quot;#表单基本操作&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue基础day01</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c0.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c0.html</id>
    <published>2024-07-10T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>本质就是自定义属性</li><li>Vue中指定都是以 v- 开头 </li></ul><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>防止页面加载时出现闪烁问题</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li><li>如果数据中有HTML标签会将html标签一并输出</li><li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>用法和v-text 相似  但是他可以将HTML片段填充到标签中</li><li>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</li><li>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</li></ul><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><ul><li>显示原始信息跳过编译过程</li><li>跳过这个元素和它的子元素的编译过程。</li><li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;  </span><br><span class="line"></span><br><span class="line">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span><br></pre></td></tr></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h4><ul><li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li></ul><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>当数据发生变化的时候，视图也就发生变化</li><li>当视图发生变化的时候，数据也会跟着同步变化</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li></ul><h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><ul><li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>m   model  <ul><li>数据层   Vue  中 数据层 都放在 data 里面</li></ul></li><li>v   view     视图   <ul><li>Vue  中  view      即 我们的HTML页面  </li></ul></li><li>vm   （view-model）     控制器     将数据和视图层建立联系      <ul><li>vm 即  Vue 的实例  就是 vm  </li></ul></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>用来绑定事件的</li><li>形式如：v-on:click  缩写为 @click;</li></ul><p>v-on事件函数中传入参数，如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数。如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li><li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li><li>修饰符是由点开头的指令后缀来表示的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.enter.space</span>=<span class="string">&quot;alertMe&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">submit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">alertMe</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义按键修饰符别名</p><ul><li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>v-bind 指令被用来响应地更新 HTML 属性</li><li>v-bind:href    可以缩写为    :href;</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><ul><li>我们可以给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li></ul><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><p>v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</p><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li><li>绑定数组的时候数组里面存的是data 中的数据 </li></ul><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div v-bind:style=&quot;styleObject&quot;&gt;绑定样式对象&lt;/div&gt;&#x27;</span><br><span class="line"> </span><br><span class="line">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span><br><span class="line"> &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize,background:&#x27;red&#x27; &#125;&quot;&gt;内联样式&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;[styleObj1, styleObj2]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        styleObject: &#123;</span><br><span class="line">          color: &#x27;green&#x27;,</span><br><span class="line">          fontSize: &#x27;30px&#x27;,</span><br><span class="line">          background:&#x27;red&#x27;</span><br><span class="line">        &#125;，</span><br><span class="line">        activeColor: &#x27;green&#x27;,</span><br><span class="line">   fontSize: &quot;30px&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj1: &#123;</span><br><span class="line">             color: &#x27;red&#x27;</span><br><span class="line">       &#125;,</span><br><span class="line">       styleObj2: &#123;</span><br><span class="line">            fontSize: &#x27;30px&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h4><ul><li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li><li>2- 进行两个视图之间的切换</li></ul><h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul><li>v-show本质就是标签display设置为none，控制隐藏<ul><li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li></ul></li><li>v-if是动态的向DOM树内添加或者删除DOM元素<ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li>用于循环的数组里面的值可以是对象，也可以是普通元素  </li></ul><ul><li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li><li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li><li>key 的作用<ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;headerlink&quot; title=&quot;指令&quot;&gt;&lt;/a&gt;指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本质就是自定义属性&lt;/li&gt;
&lt;li&gt;Vue中指定都是以 v- 开头 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v-cloak&quot;&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>05-Message组件的设计和实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c5.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c5.html</id>
    <published>2024-07-09T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>常用于主动操作后的反馈提示。其表现为从“中间顶部”出现消息提示，并在几秒后自动消失。可能包括成功提示、警告、错误等。</p><h2 id="函数调用创建组件"><a href="#函数调用创建组件" class="headerlink" title="函数调用创建组件"></a><strong>函数调用创建组件</strong></h2><p>不同于前面写的几个组件，Message显示的形式一般是点击按钮之后生成，这也意味着我们需要以函数调用的形式创建组件，该函数接收消息组件的属性对象，然后返回一个消息组件的实例对象, 我们在对创建的实例对象进行进一步操作，比如手动关闭消息等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息组件</span></span><br><span class="line"><span class="keyword">const</span> messageInstance = <span class="title function_">createMessage</span>(&#123;</span><br><span class="line"> <span class="attr">message</span>: <span class="string">&#x27;This is a message&#x27;</span>, <span class="comment">// 消息内容</span></span><br><span class="line"> <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,       <span class="comment">// 消息类型</span></span><br><span class="line"> <span class="attr">duration</span>: <span class="number">5000</span>,        <span class="comment">// 持续时间</span></span><br><span class="line"> <span class="attr">showClose</span>: <span class="literal">true</span>        <span class="comment">// 是否显示关闭按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的 messageInstance 可以进行一些操作，如手动关闭：</span></span><br><span class="line">messageInstance.<span class="title function_">destory</span>() <span class="comment">// 手动关闭消息</span></span><br></pre></td></tr></table></figure><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a><strong>设计思路</strong></h2><p>下面是Message 组件的设计思路：</p><ol><li>功能：显示临时性的通知消息，支持不同类型的消息（成功、警告、错误等），可以显示多个，支持自动关闭，支持手动关闭。</li><li>属性定义</li><li>type: 消息类型，默认为info</li><li>message: 消息内容，字符串或者VNode</li><li>duration: 显示时间，默认为一定时间后自动隐藏</li><li>showClose: 是否显示关闭按钮</li><li>结构和样式定义：组件结构包括消息容器、消息内容、关闭按钮等部分的布局和样式，此外还需要考虑到根据消息类型设置不同的背景色和文字颜色</li><li>组件状态：动态控制消息的显示和隐藏</li><li>事件：添加关闭按钮，点击关闭按钮时触发关闭事件，由于Message有显示时间，还需要设置和清除定时器。</li><li>动画效果：使用过渡实现消息淡入淡出效果。</li></ol><h3 id="组件实现难点"><a href="#组件实现难点" class="headerlink" title="组件实现难点"></a><strong>组件实现难点</strong></h3><ol><li>通过函数调用实现消息组件的动态创建和销毁</li><li>Message的显示位置，如果页面上同时存在多条消息，需要考虑它们的排列避免消息重叠或遮挡，这需要动态计算消息组件的位置。</li></ol><h3 id="Message组件的实现过程"><a href="#Message组件的实现过程" class="headerlink" title="Message组件的实现过程"></a><strong>Message组件的实现过程</strong></h3><p>该组件的基本结构的代码和样式这里不再复述，可以参考代码完成，重点在于完成Message组件的基本逻辑，其整体设计思路是维护一个消息实例数组来管理页面上的消息组件，通过渲染和销毁来控制消息的显示和隐藏。</p><p>消息组件创建</p><ol><li>当调用createMessage函数时，会生成一个唯一的消息id，创建一个消息容器，并将消息组件渲染到该容器中。</li><li>消息组件的属性是通过传入的props与一些默认值合并得到的，其中包括消息内容、持续时间、类型、是否显示关闭按钮等。</li><li>每个消息组件都有一个独立的z-index，确保它们在页面上正确地叠加显示。</li><li>每个消息组件都有一个销毁函数destory，用于从实例数组中移除并销毁该消息组件。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createMessage</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 生成消息 Id</span></span><br><span class="line">  <span class="comment">// 创建消息容器</span></span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// 合并新的props</span></span><br><span class="line">  <span class="comment">// 合并新的 props</span></span><br><span class="line">   <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="title function_">nextZIndex</span>(), <span class="comment">// 设置 z-index</span></span><br><span class="line">    <span class="attr">onDestory</span>: destory <span class="comment">// 设置销毁函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 通过 h 函数 创建消息vNode</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="title class_">MessageConstructor</span>, newProps)</span><br><span class="line">  <span class="comment">// 渲染消息vNode到容器中</span></span><br><span class="line">  <span class="title function_">render</span>(vnode, container)</span><br><span class="line">  <span class="comment">// 添加消息容器到 body中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container.<span class="property">firstElementChild</span>!)</span><br><span class="line">  <span class="comment">// 获取组件实例</span></span><br><span class="line">  <span class="keyword">const</span> vm = vnode.<span class="property">component</span>!</span><br><span class="line">  <span class="comment">// 根据组件实例进行扩充，创建消息实例对象</span></span><br><span class="line">  <span class="keyword">const</span> instance = &#123;</span><br><span class="line">    id, </span><br><span class="line">    vnode,</span><br><span class="line">    vm</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 将消息实例对象添加到实例数组中</span></span><br><span class="line">  instances.<span class="title function_">push</span>(instance)</span><br><span class="line">  <span class="comment">// 返回实例</span></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息组件的销毁</p><ul><li>调用消息组件的销毁函数时，会从实例数组中找到并删除该消息实例，并通过重新render将消息容器置为null，从而销毁该消息组件。</li></ul><p>手动销毁： 设置消息组件中visible的值为false来实现隐藏消息。</p><p>关闭所有消息：数组forEach调用销毁方法</p><p>计算偏移量：因为涉及到多个消息组件，这就需要获取上一个消息组件的底部偏移量，并计算当前Message组件的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 消息组件高度</span></span><br><span class="line"><span class="keyword">const</span> lastOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">getLastBottomOffset</span>(props.<span class="property">id</span>)) <span class="comment">// 上一个实例的最下面的坐标数字</span></span><br><span class="line"><span class="keyword">const</span> topOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">offset</span> + lastOffset.<span class="property">value</span>) <span class="comment">// 元素的 top 偏移量</span></span><br><span class="line"><span class="keyword">const</span> bottomOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> height.<span class="property">value</span> + topOffset.<span class="property">value</span>) <span class="comment">// 元素的 bottom 偏移量，为下一个消息组件提供</span></span><br><span class="line"><span class="keyword">const</span> cssStyle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line"> <span class="attr">top</span>: topOffset.<span class="property">value</span> + <span class="string">&#x27;px&#x27;</span>, <span class="comment">// 动态设置 top 样式</span></span><br><span class="line"> <span class="attr">zIndex</span>: props.<span class="property">zIndex</span> <span class="comment">// 动态设置 z-index 样式</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="h函数和render函数"><a href="#h函数和render函数" class="headerlink" title="h函数和render函数"></a><strong>h函数和render函数</strong></h3><ol><li>h函数用于创建虚拟DOM元素（VNode), 接受三个参数：要创建的元素标签名、元素的属性对象（如类名、样式、事件等）、子元素（可以是文本内容或其他 VNode）。</li><li>render函数 用于将 VNode 渲染为真实 DOM , 它接受一个 VNode 作为参数, 并将其渲染到一个容器元素中。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用于主动操作后的反馈提示。其表现为从“中间顶部”出现消息提示，并在几秒后自动消失。可能包括成功提示、警告、错误等。&lt;/p&gt;
&lt;h2 id=&quot;函数调用创建组件&quot;&gt;&lt;a href=&quot;#函数调用创建组件&quot; class=&quot;headerlink&quot; title=&quot;函数调用创建组件&quot;&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>04-Icon/Link组件的实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c4.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c4.html</id>
    <published>2024-07-08T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Icon组件实现思路</strong></p><ol><li>确定图标库：首先要确定你将使用的图标库，比如Font Awesome、Material Icons，这决定了你将从哪里获取图标，以及如何在组件中使用它们。</li><li>安装和引入图标库：根据你选择的图标库，安装相应的依赖包，并在项目中引入这些图标。</li><li>创建Icon组件：在Vue项目中创建一个Icon组件。</li><li>定义组件Props,  这个组件会接收一些属性，比如图标名称、大小、颜色。</li><li>渲染图标：根据选择的图标库，使用相应的方式来渲染对应名称的图标</li><li>处理属性：根据传入的大小、颜色等属性给组件动态添加类名，从而改变Icon组件的样式</li><li>使用组件：在项目中使用你创建的Icon组件，传递相应的图标名称和其他属性。</li><li>测试：对Icon组件进行测试，并且能够处理传递的属性, 确保组件能够接受并正确渲染各种大小、颜色和样式的图标。</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><h3 id="引入FontAwesome"><a href="#引入FontAwesome" class="headerlink" title="引入FontAwesome"></a><strong>引入FontAwesome</strong></h3><p>这里我们基于FontAwesome图标库创建Icon组件</p><p>文档资料：<a href="https://fontawesome.com/docs/web/use-with/vue/">https://fontawesome.com/docs/web/use-with/vue/</a></p><p>想要在<a href="http://vue.js/">Vue.js</a>中使用FontAswsome , 需要按照以下步骤：</p><ol><li>Add Svg Core: npm i —save @fortawesome/fontawesome-svg-core </li><li>Add Icon Packages: npm i —save @fortawesome/free-solid-svg-icons</li><li>Add The Vue Component(需要根据Vue版本选择)： npm i —save @fortawesome/vue-fontawesome@latest-3 </li><li>Add Icon: 在组件中添加图标</li></ol><p>导入FontAwesome文档：<a href="https://fontawesome.com/docs/web/use-with/vue/add-icons">https://fontawesome.com/docs/web/use-with/vue/add-icons</a></p><p>然后在 src/<a href="http://main.ts/">main.ts</a> 文件中创建一个包含要在项目中使用的所有图标的库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Set up using Vue 3 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import the fontawesome core */</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import font awesome icon component */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/vue-fontawesome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import specific icons */</span></span><br><span class="line"><span class="keyword">import</span> &#123; faUserSecret &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add icons to the library */</span></span><br><span class="line">library.<span class="title function_">add</span>(faUserSecret)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">component</span>(<span class="string">&#x27;font-awesome-icon&#x27;</span>, <span class="title class_">FontAwesomeIcon</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后就可以在组件中调用图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;font-awesome-icon icon=&quot;fa-solid fa-user-secret&quot; /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为我们要使用大量图标，所以可以先导入整个图标库。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 导入整个图标</span></span><br><span class="line"><span class="keyword">import</span> &#123; fas &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line">library.<span class="title function_">add</span>(fas)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="定义Icon组件"><a href="#定义Icon组件" class="headerlink" title="定义Icon组件"></a><strong>定义Icon组件</strong></h3><p>接下来，我们对FontAwesomeIcon进行封装，形成一个Icon组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;$props&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">defineProps&lt;IconProps&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-bind=”$props” 将 Icon 组件的所有接收的 props 动态传递给内部的 font-awesome-icon 组件。这样就无需显式地在 Icon 组件中声明这些 props。</p><p>在示例代码中引入Icon组件并使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-icon icon=&quot;arrow-right&quot;&gt;&lt;/el-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ElIcon from &#x27;./components/Icon/Icon.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="处理属性"><a href="#处理属性" class="headerlink" title="处理属性"></a><strong>处理属性</strong></h3><p>但是FontAsweomeIcon本身并没有color属性，因此我们对其进行扩展，在IconProps添加color属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IconDefinition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 设定Icon组件的Props</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IconProps</span> &#123;</span><br><span class="line"> <span class="attr">icon</span>: <span class="built_in">object</span> | <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; | <span class="built_in">string</span> | <span class="title class_">IconDefinition</span></span><br><span class="line"> <span class="comment">// 添加color</span></span><br><span class="line"> color?: <span class="built_in">string</span></span><br><span class="line"> size?: <span class="string">&#x27;2xs&#x27;</span></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加color属性之后，我们使用组件就是这种形式<el-icon icon="arrow-right" color="#409EFC"/></p><p>font-awesome-icon组件本身不接收这种类型的props, 因此我们要对传递的props进行过滤，我们可以使用lodash工具库完成这项功能。</p><p>npm i lodash-es</p><p>npm install —save @types/lodash-es</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot; :style=&quot;iconStyle&quot; v-bind=&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;iconProps&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// omit函数用于排除对象的属性，传递处理的对象和排除的属性名称数组</span><br><span class="line">import &#123; omit &#125; from &#x27;lodash-es&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import type &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">const props = defineProps&lt;IconProps&gt;()</span><br><span class="line">// 过滤掉props中传递的color属性</span><br><span class="line">const iconProps = computed(() =&gt; &#123;</span><br><span class="line"> return omit(props, [&#x27;color&#x27;])</span><br><span class="line">&#125;)</span><br><span class="line">// 根据是否传递color属性来决定 icon的颜色</span><br><span class="line">const iconStyle = computed(() =&gt; &#123;</span><br><span class="line"> const &#123; color &#125; = props</span><br><span class="line"> if(!color) return &#123;&#125;</span><br><span class="line"> return &#123;</span><br><span class="line">  &#x27;--color&#x27;: color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>样式定义则比较简单，参考项目代码即可，在完成上述步骤之后，Icon组件就基本定义完成，我们之后就可以使用<el-icon icon="arrow-right" />这样的形式在项目中使用组件了。</p><p>之后，我们可以对Buttton组件进行补充完善。</p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a><strong>参考实现</strong></h2><p><a href="https://juejin.cn/post/7122622920433598471">从0搭建Vue3组件库之Icon组件-iconfont</a></p><h2 id="Link组件的实现"><a href="#Link组件的实现" class="headerlink" title="Link组件的实现"></a><strong>Link组件的实现</strong></h2><p>Link组件的实现较为简单，和button组件也比较类似，只需要根据传入的属性渲染不同样式和行为的链接，包括禁用状态，类型，和下划线等，必要的注释在代码中都已经提供，大家可以当做练习独立完成。</p><p>其思路如下</p><ol><li>功能</li><li>Link 组件的基本功能，例如显示文本、跳转链接等。</li><li>组件的可选特性，例如链接样式、是否有下划线、是否禁用等。</li><li>组件API</li><li>定义 Link 组件的 Props, 链接类型、是否有下划线、是否禁用、链接地址、链接打开的目标窗口等。</li><li>定义 Link 组件的事件，例如点击事件.</li><li>模板和样式</li><li>使用 <a> 标签作为 Link 组件的基础元素。</li><li>根据传入的 Props 动态设置 <a> 标签的属性，例如 href、target、class 等。</li><li>在链接内部包含其他内容，例如图标、文本等，以插槽的形式提供。</li><li>编写逻辑</li><li>使用计算属性或者函数，根据 Props 的值计算出需要的样式或行为</li><li>监听用户的交互事件，根据是否禁用决定是否触发相应的事件。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Icon组件实现思路&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定图标库：首先要确定你将使用的图标库，比如Font Awesome、Material Icons，这决定了你将从哪里获取图标，以及如何在组件中使用它们。&lt;/li&gt;
&lt;li&gt;安装和引入图标库：</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>03-Container组件的实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c3.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c3.html</id>
    <published>2024-07-07T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>Container组件是用于布局的容器组件，可以方便快速搭建PC管理后台页面的基本结构：</p><p><el-container>：外层容器。 当子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列， 否则会水平左右排列。</p><p><el-header>：顶栏容器。</p><p><el-aside>：侧边栏容器。</p><p><el-main>：主要区域容器。</p><p><el-footer>：底栏容器。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a><strong>实现思路</strong></h2><p>针对Container组件的布局，我们可以使用 flex 布局方式来实现</p><ol><li><el-container> 组件会渲染成一个 <section> 标签，并通过 slot 做内容分发,  默认水平排列，但是也支持传入direction的prop, 根据direction判断水平/垂直排列，此外如果当 <el-container> 容器的子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列，否则会水平左右排列。</li><li>el-header渲染成一个 <header> 标签，并通过 slot 做内容分发,  传入height属性来指定高度，如果不指定，则有默认高度。</li><li>el-footer实现和el-header基本类似</li><li>el-main: 渲染成一个 <main> 标签，并通过 slot 做内容分发, 不设置高度和宽度，通过flex: 1分配剩余空间。</li><li>el-aside: 渲染侧边栏， 传入width属性来指定高度，如果不指定，则有默认宽度。</li></ol><p><a href="https://juejin.cn/post/6844903946448797709?searchId=20240223114200992AFB7A324175968005">黄轶-Container 布局容器组件的设计与实现</a></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><p>参考实现中已经给出了很详细的解释，其实现难点在于样式布局上，需要对flex布局有较好的理解。</p><h3 id="el-container"><a href="#el-container" class="headerlink" title="el-container"></a><strong>el-container</strong></h3><p>该组件略微有难度的地方就是布局方向的判定，该组件接收direction作为属性，其值为’horizontal’ | ‘vertical’。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断布局方向是否是Vertical</span></span><br><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 如果props.direction等于&#x27;vertical&#x27;，返回true</span></span><br><span class="line"> <span class="keyword">if</span> (props.<span class="property">direction</span> === <span class="string">&#x27;vertical&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(props.<span class="property">direction</span> === <span class="string">&#x27;horizontal&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果props.direction等于&#x27;horizontal&#x27;，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>另外一个条件是子元素中有 el-header 或 el-footer 时为 vertical，否则为 horizontal</p><p>slots.default()会返回一个包含了当前插槽内容的虚拟节点数组。这个数组中的每个元素都是一个虚拟节点对象，描述了当前插槽内容的各个部分。</p><p>每个虚拟节点对象通常包含以下一些重要属性：</p><ol><li>type：表示节点的类型，可以是一个字符串（表示HTML标签名），或是一个组件对象。</li><li>props：包含了节点的属性和事件监听器等信息。</li><li>children：是一个包含了当前节点的子节点的虚拟节点数组。</li></ol><p>如果type是一个组件，则通常包含下面属性：</p><ol><li>name：组件的名称，可以通过这个属性获取组件的名称。</li><li>props：组件的属性，包含了组件接受的props以及它们的类型等信息。</li><li>emits：组件发出的事件，包含了组件可以发出的事件名称以及它们的参数类型等信息。</li><li>setup：组件的setup函数，包含了组件的响应式数据、计算属性、方法等逻辑。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// .......... 省略代码</span></span><br><span class="line"> <span class="comment">// 如果插槽存在且有默认插槽内容</span></span><br><span class="line"> <span class="keyword">if</span>(slots &amp;&amp; slots.<span class="property">default</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用slots.default获取默认插槽中的所有vNode节点</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">vNodes</span>: <span class="title class_">VNode</span>[] = slots.<span class="title function_">default</span>()</span><br><span class="line">  <span class="comment">// 遍历 vNode节点数组，如果存在el-header/el-footer</span></span><br><span class="line">  <span class="keyword">return</span> vNodes.<span class="title function_">some</span>(<span class="function"><span class="params">vNode</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将 vNode.type 断言为 Component 类型，然后获取组件类型属性 name</span></span><br><span class="line">   <span class="keyword">const</span> tag = (vNode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">Component</span>).<span class="property">name</span></span><br><span class="line">   <span class="keyword">return</span> tag === <span class="string">&#x27;ElHeader&#x27;</span> || tag === <span class="string">&#x27;ElFooter&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 插槽不存在或者没有默认插槽内容，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="el-header-aside-main-footer的实现"><a href="#el-header-aside-main-footer的实现" class="headerlink" title="el-header/aside/main/footer的实现"></a><strong>el-header/aside/main/footer的实现</strong></h3><p>以el-header组件为例，该组件使用slot接收传递的内容，并接受一个height 作为props, 默认高度为60px ， 在传递height的情况下，以传入的height值为准。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;header class=&quot;el-header&quot; :style=&quot;headerHeight&quot;&gt;</span><br><span class="line">  &lt;slot&gt;Header&lt;/slot&gt;</span><br><span class="line"> &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; HeightProps &#125; from &#x27;./types&#x27;</span><br><span class="line">​</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElHeader&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">// 接收height作为参数</span><br><span class="line">const props = defineProps&lt;HeightProps&gt;()</span><br><span class="line">// 计算 Header的高度</span><br><span class="line">const headerHeight = computed(() =&gt; &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">  height: (props.height || 60) + &#x27;px&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Container组件是用于布局的容器组件，可以方便快速搭建PC管理后台页面的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;el-container&gt;：外层容器。 当子元素中包含 &lt;el-header&gt; 或 &lt;el-footer&gt; 时，全部子元素会垂直上下排列， 否则会水平左右排列。&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>02-Button按钮组件</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c2.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c2.html</id>
    <published>2024-07-06T16:31:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>关于Button组件的实现，网上有非常多的文章，借助实现该组件，我们可以掌握组件封装和实现的基本思路，本篇文章如果写的不是很详细，可以参考这篇文章：<a href="https://juejin.cn/post/7103081918266081287?searchId=202401221508015F93F063191DCAE7D770">手摸手教你仿一下Element-ui的Button组件</a></p><h2 id="组件通用实现思路"><a href="#组件通用实现思路" class="headerlink" title="组件通用实现思路"></a><strong>组件通用实现思路</strong></h2><ol><li>组件设计<ul><li>确定要实现的组件，一些常见的基础组件（按钮、输入框等），高级组件（表格、表单、轮播图等）</li><li>设计组件的API,  包括支持的props、events和slots</li></ul></li><li>UI设计<ul><li>设计组件的样式和布局，应当保持视觉上的统一和美观</li></ul></li><li>组件实现<ul><li>遵循最佳实践，使用组件化、模块化和可复用性的原则来编写代码</li><li>组件实现要考虑到可维护性和可扩展性</li></ul></li><li>文档和示例<ul><li>编写清晰的文档，包括组件的使用说明、API 文档和示例代码</li><li>提供丰富的示例，帮助用户理解和使用组件</li></ul></li><li>测试<ul><li>编写单元测试和集成测试，确保组件的功能和性能符合预期</li><li>进行用户体验测试，收集用户反馈，并及时修复和改进组件</li></ul></li><li>版本管理和发布</li></ol><h2 id="Button组件实现原理"><a href="#Button组件实现原理" class="headerlink" title="Button组件实现原理"></a><strong>Button组件实现原理</strong></h2><p>Button组件官网：<a href="https://element.eleme.io/#/zh-CN/component/button">https://element.eleme.io/#/zh-CN/component/button</a></p><p>Button（按钮）组件通常是一个可以点击的区域，用户可以通过鼠标点击从而触发与该按钮相关联的功能或动作，HTML有原生的button元素，而Button组件只是通过props属性接受父组件传递过来的参数，例如按钮的类型、尺寸和禁用状态等，而这些参数可以在组件内部使用，在button按钮上根据参数添加各式各样的class类名，从而动态生成按钮的样式和行为。</p><p><img src="https://www.picgo.net/image/SaQZpu" alt=""></p><p>我们可以打开其源码或者打开控制台查看。</p><p><img src="https://www.picgo.net/image/SaQBQj" alt=""></p><h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a><strong>组件实现</strong></h2><h3 id="Button组件实现思路"><a href="#Button组件实现思路" class="headerlink" title="Button组件实现思路"></a><strong>Button组件实现思路</strong></h3><p>根据组件通用实现思路，我们想要实现一个Button组件，需要考虑以下方面：</p><ul><li><p>Props属性：定义组件的属性，以便用户可以通过属性来自定义按钮的外观和行为， 比如按钮的类型（primary、success、warning、danger 等）、尺寸（large、medium、small 等）、禁用状态，ElementUI 实现了各式各样的button 组件，按照其网站上的描述，包含下面属性。</p><p><img src="https://www.picgo.net/image/SaQMJN" alt=""></p></li><li><p>事件：点击按钮时触发事件，原生button标签即可支持。</p></li><li><p>Slot插槽：提供插槽，以便用户可以在按钮内部插入自定义的内容，例如按钮上的文本、图标等。</p></li><li><p>样式：按钮样式包括基本样式和根据用户传入的属性来动态修改样式的功能（判断是否有对应的属性从而动态添加类名）。</p></li></ul><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a><strong>基本实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button</span><br><span class="line">  :class=&quot;[&#x27;btn&#x27;, `btn-$&#123;type&#125;`, `btn-$&#123;size&#125;`, &#123; &#x27;btn-disabled&#x27;: disabled &#125;]&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  @click=&quot;handleClick&quot;</span><br><span class="line"> &gt;</span><br><span class="line">  &lt;slot&gt;Button Text&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;,</span><br><span class="line"> props: &#123;</span><br><span class="line">  type: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;default&#x27; // 可选值: &#x27;default&#x27;, &#x27;primary&#x27;, &#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  size: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;medium&#x27; // 可选值: &#x27;small&#x27;, &#x27;medium&#x27;, &#x27;large&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  disabled: &#123;</span><br><span class="line">   type: Boolean,</span><br><span class="line">   default: false</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">   this.$emit(&#x27;click&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a><strong>属性定义</strong></h3><p>在component文件夹下新建Button文件夹，定义<a href="http://button.vue/">Button.vue</a>和<a href="http://types.ts/">types.ts</a> 两个文件，分别用于定义组件和组件中使用的ts类型。</p><p>button组件接收type\size\plain\round\disabled等props属性，我们提前在types文件中定义好（也可以定义在Vue组件中）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button/types.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 定义button接收的props类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line">  <span class="comment">// type: 类型为string</span></span><br><span class="line">  <span class="attr">type</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面，提前定义</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span>&gt;,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">    </span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="attr">size</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">ProType</span>&lt;<span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span>&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonType</span> = <span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span></span><br><span class="line"><span class="comment">// 按钮尺寸, 额外的尺寸：medium、small、mini，通过设置size属性来配置它们。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonSize</span> = <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span></span><br><span class="line"><span class="comment">// 原生按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">NativeType</span> = <span class="string">&#x27;button&#x27;</span> | <span class="string">&#x27;submit&#x27;</span> | <span class="string">&#x27;reset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line"> <span class="attr">type</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">size</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonSize</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">plain</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">round</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">circle</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">disabled</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">autofocus</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">loading</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">nativeType</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">NativeType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="http://button.vue/">Button.vue</a> 中定义Button组件，其结构比较简单，就是button按钮，class样式控制其样式，并接收传递的slot作为显示的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button class=&quot;el-button&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  :autofocus=&quot;autofocus&quot;</span><br><span class="line">  :type=&quot;nativeType&quot;</span><br><span class="line">  :class=&quot;[</span><br><span class="line">  type ? &#x27;el-button--&#x27; + type : &#x27;&#x27;,</span><br><span class="line">  size ? &#x27;el-button--&#x27; + size : &#x27;&#x27;,</span><br><span class="line">  &#123;</span><br><span class="line">   &#x27;is-disabled&#x27;: disabled,</span><br><span class="line">   &#x27;is-plain&#x27;: plain,</span><br><span class="line">   &#x27;is-round&#x27;: round,</span><br><span class="line">   &#x27;is-circle&#x27;: circle,</span><br><span class="line">   &#x27;is-loading&#x27;: loading</span><br><span class="line">  &#125;</span><br><span class="line"> ]&quot;&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; buttonProps &#125; from &#x27;./types&#x27;</span><br><span class="line">// 定义组件名称</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 接收props</span><br><span class="line">defineProps(buttonProps)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a><strong>CSS样式</strong></h3><p>根据需要编写button组件的CSS样式，使其具有对应的效果即可。</p><h3 id="暴露组件实例"><a href="#暴露组件实例" class="headerlink" title="暴露组件实例"></a><strong>暴露组件实例</strong></h3><p>在使用我们定制的组件时，有时会通过ref 获取组件实例，进而使用DOM元素，但是<script setup>组件默认关闭，我们可以通过defineExpose获取组件实例，其实现在ElementPlus源码中也可以看到，操作也很简单，只需要绑定一个ref并暴露出来即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定义组件实例</span><br><span class="line">const _ref = ref&lt;HTMLButtonElement&gt;()</span><br><span class="line">// defineExpose暴露实例</span><br><span class="line">defineExpose(&#123;</span><br><span class="line"> ref: _ref</span><br><span class="line">&#125;)</span><br><span class="line">// 在&lt;button&gt;&lt;/button&gt;上绑定 ref=&quot;_ref&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于Button组件的实现，网上有非常多的文章，借助实现该组件，我们可以掌握组件封装和实现的基本思路，本篇文章如果写的不是很详细，可以参考这篇文章：&lt;a href=&quot;https://juejin.cn/post/7103081918266081287?searchId=20</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>01-项目创建和开发规范</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c1.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c1.html</id>
    <published>2024-07-05T15:51:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>使用Vite创建项目</p><p>官方文档：<a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链</a> </p><p>Vite是一个轻量级的，速度极快的构建工具，也是Vue3官方推荐的脚手架，使用Vite可以快速创建一个Vue3 + Typescript项目。</p><p><strong>前置准备</strong></p><p>你需要在Vscode的插件市场中搜索Volar并安装下面两个插件（安装插件后需要重新加载VSCode)</p><p>如果你之前安装了Vetur, 请禁用掉，并改用Volar, 它现在是 Vue 3 项目的官方推荐。</p><p>此外，你还需要在浏览器插件市场中安装Vue Dev tools</p><h2 id="使用Vite创建项目"><a href="#使用Vite创建项目" class="headerlink" title="使用Vite创建项目"></a><strong>使用Vite创建项目</strong></h2><p>创建项目，在终端中输入以下命令：</p><p><code>npm create vite@latest</code></p><p>然后按照提示操作即可！</p><ol><li>Project name: 定义项目名称my-elem</li><li>Select a framework: 选择Vue</li><li>Select a variant: 选择TypeScript</li></ol><p>启动项目需要执行下面的命令(当然你也可以使用yarn)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-elem</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板，具体命令请查看官网。</p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a><strong>项目目录</strong></h2><p>创建出来的模板项目具有如下目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|-node_modules          -- 第三方包存储目录</span><br><span class="line">|-public             -- 静态资源目录</span><br><span class="line">    |--vite.svg           -- 网站地址栏前面的小图标</span><br><span class="line">|-src              -- src目录</span><br><span class="line">    |-assets               -- 资源目录，存放图片等资源</span><br><span class="line">    |-components             -- 定义公共组件</span><br><span class="line">    |--App.vue              -- 根组件</span><br><span class="line">    |--style.css             -- 项目的通用CSS样式</span><br><span class="line">    |--main.ts              -- 项目入口文件</span><br><span class="line">    |--vite-env.d.ts         -- 类型声明文件，定义项目的全局类型</span><br><span class="line">|--.gitignore          -- git的管理配置文件</span><br><span class="line">|--index.html          -- 项目的默认首页</span><br><span class="line">|--package-lock.json      -- 包安装时的版本号</span><br><span class="line">|--package.json         -- 项目配置文件，包管理、项目名称、版本和命令</span><br><span class="line">|--README.md          -- 项目说明文件</span><br><span class="line">|--tsconfig.json        -- 指定 TypeScript 编译器的行为</span><br><span class="line">|--tsconfig.node.json      -- 配置在 Node.js 环境下编译 TypeScript 代码的选项</span><br><span class="line">|--vite.config.ts        -- 配置 Vite 构建工具的行为</span><br></pre></td></tr></table></figure><h2 id="编程规范-Eslint"><a href="#编程规范-Eslint" class="headerlink" title="编程规范-Eslint"></a><strong>编程规范-Eslint</strong></h2><p>很多人写代码有自己的风格，比如有的人喜欢在结尾加;, 但是有的人不加，这些争论还有字符串是使用单引号还是双引号，是使用空格还是tab, 正是因为每个人风格不一样，代码合并之后就会显得丑陋，如果希望团队开发者都遵循一套相同的代码规范，可以使用工具Eslint进行约束，它可以帮助你进行代码格式检测，并自动修复代码中的语法问题。</p><p>中文文档地址：<a href="https://zh-hans.eslint.org/docs/latest/use/getting-started">https://zh-hans.eslint.org/docs/latest/use/getting-started</a></p><p>你可以使用该命令安装并配置 ESLint：</p><p>npm init @eslint/config</p><p>在安装的过程中，你会遇到很多次询问。</p><p>如果觉得下面的操作不够详细，可以看这篇博客：前端Vuer，请给你的项目加上 ESLint</p><ol><li>你想怎么使用Eslint： 选择第二个</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only //只检查语法</span><br><span class="line">❯ To check syntax and find problems // 检查语法并发现问题</span><br><span class="line">  To check syntax, find problems, and enforce code style // 检查语法、发现问题并强制执行代码样式</span><br></pre></td></tr></table></figure><ol><li>使用哪种类型的模块，这里使用Esmodules</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What type of modules does your project use? … </span><br><span class="line">❯ JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>使用什么框架</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? … </span><br><span class="line">  React</span><br><span class="line">❯ Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>是否使用TypeScript: 选择 Yes</li><li>运行在哪种环境：选择Browser/Node,  浏览器环境和Node环境均配置</li><li>配置文件格式是什么</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? … </span><br><span class="line">❯ JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><ol><li>选择以什么工具安装上面的包：选择npm</li></ol><p>完成上面的操作之后，就会自动生成一个<a href="http://.eslintrc.cjs/">.eslintrc.cjs</a>配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;env&quot;: &#123; // 支持的环境</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;es2021&quot;: true,</span><br><span class="line">    &quot;node&quot;: true</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;extends&quot;: [ // 使用那些拓展</span><br><span class="line">    &quot;eslint:recommended&quot;,</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;,</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot;</span><br><span class="line">   ],</span><br><span class="line">  &quot;overrides&quot;: [ // 匹配哪些文件的 配置</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;env&quot;: &#123;</span><br><span class="line">        &quot;node&quot;: true</span><br><span class="line">       &#125;,</span><br><span class="line">      &quot;files&quot;: [</span><br><span class="line">        &quot;.eslintrc.&#123;js,cjs&#125;&quot;</span><br><span class="line">       ],</span><br><span class="line">      &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;sourceType&quot;: &quot;script&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaVersion&quot;: &quot;latest&quot;, // 指定要使用的 ECMAScript 版本</span><br><span class="line">    &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">    &quot;sourceType&quot;: &quot;module&quot; // 指定代码的来源类型,如果你的代码是 ES 模块，则应设置为 &#x27;module&#x27;。</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@typescript-eslint&quot;,</span><br><span class="line">    &quot;vue&quot;</span><br><span class="line">   ],</span><br><span class="line">  // Eslint规则: https://eslint.org/docs/latest/rules/</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">   // 如果你要关闭某条规则你可以 off</span><br><span class="line">   // 如果你希望某条规则报错 你可以 error</span><br><span class="line">   // 如果你希望只是警告 你可以设置为 warn</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以尝试在rules中进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    // 表示需要加分号，不加就会报错</span><br><span class="line">    &quot;semi&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存代码，就会发现在每行的末尾没有加分号的就会报错。(<strong>需要在Vscode中安装Eslint插件</strong>)</p><p>这样的规则有很多，比如no-unused-var,表示声明的变量必须使用：具体的可以在<a href="https://eslint.org/docs/latest/rules/">https://eslint.org/docs/latest/rules/</a>中找到，为了简化这些规则的书写，eslint提供了推荐的配置集合，即extends选项中配置的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;eslint:recommended&quot;, // ESLint 官方提供的推荐配置集</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;, // 适用于 TypeScript 代码的规则集</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot; // 针对 Vue.js 3 版本的 ESLint 插件提供的基本配置集</span><br><span class="line">   ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vite添加Eslint支持"><a href="#Vite添加Eslint支持" class="headerlink" title="Vite添加Eslint支持"></a><strong>Vite添加Eslint支持</strong></h2><p>上面的操作只是在项目中安装了Eslint, 但是还没有与Vite项目进行集成，这需要安装插件vite-plugin-eslint</p><p>npm i vite-plugin-eslint —save-dev</p><p>如果你遇到了Could not find a declaration file for module ‘vite-plugin-eslint’的报错，请参考下面的解决方案</p><p><a href="https://juejin.cn/post/7313507274868965439">https://juejin.cn/post/7313507274868965439</a></p><p><a href="https://github.com/gxmari007/vite-plugin-eslint/issues/74">https://github.com/gxmari007/vite-plugin-eslint/issues/74</a></p><p>然后修改<a href="http://vite.config.ts/">vite.config.ts</a>的代码，添加对vite-plugin-eslint的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">// 添加下面一行代码</span><br><span class="line">import eslintPlugin from &#x27;vite-plugin-eslint&#x27;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line"> plugins: [vue(), eslintPlugin()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Vite创建项目&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://cn.vitejs.dev/&quot;&gt;Vite | 下一代的前端工具链&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Vite是一个轻量级的，速度极快的构建工具，也是Vue3官方推荐的脚手架，使用Vite可以快速创建一个V</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>00-Typescript基础</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c0.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c0.html</id>
    <published>2024-07-04T11:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<p>想要系统学习ts ，可以查看阮一峰老师的教程 <a href="https://wangdoc.com/typescript/intro">TypeScript教程</a></p><h3 id="为什么需要TypeScript"><a href="#为什么需要TypeScript" class="headerlink" title="为什么需要TypeScript"></a><strong>为什么需要TypeScript</strong></h3><p>JavaScript 是一门动态运行语言，没有类型检测，但是这也导致了有很多错误到了运行阶段才能发现，比如说下面一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLen</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getLen</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="title function_">getLen</span>() <span class="comment">// 只有在运行时才会报错</span></span><br></pre></td></tr></table></figure><h3 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a><strong>什么是TypeScript</strong></h3><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p><p>Typescript是JavaScript的超集，支持类型，并且最终会被编译成JS代码。</p><h3 id="TS运行环境"><a href="#TS运行环境" class="headerlink" title="TS运行环境"></a><strong>TS运行环境</strong></h3><ol><li>前置条件</li></ol><p>安装ts前，要提前安装<a href="http://node.js/">Node.js</a> , 并且<a href="http://node.js/">Node.js</a>版本最好在V16以上，建议你使用nvm来管理你的nodejs版本。</p><ol><li>ts的安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 ts</span><br><span class="line">npm install typescript -g</span><br><span class="line"># 查看tsc的版本</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h3 id="TS基本示例"><a href="#TS基本示例" class="headerlink" title="TS基本示例"></a><strong>TS基本示例</strong></h3><p>新建hello.ts文件，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>执行下列命令，会看到生成一个.js文件，是与之对应的js代码</p><p>tsc hello.ts</p><p>修改ts代码，在函数参数中加上name:string , 这表示传入的参数名称为name, 类型为string ，如果传入其他类型的参数，比如整数类型100， 代码会自动报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params">name:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&quot;jack&quot;</span>)</span><br><span class="line"><span class="comment">// 下一行代码会自动报错：100下方有红色波浪线</span></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h3><p>想要为变量添加类型很简单，就是在变量后面添加: type ，但是一旦添加上类型之后，就不能修改其值的类型，比如下面的示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line"><span class="comment">// 不被允许 </span></span><br><span class="line"><span class="comment">// name = 100</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isMale</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a><strong>联合类型</strong></h3><p>联合类型是由两个或者多个其他类型组成的类型，类型和类型之间用| 关联，值可以是类型中的任何一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="type类型别名"><a href="#type类型别名" class="headerlink" title="type类型别名"></a><strong>type类型别名</strong></h3><p>假设有多个类型都需要用到同一个类型，别名不允许重名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">---</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumOrStr</span> = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a><strong>类型缩小</strong></h3><p>如果一个变量有多种类型，读取该变量时，往往需要进行“类型缩小”, 区分该值到底属于哪一种类型，然后再进一步处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br><span class="line"><span class="comment">// 下面一行代码还是会报错, 类型number上不存在length属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br></pre></td></tr></table></figure><p>可以使用 typeof/switch等类型判断的方法进行类型缩小。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a><strong>类型推断</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;mike&quot;</span> <span class="comment">// 类型推断为string</span></span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h3><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IName</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = <span class="title class_">IName</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">age</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a><strong>any</strong></h3><p>如果你不想限制变量的类型，可以使用any, 但是并不推荐这样做。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">any</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line">name = <span class="number">30</span></span><br><span class="line">name = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a><strong>数组的声明</strong></h3><p>在ts中，要求所有成员必须满足类型要求，其类型有两种写法，第一种是成员的类型之后，加上方括号。如果成员有多种类型，可以使用()将联合类型包起来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:(<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>第二种写法是使用内置的 Array 接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="元组的声明"><a href="#元组的声明" class="headerlink" title="元组的声明"></a><strong>元组的声明</strong></h3><p>元组是ts特有的，在数组中应该尽量保持成员类型是相同的，但是元组的成员类型可以自由设置，各个成员的类型可以不同。</p><p>const a: [string, number, string] = [“mike”, 18, “male”]</p><p>使用元组时，必须给出类型，否则会将其视为数组</p><p>const a = [“mike”, 18] // 类型被推断为 (number | string)[]</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><p>除了原始类型，ts还可以为对象定义类型，比如说用一个对象表示一个坐标点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要求坐标的 x 属性和 y 属性必须传入整数时，可以这样做</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样无法通用，我们可以用type为该类型起一个别名，简化使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// point的类型为PointType</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个属性是可选的（即可以忽略），需要在属性名后面加一个问号。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>,</span><br><span class="line">    z?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以传递或者不传递 z 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a><strong>interface</strong></h3><p>interface的使用和type十分相似，都是用来定义类型，基本用法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interface可以扩展，这意味着可以声明同名的interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">z</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交叉类型-1"><a href="#交叉类型-1" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h3><p>JS中对函数的参数个数，参数类型，返回类型均不做限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) : <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h3><p>开发中，经常需要定义一组相关的常量，比如方向Direction, 状态码Status, 因此ts中引入了枚举结构，将相关常量放在一起。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举结构的默认值从0开始，依次递增, 我们也可以为成员显式赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个颜色的枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="string">&quot;RED&quot;</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="string">&quot;GREEN&quot;</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="string">&quot;BLUE&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><strong>泛型</strong></h3><p>泛型是ts的难点</p><p>泛型可以在编写函数、类或者接口的时候传递类型参数，这些类型参数在使用时才被具体指定，就相当于一个占位符，在使用时才会传入具体类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数使用了类型参数 T, 但是 T是什么并不确定</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们可以对函数进行调用，函数被调用时会被具体参数替代。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T 被替换为 string 类型</span></span><br><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 输出: Hello</span></span><br><span class="line"><span class="comment">// T 被替换为 number 类型</span></span><br><span class="line"><span class="keyword">let</span> numberResult = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于类和接口, 其写法也是在类的名称后面加上<T></p><p>下面我们定义一个Box 类接受类型参数 T，并使用它来定义实例变量和方法的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">102</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: 102</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型接口，表示具有一个值的容器</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">numberContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">99</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">stringContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberContainer.<span class="property">value</span>); <span class="comment">// 输出: 99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringContainer.<span class="property">value</span>); <span class="comment">// 输出: Hello</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a><strong>泛型约束</strong></h3><p>直接使用泛型太过自由，有的时候我们需要让泛型类型参数满足某些条件，比如下面代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">   <span class="comment">// 代码报错，类型 T 上不存在属性 length</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此ts提供了语法约束类型参数，如果不满足约束条件，编译时就会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> hasLength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受一个类型参数 T，该参数必须符合 hasLength 接口</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T <span class="keyword">extends</span> hasLength&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用泛型约束，我们在函数内部可以安全地访问arg.length属性。</p><h3 id="类型声明文件"><a href="#类型声明文件" class="headerlink" title="类型声明文件"></a><strong>类型声明文件</strong></h3><p><u>xx.d.ts</u>  , d 表示声明，类型声明。</p><p><u>tsconfig.json </u> 是TS项目的配置文件, 供tsc编译器使用，其内容是一个JSON对象，通过这个配置文件，你可以定义项目的编译选项、文件包含与排除规则、模块解析规则等。</p><p>关于配置的更多内容，可以在官网查看：<a href="https://www.typescriptlang.org/tsconfig">tsconfig说明</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想要系统学习ts ，可以查看阮一峰老师的教程 &lt;a href=&quot;https://wangdoc.com/typescript/intro&quot;&gt;TypeScript教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么需要TypeScript&quot;&gt;&lt;a href=&quot;#为什么需要TypeSc</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a549.html"/>
    <id>https://daixueshengt.github.io/posts/c993a549.html</id>
    <published>2024-06-08T09:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="43-localStorage和sessionStorage的区别"><a href="#43-localStorage和sessionStorage的区别" class="headerlink" title="43.localStorage和sessionStorage的区别"></a>43.localStorage和sessionStorage的区别</h2><p>localStorage：永久存储在本地，适合保存在本地的数据</p><p>sessionStorage：会话级的存储，敏感账号一次性登录</p><p>相同点：</p><ul><li>都是保存在浏览器端</li><li>不会把数据自动的发送给服务器，仅在本地保存</li><li>只能存储字符串，可以将对象JSON.stringfy()编码之后进行存储</li></ul><p>不同点：</p><ul><li>存储大小限制不同：sessionStorage存储的大小为5M，localStorage存储大小为20M</li><li>数据有效期不同：localStorage始终有效，窗口关闭或浏览器关闭，一直保存，持久保存数据</li><li>作用域不同：sessionStorage在不同的浏览器窗口不会进行共享，只有同一个页面中共享。localStorage在所有同源的窗口下可以共享。</li></ul><h2 id="leetcode20-有效的括号"><a href="#leetcode20-有效的括号" class="headerlink" title="leetcode20. 有效的括号"></a>leetcode<a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> start = s[i];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span> || s[i]==<span class="string">&#x27;[&#x27;</span> || s[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> end = stack[stack.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(end==<span class="string">&#x27;(&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;)&#x27;</span> ||end==<span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;&#125;&#x27;</span> || end==<span class="string">&#x27;[&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span>==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode1047-删除字符串中的所有相邻重复项"><a href="#leetcode1047-删除字符串中的所有相邻重复项" class="headerlink" title="leetcode1047. 删除字符串中的所有相邻重复项"></a>leetcode<a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(v <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">let</span> prev =stack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(prev!=v)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(prev);</span><br><span class="line">            stack.<span class="title function_">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode104771-简化路径"><a href="#leetcode104771-简化路径" class="headerlink" title="leetcode104771. 简化路径"></a>leetcode<a href="https://leetcode.cn/problems/simplify-path/">104771. 简化路径</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> simplifyPath = <span class="keyword">function</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack =[]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val &amp;&amp; val==<span class="string">&#x27;..&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val &amp;&amp; val!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    arr.<span class="property">length</span> ? str=<span class="string">&#x27;/&#x27;</span>+stack.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>):str=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;43-localStorage和sessionStorage的区别&quot;&gt;&lt;a href=&quot;#43-localStorage和sessionStorage的区别&quot; class=&quot;headerlink&quot; title=&quot;43.localStorage和sessionSto</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a548.html"/>
    <id>https://daixueshengt.github.io/posts/c993a548.html</id>
    <published>2024-06-07T09:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="38-宏任务和微任务"><a href="#38-宏任务和微任务" class="headerlink" title="38.宏任务和微任务"></a>38.宏任务和微任务</h2><p>js是单线程的 、 主线程</p><p>宏任务</p><p>​    分类：setTimeout、setInterval、requestAnimation</p><p>​    1、宏任务所处的队列就是宏任务队列</p><p>​    2、第一个宏任务队列中只有一个任务：执行主线程的js代码</p><p>​    3、宏任务队列可以有多个</p><p>​    4、当宏任务队列中的任务全部执行完以后会查看是否有微任务队列 如果有先执行微任务队列中的所有任务，如果没有就查看是否有宏任务队列</p><p>微任务</p><p>​    分类：new Promise().then(回调)    process.nextTick</p><p>​    微任务所处的队列就是微任务队列</p><p>​    只有一个微任务队列</p><p>​    在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务</p><p>默认一开始第一个宏任务队列中只有一个任务：执行主线程的js代码；执行完毕后检查是否有微任务，有则执行完 再执行宏任务队列。</p><p>代码案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---start---&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>();<span class="comment">//修改promise实例对象的状态为成功状态</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise实例成功回调执行&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---end---&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>—-start—-</p><p>0</p><p>1</p><p>2</p><p>3</p><p>4</p><p>—-end—-</p><p>promise实例成功回调执行</p><p>setTimeout</p><h2 id="39-比较React与Vue"><a href="#39-比较React与Vue" class="headerlink" title="39.比较React与Vue"></a>39.比较React与Vue</h2><p>1）相同点</p><ul><li>都有组件化开发和虚拟dom</li><li>都支持props进行父子组件间数据通信</li><li>都支持数据驱动视图，不直接操作真实dom，更新状态数据界面就自动更新</li><li>都支持服务器端渲染</li><li>都有支持native 的方案,React 的 React Native,Vue 的Weex</li></ul><p>2）不同点</p><ul><li>数据绑定vue 实现了数据的双向绑定,react 数据流动是单向的</li><li>组件写法不一样,React 推荐的做法是 JSX，也就是把 HTML和 CSS 全都写进 JavaScript了,即’all in js’; Vue 推荐的做法是webpack+vue-loader 的单文件组件格式,即 html,css,js 写在同一个文件</li><li>state 对象在 react 应用中不可变的,需要使用 setstate 方法更新状态;在 vue 中,state 对象不是必须的,数据由 data 属性在 vue 对象中管理</li></ul><h2 id="40-Redux管理状态的机制"><a href="#40-Redux管理状态的机制" class="headerlink" title="40.Redux管理状态的机制"></a>40.Redux管理状态的机制</h2><p>1) redux 是一个独立专门用于做状态管理的JS库，不是 react 插件库</p><p>2)它可以用在 react, angular, vue 等项目中,但基本与 react 配合使用</p><p>3)作用:集中式管理 react 应用中多个组件共享的状态和从后台获取的数据</p><h2 id="41-VUE组件间通信方式"><a href="#41-VUE组件间通信方式" class="headerlink" title="41.VUE组件间通信方式"></a>41.VUE组件间通信方式</h2><p>1）通信种类</p><p>1.父向子</p><p>2.子向父</p><p>3.隔代组件间通信</p><p>4.兄弟组件间通信</p><p>2）实现通信方式</p><p>1.props</p><ul><li>通过一般属性实现父向子通信</li><li>通过函数属性实现子向父通信</li><li>缺点：隔代组件和兄弟组件间通信比较麻烦</li></ul><p>2.vue自定义事件</p><ul><li>vue内置实现，可以代替函数类型的props<ul><li>绑定监听：&lt;MyComp @eventName=”callback”</li><li>触发事件：this.$emit(“eventName,data)</li></ul></li><li>缺点：只适合于子向父通信</li></ul><p>3.消息订阅与发布</p><ul><li>需要引入消息订阅与发布的实现库，如：pubsub-js<ul><li>订阅消息：PubSub.subscribe(‘msg’,(msg,data)=&gt;{})</li><li>发布消息：PubSub.publish(‘msg’,data)</li></ul></li><li>优点：此方式可用于任意关系组件间通信</li></ul><p>4.vuex</p><ul><li>是什么: vuex 是 vue 官方提供的集中式管理 vue 多组件共享状态数据的 vue 插件</li><li>优点：对组件间关系没有限制，且相比于pubsub库管理更集中，更方便</li></ul><p>5.slot</p><ul><li>是什么：专门用来实现父向子传递带数据的标签</li><li>注意：通信的标签板块是在父组件中解析好后再传递给子组件的</li></ul><h2 id="42-说说vue的MVVM实现原理"><a href="#42-说说vue的MVVM实现原理" class="headerlink" title="42.说说vue的MVVM实现原理"></a>42.说说vue的MVVM实现原理</h2><p>Vue作为MVVM模式的实现库的2种技术</p><ul><li>模版解析</li><li>数据绑定</li></ul><p>模版解析：实现初始化显示</p><ul><li>解析大括号表达式</li><li>解析指令</li></ul><p>数据绑定：实现更新显示</p><ul><li>通过数据劫持实现</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;38-宏任务和微任务&quot;&gt;&lt;a href=&quot;#38-宏任务和微任务&quot; class=&quot;headerlink&quot; title=&quot;38.宏任务和微任务&quot;&gt;&lt;/a&gt;38.宏任务和微任务&lt;/h2&gt;&lt;p&gt;js是单线程的 、 主线程&lt;/p&gt;
&lt;p&gt;宏任务&lt;/p&gt;
&lt;p&gt;​    分</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a547.html"/>
    <id>https://daixueshengt.github.io/posts/c993a547.html</id>
    <published>2024-06-06T10:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="31-你是如何理解ES6中Promise的以及它的实例方法？"><a href="#31-你是如何理解ES6中Promise的以及它的实例方法？" class="headerlink" title="31.你是如何理解ES6中Promise的以及它的实例方法？"></a>31.你是如何理解ES6中Promise的以及它的实例方法？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是异步编程的一种解决方案</span></span><br><span class="line"><span class="comment">// 三种状态：pending（进行中），fulfilled（已成功），rejected（已失败）</span></span><br><span class="line"><span class="comment">// 特点：状态不受外界的影响，只有异步操作的结果，决定当前是哪一种状态，一旦状态改变就不会再变</span></span><br><span class="line"><span class="comment">// 用法：Promise是一个构造函数，用来生成Promise实例</span></span><br><span class="line"><span class="comment">// promise的构造函数接收一个函数作为参数，这个函数有两个参数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="comment">// resolve函数：将promise对象的状态由pending变为fulfilled，在异步操作成功时调用</span></span><br><span class="line">    <span class="title function_">resolve</span>() <span class="comment">// 返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reject函数：将promise对象的状态由pending变为rejected，在异步操作失败时调用</span></span><br><span class="line">    <span class="title function_">reject</span>() <span class="comment">//返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 实例方法</span></span><br><span class="line"><span class="comment">// then():当实例状态发生改变的时候的回调函数,返回的是一个新的promise实例，也就是promise可以链式书写的原因</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="keyword">if</span>(time%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123; <span class="comment">//rejected已失败的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch():用于指定发生错误的回调函数，一般来说通过catch替代then的第二个参数</span></span><br><span class="line"><span class="comment">// finally():用来指定不管Promise对象状态最后如何，都会执行的操作</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后的结果&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="32-ES6中Promise-all的理解以及应用场景？"><a href="#32-ES6中Promise-all的理解以及应用场景？" class="headerlink" title="32.ES6中Promise.all的理解以及应用场景？"></a>32.ES6中Promise.all的理解以及应用场景？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于将多个Promise实例，包装成一个新的Promise实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功01&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功02&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功03&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 参数可以不是数组，但是必须是iterator接口</span></span><br><span class="line"><span class="keyword">let</span> pAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pAll)</span><br><span class="line"><span class="comment">//pAll的状态，由p1,p2,p3来决定，只有当这三个都为成功，pA11才会为成功，</span></span><br><span class="line"><span class="comment">//但是有一个失败，那么就是失败，这个时候第一个失败的实例的返回值，会传递给pAll的回调函数</span></span><br><span class="line"><span class="comment">//如果作为参数的实例，自己定义了catch方法，那么它一旦rejected，不会触pAll的catch方法</span></span><br><span class="line"><span class="comment">//多个请求结果合并在一起</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBannerList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;轮播图的数据&#x27;</span>)&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMusicList</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌曲列表的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getcateList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌单分类的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span>=<span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getMusicList</span>(),<span class="title function_">getcateList</span>()])</span><br><span class="line"><span class="title class_">All</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><h2 id="33-你能说说ES6中Promise-race的用法和使用场景吗？"><a href="#33-你能说说ES6中Promise-race的用法和使用场景吗？" class="headerlink" title="33.你能说说ES6中Promise.race的用法和使用场景吗？"></a>33.你能说说ES6中Promise.race的用法和使用场景吗？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prace)</span><br><span class="line"><span class="comment">//Promise.race区别于promise.all只要实例中有一个先改变状态，就会把这个实例的参数的返回值传给prace的回调函数</span></span><br><span class="line"><span class="comment">// 使用场景：请求超时提示</span></span><br></pre></td></tr></table></figure><h2 id="34-函数节流和防抖"><a href="#34-函数节流和防抖" class="headerlink" title="34.函数节流和防抖"></a>34.函数节流和防抖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">节流函数</span><br><span class="line"><span class="comment">// fn要被节流的函数，delay规定的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line"><span class="comment">// 记录上一次函数触发的时间</span></span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//记录当前函数触发的时间</span></span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">if</span>(nowTime-lastTime &gt; delay)&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">// 同步时间</span></span><br><span class="line">            lastTime =nowTime; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scroll事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;，<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">节流函数：一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="comment">//记录上一次的延时器</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 清除上一次的延时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="comment">// 重新设置新的延时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;, <span class="number">1000</span>);</span><br><span class="line">多次点击按钮，只让最后一次点击后才触发</span><br></pre></td></tr></table></figure><h2 id="35-什么是跨域-解决跨域的办法有哪些"><a href="#35-什么是跨域-解决跨域的办法有哪些" class="headerlink" title="35.什么是跨域?解决跨域的办法有哪些?"></a>35.什么是跨域?解决跨域的办法有哪些?</h2><ol><li>同源策略</li></ol><ul><li>是浏览器安全策略</li><li>协议名、域名、端口号必须完全一致</li></ul><ol><li>跨域</li></ol><ul><li>违背同源策略就会产生跨域</li></ul><ol><li>解决跨域</li></ol><ul><li>jsonp cors 服务器代理。。。</li></ul><p>jsonp解决方案  前端实现方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建script标签</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//数据请求回来会被触发的函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置script的src属性，设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000?callback=getData&#x27;</span>;</span><br><span class="line"><span class="comment">// 让script生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><h2 id="36-从一个url地址到最终页面渲染完成，发生了什么？"><a href="#36-从一个url地址到最终页面渲染完成，发生了什么？" class="headerlink" title="36.从一个url地址到最终页面渲染完成，发生了什么？"></a>36.从一个url地址到最终页面渲染完成，发生了什么？</h2><ol><li><p>DNS解析：将域名地址解析为ip地址</p><ul><li>浏览器DNS缓存</li><li>系统DNS缓存</li><li>路由器DNS缓存</li><li>网络运营商DNS缓存</li><li>递归搜索：blog.baidu.com<ul><li>.com域名下查找DNS解析</li><li>.baidu域名下查找DNS解析</li><li>blog域名下查找DNS解析</li><li>出错了</li></ul></li></ul></li><li><p>TCP连接：三次握手</p><ul><li>第一次握手，浏览器发起，告诉服务器我要发送请求了</li><li>第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧</li><li>第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li></ul></li><li><p>发送请求</p><ul><li>请求报文：http协议的通信内容</li></ul></li><li><p>接受响应</p><ul><li>响应报文</li></ul></li><li><p>渲染页面</p><ul><li>遇见html标记，浏览器调用html解析器解析成token并构建成dom树</li><li>遇到style/link标记，浏览器调用css解析器，处理css标记并构建cssom树</li><li>遇到script标记，调用JavaScript解析器，处理script代码（绑定事件，修改dom树、cssom树）</li><li>将dom树和cssom树合并成一个渲染树</li><li>根据渲染树来计算布局，计算每个节点的几何信息（布局）</li><li>将各个节点颜色绘制到屏幕上（渲染）</li></ul><p>注意：</p><p>这五个步骤不一定按照顺序执行，如果dom树或cssom树被修改了，可能会执行多次布局和渲染。往往实际页面中，这些步骤都会执行多次的。</p></li><li><p>断开连接：TCP四次挥手</p></li></ol><ul><li>第一次挥手：由浏览器发起的，发送给服务器，我东西发送完了（请求报文），你准备关闭吧</li><li>第二次挥手：由服务器发起的，告诉浏览器，我东西接受完了（请求报文），我准备关闭了，你也准备吧</li><li>第三次挥手：由服务器发起的，告诉浏览器，我东西发送完了（响应报文），你准备关闭吧</li><li>第四次挥手：由浏览器发起，告诉服务器，我东西接受完了（响应报文），我准备关闭了，你也准备吧</li></ul><h2 id="37-闭包"><a href="#37-闭包" class="headerlink" title="37.闭包"></a>37.闭包</h2><p>什么是闭包？</p><ol><li>密闭的容器，类似于set，map容器，存储数据的</li><li>闭包是一个对象，存放数据的格式：key：value</li></ol><p>形成条件</p><ol><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li></ol><p>闭包的优点：延长外部函数局部变量的生命周期</p><p>闭包的缺点：容易造成内存泄漏</p><p>注意点：</p><ol><li>合理使用闭包</li><li>用完闭包要及时清除（销毁）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的应用场景</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//2</span></span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;31-你是如何理解ES6中Promise的以及它的实例方法？&quot;&gt;&lt;a href=&quot;#31-你是如何理解ES6中Promise的以及它的实例方法？&quot; class=&quot;headerlink&quot; title=&quot;31.你是如何理解ES6中Promise的以及它的实例方法？&quot;&gt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a546.html"/>
    <id>https://daixueshengt.github.io/posts/c993a546.html</id>
    <published>2024-06-05T23:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="28-如何在JS中对原型进行修改和重写？"><a href="#28-如何在JS中对原型进行修改和重写？" class="headerlink" title="28.如何在JS中对原型进行修改和重写？"></a>28.如何在JS中对原型进行修改和重写？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span><br><span class="line">    <span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接给Person的原型对象用对象进行赋值时，p的构造函数指向根构造函数object</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);<span class="comment">//p(this).__proto__=Person.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//false</span></span><br><span class="line">p.<span class="property">constructor</span>=<span class="title class_">Person</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？"><a href="#29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？" class="headerlink" title="29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？"></a>29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过hasownProperty()//检测一个属性是否属于自身对象，还是继承于原型链上的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">phone</span> = <span class="number">12345</span>;</span><br><span class="line">p.<span class="property">height</span>=<span class="number">182</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;phone&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sex&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="title function_">hasOwnProperty</span>(i))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="30-JS中bind和call、apply有什么作用？它们的区别是什么？"><a href="#30-JS中bind和call、apply有什么作用？它们的区别是什么？" class="headerlink" title="30.JS中bind和call、apply有什么作用？它们的区别是什么？"></a>30.JS中bind和call、apply有什么作用？它们的区别是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：改变函数运行时的this指向</span></span><br><span class="line"><span class="keyword">var</span> uname=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    uname=<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>() <span class="comment">//李四</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>,<span class="number">0</span>)<span class="comment">//张三</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj),<span class="number">0</span>)<span class="comment">//李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//apply:两个参数，第一个是this指向，第二个是函数接收的参数，以数组的形式传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...argus</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...argus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    myname=<span class="string">&quot;王五&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="title function_">apply</span>(person,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);<span class="comment">//传入的参数必须是一个数组</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 如果第一个参数是null或者是undefined，this默认指向window</span></span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//call:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// call 和 apply改变this指向原函数立即执行，临时改变this指向一次</span></span><br><span class="line">fun.<span class="title function_">call</span>(person,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// bind:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// 改变this指向不会立即执行，返回一个永久改变this指向的函数</span></span><br><span class="line"><span class="keyword">var</span> bindFun = fun.<span class="title function_">bind</span>(person)</span><br><span class="line"><span class="title function_">bindFun</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;28-如何在JS中对原型进行修改和重写？&quot;&gt;&lt;a href=&quot;#28-如何在JS中对原型进行修改和重写？&quot; class=&quot;headerlink&quot; title=&quot;28.如何在JS中对原型进行修改和重写？&quot;&gt;&lt;/a&gt;28.如何在JS中对原型进行修改和重写？&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a545.html"/>
    <id>https://daixueshengt.github.io/posts/c993a545.html</id>
    <published>2024-06-03T09:36:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="26-JS中数组的遍历方法有哪些"><a href="#26-JS中数组的遍历方法有哪些" class="headerlink" title="26.JS中数组的遍历方法有哪些"></a>26.JS中数组的遍历方法有哪些</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// forEach:不会改变原数组，没有返回值</span></span><br><span class="line"><span class="comment">// 三个参数 遍历值，索引值，数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:不会改变原数组，有返回值（以数组的形式返回）</span></span><br><span class="line"><span class="keyword">let</span> resultMap = arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);c</span><br><span class="line">    <span class="keyword">return</span> index*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter: 过滤数组,也可直接遍历</span></span><br><span class="line"><span class="comment">// 有返回值 返回包含符合条件元素的数组</span></span><br><span class="line"><span class="keyword">let</span> resultFilter = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of:返回是数组的元素，对象的属性值。不能遍历普通的对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce :接受一个函数，作为一个累加器</span></span><br><span class="line"><span class="comment">// 前两个参数, 第一个计算之后返回的值或者初始值，第二个当前元素</span></span><br><span class="line"><span class="keyword">let</span> resultReduce = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre+item</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultReduce);</span><br></pre></td></tr></table></figure><h2 id="27-如何理解JS中原型？"><a href="#27-如何理解JS中原型？" class="headerlink" title="27.如何理解JS中原型？"></a>27.如何理解JS中原型？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prototype属性，默认对应着一个空对象（没有我们指定的方法和属性），这个空对象就是我们所说的原型对象，每一个prototype属性都是不相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 显式原型和隐式原型</span></span><br><span class="line"><span class="comment">// 每一个函数都有一个prototype属性，就是显式原型</span></span><br><span class="line"><span class="comment">// 每一个实例对象都有一个__proto__,就是隐式原型</span></span><br><span class="line"><span class="comment">// 实例对象的隐式原型等于对应的构造函数的显示原型的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>)&#123; <span class="comment">// 内部语句：Fun(this).prototype=&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> fun=<span class="keyword">new</span> <span class="title class_">Fun</span>() <span class="comment">// 内部语句：fun(this).__proto__=Fun.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>===fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="comment">// 函数的prototype属性，在定义函数是自动添加的，默认值是一个空对象</span></span><br><span class="line"><span class="comment">// 对象的__proto__属性，创建对象时自动添加的，默认值是构造函数的prototype属性。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;26-JS中数组的遍历方法有哪些&quot;&gt;&lt;a href=&quot;#26-JS中数组的遍历方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;26.JS中数组的遍历方法有哪些&quot;&gt;&lt;/a&gt;26.JS中数组的遍历方法有哪些&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>day2(5-30)</title>
    <link href="https://daixueshengt.github.io/posts/97c25550.html"/>
    <id>https://daixueshengt.github.io/posts/97c25550.html</id>
    <published>2024-05-30T14:20:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part02</span><br><span class="line"> </span><br><span class="line">977.有序数组的平方 ，209.长度最小的子数组 ，59.螺旋矩阵II ，总结 </span><br><span class="line"></span><br><span class="line">建议大家先独立做题，然后看视频讲解，然后看文章讲解，然后在重新做一遍题，把题目AC，最后整理成今日当天的博客</span><br><span class="line"></span><br><span class="line">拓展题目可以先不做</span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 977.有序数组的平方 </span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解双指针思想 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/</span><br><span class="line">文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html</span><br><span class="line">视频讲解： https://www.bilibili.com/video/BV1QB4y1D7ep </span><br><span class="line"></span><br><span class="line"> 209.长度最小的子数组</span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/minimum-size-subarray-sum/</span><br><span class="line">文章讲解：https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1tZ4y1q7XE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 59.螺旋矩阵II</span><br><span class="line"></span><br><span class="line">题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/spiral-matrix-ii/</span><br><span class="line">文章讲解：https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1SL4y1N7mV/</span><br><span class="line"></span><br><span class="line"> 总结 </span><br><span class="line"></span><br><span class="line">题目建议：希望大家 也做一个自己 对数组专题的总结</span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>day1(5-29)</title>
    <link href="https://daixueshengt.github.io/posts/762a9ea0.html"/>
    <id>https://daixueshengt.github.io/posts/762a9ea0.html</id>
    <published>2024-05-29T10:50:00.000Z</published>
    <updated>2024-08-14T14:51:02.509Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 今日任务 </span><br><span class="line"></span><br><span class="line">数组理论基础，704. 二分查找，27. 移除元素  </span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 数组理论基础  </span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</span><br><span class="line"></span><br><span class="line">题目建议： 了解一下数组基础，以及数组的内存空间地址，数组也没那么简单。</span><br><span class="line"></span><br><span class="line"> 704. 二分查找 </span><br><span class="line"></span><br><span class="line">题目建议： 大家能把 704 掌握就可以，35.搜索插入位置 和 34. 在排序数组中查找元素的第一个和最后一个位置 ，如果有时间就去看一下，没时间可以先不看，二刷的时候在看。</span><br><span class="line"></span><br><span class="line">先把 704写熟练，要熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法。</span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/binary-search/</span><br><span class="line">文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1fA4y1o715</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> 27. 移除元素</span><br><span class="line"></span><br><span class="line">题目建议：  暴力的解法，可以锻炼一下我们的代码实现能力，建议先把暴力写法写一遍。 双指针法 是本题的精髓，今日需要掌握，至于拓展题目可以先不看。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/remove-element/ </span><br><span class="line">文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV12A4y1Z7LP </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id="二分法第一种写法"><a href="#二分法第一种写法" class="headerlink" title="二分法第一种写法"></a>二分法第一种写法</h5><p> target 是在一个在左闭右闭的区间里，[left, right]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><h5 id="二分法第二种写法"><a href="#二分法第二种写法" class="headerlink" title="二分法第二种写法"></a>二分法第二种写法</h5><p> target 是在一个在左闭右开的区间里，[left, right），那么二分法的边界处理方式则截然不同。</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>; <span class="comment">// target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid,left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        mid=left+((right-left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">mid</span>: <span class="built_in">number</span>, <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fast = <span class="number">0</span>;fast&lt;nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums: <span class="built_in">number</span>[], val: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">slow</span>:<span class="built_in">number</span> = <span class="number">0</span>,<span class="attr">fast</span>: <span class="built_in">number</span> =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (fast &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] !== val) &#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
