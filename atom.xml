<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陶同学&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/85a0cbb73a82a62a3f9fc11c5e6f5f5c</icon>
  <subtitle>hhh</subtitle>
  <link href="https://daixueshengt.github.io/atom.xml" rel="self"/>
  
  <link href="https://daixueshengt.github.io/"/>
  <updated>2024-08-12T15:22:24.341Z</updated>
  <id>https://daixueshengt.github.io/</id>
  
  <author>
    <name>陶同学</name>
    <email>2568510567@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础day01</title>
    <link href="https://daixueshengt.github.io/posts/110fa4c0.html"/>
    <id>https://daixueshengt.github.io/posts/110fa4c0.html</id>
    <published>2024-07-10T16:31:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>本质就是自定义属性</li><li>Vue中指定都是以 v- 开头 </li></ul><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><ul><li>防止页面加载时出现闪烁问题</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li>v-text指令用于将数据填充到标签中，作用于插值表达式类似，但是没有闪动问题</li><li>如果数据中有HTML标签会将html标签一并输出</li><li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li>用法和v-text 相似  但是他可以将HTML片段填充到标签中</li><li>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上</li><li>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</li></ul><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><ul><li>显示原始信息跳过编译过程</li><li>跳过这个元素和它的子元素的编译过程。</li><li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;  </span><br><span class="line"></span><br><span class="line">&lt;!--   即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;  --&gt;</span><br></pre></td></tr></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><strong>v-once</strong></h4><ul><li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li></ul><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul><li>当数据发生变化的时候，视图也就发生变化</li><li>当视图发生变化的时候，数据也会跟着同步变化</li></ul><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><ul><li><strong>v-model</strong>是一个指令，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</li></ul><h3 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h3><ul><li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</li><li>m   model  <ul><li>数据层   Vue  中 数据层 都放在 data 里面</li></ul></li><li>v   view     视图   <ul><li>Vue  中  view      即 我们的HTML页面  </li></ul></li><li>vm   （view-model）     控制器     将数据和视图层建立联系      <ul><li>vm 即  Vue 的实例  就是 vm  </li></ul></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>用来绑定事件的</li><li>形式如：v-on:click  缩写为 @click;</li></ul><p>v-on事件函数中传入参数，如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数。如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li><li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li><li>修饰符是由点开头的指令后缀来表示的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.enter.space</span>=<span class="string">&quot;alertMe&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">submit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">alertMe</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义按键修饰符别名</p><ul><li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>v-bind 指令被用来响应地更新 HTML 属性</li><li>v-bind:href    可以缩写为    :href;</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h4><ul><li>我们可以给v-bind:class 一个对象，以动态地切换class。</li><li>注意：v-bind:class指令可以与普通的class特性共存</li></ul><h4 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h4><p>v-bind 中支持绑定一个数组    数组中classA和 classB 对应为data中的数据</p><h4 id="绑定对象和绑定数组-的区别"><a href="#绑定对象和绑定数组-的区别" class="headerlink" title="绑定对象和绑定数组 的区别"></a>绑定对象和绑定数组 的区别</h4><ul><li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li><li>绑定数组的时候数组里面存的是data 中的数据 </li></ul><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div v-bind:style=&quot;styleObject&quot;&gt;绑定样式对象&lt;/div&gt;&#x27;</span><br><span class="line"> </span><br><span class="line">&lt;!-- CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来)    --&gt;</span><br><span class="line"> &lt;div v-bind:style=&quot;&#123; color: activeColor, fontSize: fontSize,background:&#x27;red&#x27; &#125;&quot;&gt;内联样式&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--组语法可以将多个样式对象应用到同一个元素 --&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;[styleObj1, styleObj2]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        styleObject: &#123;</span><br><span class="line">          color: &#x27;green&#x27;,</span><br><span class="line">          fontSize: &#x27;30px&#x27;,</span><br><span class="line">          background:&#x27;red&#x27;</span><br><span class="line">        &#125;，</span><br><span class="line">        activeColor: &#x27;green&#x27;,</span><br><span class="line">   fontSize: &quot;30px&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      styleObj1: &#123;</span><br><span class="line">             color: &#x27;red&#x27;</span><br><span class="line">       &#125;,</span><br><span class="line">       styleObj2: &#123;</span><br><span class="line">            fontSize: &#x27;30px&#x27;</span><br><span class="line">       &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="v-if-使用场景"><a href="#v-if-使用场景" class="headerlink" title="v-if 使用场景"></a>v-if 使用场景</h4><ul><li>1- 多个元素 通过条件判断展示或者隐藏某个元素。或者多个元素</li><li>2- 进行两个视图之间的切换</li></ul><h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul><li>v-show本质就是标签display设置为none，控制隐藏<ul><li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li></ul></li><li>v-if是动态的向DOM树内添加或者删除DOM元素<ul><li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li>用于循环的数组里面的值可以是对象，也可以是普通元素  </li></ul><ul><li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li><li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li><li>key 的作用<ul><li><strong>key来给每个节点做一个唯一标识</strong></li><li><strong>key的作用主要是为了高效的更新虚拟DOM</strong></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;指令&quot;&gt;&lt;a href=&quot;#指令&quot; class=&quot;headerlink&quot; title=&quot;指令&quot;&gt;&lt;/a&gt;指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本质就是自定义属性&lt;/li&gt;
&lt;li&gt;Vue中指定都是以 v- 开头 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;v-cloak&quot;&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>05-Message组件的设计和实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c5.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c5.html</id>
    <published>2024-07-09T16:31:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>常用于主动操作后的反馈提示。其表现为从“中间顶部”出现消息提示，并在几秒后自动消失。可能包括成功提示、警告、错误等。</p><h2 id="函数调用创建组件"><a href="#函数调用创建组件" class="headerlink" title="函数调用创建组件"></a><strong>函数调用创建组件</strong></h2><p>不同于前面写的几个组件，Message显示的形式一般是点击按钮之后生成，这也意味着我们需要以函数调用的形式创建组件，该函数接收消息组件的属性对象，然后返回一个消息组件的实例对象, 我们在对创建的实例对象进行进一步操作，比如手动关闭消息等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建消息组件</span></span><br><span class="line"><span class="keyword">const</span> messageInstance = <span class="title function_">createMessage</span>(&#123;</span><br><span class="line"> <span class="attr">message</span>: <span class="string">&#x27;This is a message&#x27;</span>, <span class="comment">// 消息内容</span></span><br><span class="line"> <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,       <span class="comment">// 消息类型</span></span><br><span class="line"> <span class="attr">duration</span>: <span class="number">5000</span>,        <span class="comment">// 持续时间</span></span><br><span class="line"> <span class="attr">showClose</span>: <span class="literal">true</span>        <span class="comment">// 是否显示关闭按钮</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的 messageInstance 可以进行一些操作，如手动关闭：</span></span><br><span class="line">messageInstance.<span class="title function_">destory</span>() <span class="comment">// 手动关闭消息</span></span><br></pre></td></tr></table></figure><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a><strong>设计思路</strong></h2><p>下面是Message 组件的设计思路：</p><ol><li>功能：显示临时性的通知消息，支持不同类型的消息（成功、警告、错误等），可以显示多个，支持自动关闭，支持手动关闭。</li><li>属性定义</li><li>type: 消息类型，默认为info</li><li>message: 消息内容，字符串或者VNode</li><li>duration: 显示时间，默认为一定时间后自动隐藏</li><li>showClose: 是否显示关闭按钮</li><li>结构和样式定义：组件结构包括消息容器、消息内容、关闭按钮等部分的布局和样式，此外还需要考虑到根据消息类型设置不同的背景色和文字颜色</li><li>组件状态：动态控制消息的显示和隐藏</li><li>事件：添加关闭按钮，点击关闭按钮时触发关闭事件，由于Message有显示时间，还需要设置和清除定时器。</li><li>动画效果：使用过渡实现消息淡入淡出效果。</li></ol><h3 id="组件实现难点"><a href="#组件实现难点" class="headerlink" title="组件实现难点"></a><strong>组件实现难点</strong></h3><ol><li>通过函数调用实现消息组件的动态创建和销毁</li><li>Message的显示位置，如果页面上同时存在多条消息，需要考虑它们的排列避免消息重叠或遮挡，这需要动态计算消息组件的位置。</li></ol><h3 id="Message组件的实现过程"><a href="#Message组件的实现过程" class="headerlink" title="Message组件的实现过程"></a><strong>Message组件的实现过程</strong></h3><p>该组件的基本结构的代码和样式这里不再复述，可以参考代码完成，重点在于完成Message组件的基本逻辑，其整体设计思路是维护一个消息实例数组来管理页面上的消息组件，通过渲染和销毁来控制消息的显示和隐藏。</p><p>消息组件创建</p><ol><li>当调用createMessage函数时，会生成一个唯一的消息id，创建一个消息容器，并将消息组件渲染到该容器中。</li><li>消息组件的属性是通过传入的props与一些默认值合并得到的，其中包括消息内容、持续时间、类型、是否显示关闭按钮等。</li><li>每个消息组件都有一个独立的z-index，确保它们在页面上正确地叠加显示。</li><li>每个消息组件都有一个销毁函数destory，用于从实例数组中移除并销毁该消息组件。</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createMessage</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 生成消息 Id</span></span><br><span class="line">  <span class="comment">// 创建消息容器</span></span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  <span class="comment">// 合并新的props</span></span><br><span class="line">  <span class="comment">// 合并新的 props</span></span><br><span class="line">   <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">zIndex</span>: <span class="title function_">nextZIndex</span>(), <span class="comment">// 设置 z-index</span></span><br><span class="line">    <span class="attr">onDestory</span>: destory <span class="comment">// 设置销毁函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 通过 h 函数 创建消息vNode</span></span><br><span class="line">    <span class="keyword">const</span> vnode = <span class="title function_">h</span>(<span class="title class_">MessageConstructor</span>, newProps)</span><br><span class="line">  <span class="comment">// 渲染消息vNode到容器中</span></span><br><span class="line">  <span class="title function_">render</span>(vnode, container)</span><br><span class="line">  <span class="comment">// 添加消息容器到 body中</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container.<span class="property">firstElementChild</span>!)</span><br><span class="line">  <span class="comment">// 获取组件实例</span></span><br><span class="line">  <span class="keyword">const</span> vm = vnode.<span class="property">component</span>!</span><br><span class="line">  <span class="comment">// 根据组件实例进行扩充，创建消息实例对象</span></span><br><span class="line">  <span class="keyword">const</span> instance = &#123;</span><br><span class="line">    id, </span><br><span class="line">    vnode,</span><br><span class="line">    vm</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 将消息实例对象添加到实例数组中</span></span><br><span class="line">  instances.<span class="title function_">push</span>(instance)</span><br><span class="line">  <span class="comment">// 返回实例</span></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息组件的销毁</p><ul><li>调用消息组件的销毁函数时，会从实例数组中找到并删除该消息实例，并通过重新render将消息容器置为null，从而销毁该消息组件。</li></ul><p>手动销毁： 设置消息组件中visible的值为false来实现隐藏消息。</p><p>关闭所有消息：数组forEach调用销毁方法</p><p>计算偏移量：因为涉及到多个消息组件，这就需要获取上一个消息组件的底部偏移量，并计算当前Message组件的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 消息组件高度</span></span><br><span class="line"><span class="keyword">const</span> lastOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title function_">getLastBottomOffset</span>(props.<span class="property">id</span>)) <span class="comment">// 上一个实例的最下面的坐标数字</span></span><br><span class="line"><span class="keyword">const</span> topOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> props.<span class="property">offset</span> + lastOffset.<span class="property">value</span>) <span class="comment">// 元素的 top 偏移量</span></span><br><span class="line"><span class="keyword">const</span> bottomOffset = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> height.<span class="property">value</span> + topOffset.<span class="property">value</span>) <span class="comment">// 元素的 bottom 偏移量，为下一个消息组件提供</span></span><br><span class="line"><span class="keyword">const</span> cssStyle = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line"> <span class="attr">top</span>: topOffset.<span class="property">value</span> + <span class="string">&#x27;px&#x27;</span>, <span class="comment">// 动态设置 top 样式</span></span><br><span class="line"> <span class="attr">zIndex</span>: props.<span class="property">zIndex</span> <span class="comment">// 动态设置 z-index 样式</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="h函数和render函数"><a href="#h函数和render函数" class="headerlink" title="h函数和render函数"></a><strong>h函数和render函数</strong></h3><ol><li>h函数用于创建虚拟DOM元素（VNode), 接受三个参数：要创建的元素标签名、元素的属性对象（如类名、样式、事件等）、子元素（可以是文本内容或其他 VNode）。</li><li>render函数 用于将 VNode 渲染为真实 DOM , 它接受一个 VNode 作为参数, 并将其渲染到一个容器元素中。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用于主动操作后的反馈提示。其表现为从“中间顶部”出现消息提示，并在几秒后自动消失。可能包括成功提示、警告、错误等。&lt;/p&gt;
&lt;h2 id=&quot;函数调用创建组件&quot;&gt;&lt;a href=&quot;#函数调用创建组件&quot; class=&quot;headerlink&quot; title=&quot;函数调用创建组件&quot;&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>04-Icon/Link组件的实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c4.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c4.html</id>
    <published>2024-07-08T16:31:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Icon组件实现思路</strong></p><ol><li>确定图标库：首先要确定你将使用的图标库，比如Font Awesome、Material Icons，这决定了你将从哪里获取图标，以及如何在组件中使用它们。</li><li>安装和引入图标库：根据你选择的图标库，安装相应的依赖包，并在项目中引入这些图标。</li><li>创建Icon组件：在Vue项目中创建一个Icon组件。</li><li>定义组件Props,  这个组件会接收一些属性，比如图标名称、大小、颜色。</li><li>渲染图标：根据选择的图标库，使用相应的方式来渲染对应名称的图标</li><li>处理属性：根据传入的大小、颜色等属性给组件动态添加类名，从而改变Icon组件的样式</li><li>使用组件：在项目中使用你创建的Icon组件，传递相应的图标名称和其他属性。</li><li>测试：对Icon组件进行测试，并且能够处理传递的属性, 确保组件能够接受并正确渲染各种大小、颜色和样式的图标。</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><h3 id="引入FontAwesome"><a href="#引入FontAwesome" class="headerlink" title="引入FontAwesome"></a><strong>引入FontAwesome</strong></h3><p>这里我们基于FontAwesome图标库创建Icon组件</p><p>文档资料：<a href="https://fontawesome.com/docs/web/use-with/vue/">https://fontawesome.com/docs/web/use-with/vue/</a></p><p>想要在<a href="http://vue.js/">Vue.js</a>中使用FontAswsome , 需要按照以下步骤：</p><ol><li>Add Svg Core: npm i —save @fortawesome/fontawesome-svg-core </li><li>Add Icon Packages: npm i —save @fortawesome/free-solid-svg-icons</li><li>Add The Vue Component(需要根据Vue版本选择)： npm i —save @fortawesome/vue-fontawesome@latest-3 </li><li>Add Icon: 在组件中添加图标</li></ol><p>导入FontAwesome文档：<a href="https://fontawesome.com/docs/web/use-with/vue/add-icons">https://fontawesome.com/docs/web/use-with/vue/add-icons</a></p><p>然后在 src/<a href="http://main.ts/">main.ts</a> 文件中创建一个包含要在项目中使用的所有图标的库</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Set up using Vue 3 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import the fontawesome core */</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import font awesome icon component */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FontAwesomeIcon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/vue-fontawesome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* import specific icons */</span></span><br><span class="line"><span class="keyword">import</span> &#123; faUserSecret &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* add icons to the library */</span></span><br><span class="line">library.<span class="title function_">add</span>(faUserSecret)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">component</span>(<span class="string">&#x27;font-awesome-icon&#x27;</span>, <span class="title class_">FontAwesomeIcon</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后就可以在组件中调用图标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;font-awesome-icon icon=&quot;fa-solid fa-user-secret&quot; /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为我们要使用大量图标，所以可以先导入整个图标库。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 导入整个图标</span></span><br><span class="line"><span class="keyword">import</span> &#123; fas &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/free-solid-svg-icons&#x27;</span></span><br><span class="line">library.<span class="title function_">add</span>(fas)</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="定义Icon组件"><a href="#定义Icon组件" class="headerlink" title="定义Icon组件"></a><strong>定义Icon组件</strong></h3><p>接下来，我们对FontAwesomeIcon进行封装，形成一个Icon组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;$props&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">defineProps&lt;IconProps&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-bind=”$props” 将 Icon 组件的所有接收的 props 动态传递给内部的 font-awesome-icon 组件。这样就无需显式地在 Icon 组件中声明这些 props。</p><p>在示例代码中引入Icon组件并使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-icon icon=&quot;arrow-right&quot;&gt;&lt;/el-icon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ElIcon from &#x27;./components/Icon/Icon.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="处理属性"><a href="#处理属性" class="headerlink" title="处理属性"></a><strong>处理属性</strong></h3><p>但是FontAsweomeIcon本身并没有color属性，因此我们对其进行扩展，在IconProps添加color属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IconDefinition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@fortawesome/fontawesome-svg-core&#x27;</span></span><br><span class="line"><span class="comment">// 设定Icon组件的Props</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IconProps</span> &#123;</span><br><span class="line"> <span class="attr">icon</span>: <span class="built_in">object</span> | <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; | <span class="built_in">string</span> | <span class="title class_">IconDefinition</span></span><br><span class="line"> <span class="comment">// 添加color</span></span><br><span class="line"> color?: <span class="built_in">string</span></span><br><span class="line"> size?: <span class="string">&#x27;2xs&#x27;</span></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加color属性之后，我们使用组件就是这种形式<el-icon icon="arrow-right" color="#409EFC"/></p><p>font-awesome-icon组件本身不接收这种类型的props, 因此我们要对传递的props进行过滤，我们可以使用lodash工具库完成这项功能。</p><p>npm i lodash-es</p><p>npm install —save @types/lodash-es</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;i class=&quot;el-icon&quot; :style=&quot;iconStyle&quot; v-bind=&quot;$attrs&quot;&gt;</span><br><span class="line">  &lt;!-- 将父组件传递给 Icon 组件的所有 props 动态地传递给内部的 font-awesome-icon 组件 --&gt;</span><br><span class="line">  &lt;font-awesome-icon v-bind=&quot;iconProps&quot; /&gt;</span><br><span class="line"> &lt;/i&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// omit函数用于排除对象的属性，传递处理的对象和排除的属性名称数组</span><br><span class="line">import &#123; omit &#125; from &#x27;lodash-es&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &#x27;@fortawesome/vue-fontawesome&#x27;</span><br><span class="line">// 引入FontAwesomeIcon 组件接收的props</span><br><span class="line">import type &#123; IconProps &#125; from &#x27;./types&#x27;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElIcon&#x27;,</span><br><span class="line"> inheritAttrs: false</span><br><span class="line">&#125;)</span><br><span class="line">const props = defineProps&lt;IconProps&gt;()</span><br><span class="line">// 过滤掉props中传递的color属性</span><br><span class="line">const iconProps = computed(() =&gt; &#123;</span><br><span class="line"> return omit(props, [&#x27;color&#x27;])</span><br><span class="line">&#125;)</span><br><span class="line">// 根据是否传递color属性来决定 icon的颜色</span><br><span class="line">const iconStyle = computed(() =&gt; &#123;</span><br><span class="line"> const &#123; color &#125; = props</span><br><span class="line"> if(!color) return &#123;&#125;</span><br><span class="line"> return &#123;</span><br><span class="line">  &#x27;--color&#x27;: color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>样式定义则比较简单，参考项目代码即可，在完成上述步骤之后，Icon组件就基本定义完成，我们之后就可以使用<el-icon icon="arrow-right" />这样的形式在项目中使用组件了。</p><p>之后，我们可以对Buttton组件进行补充完善。</p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a><strong>参考实现</strong></h2><p><a href="https://juejin.cn/post/7122622920433598471">从0搭建Vue3组件库之Icon组件-iconfont</a></p><h2 id="Link组件的实现"><a href="#Link组件的实现" class="headerlink" title="Link组件的实现"></a><strong>Link组件的实现</strong></h2><p>Link组件的实现较为简单，和button组件也比较类似，只需要根据传入的属性渲染不同样式和行为的链接，包括禁用状态，类型，和下划线等，必要的注释在代码中都已经提供，大家可以当做练习独立完成。</p><p>其思路如下</p><ol><li>功能</li><li>Link 组件的基本功能，例如显示文本、跳转链接等。</li><li>组件的可选特性，例如链接样式、是否有下划线、是否禁用等。</li><li>组件API</li><li>定义 Link 组件的 Props, 链接类型、是否有下划线、是否禁用、链接地址、链接打开的目标窗口等。</li><li>定义 Link 组件的事件，例如点击事件.</li><li>模板和样式</li><li>使用 <a> 标签作为 Link 组件的基础元素。</li><li>根据传入的 Props 动态设置 <a> 标签的属性，例如 href、target、class 等。</li><li>在链接内部包含其他内容，例如图标、文本等，以插槽的形式提供。</li><li>编写逻辑</li><li>使用计算属性或者函数，根据 Props 的值计算出需要的样式或行为</li><li>监听用户的交互事件，根据是否禁用决定是否触发相应的事件。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Icon组件实现思路&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定图标库：首先要确定你将使用的图标库，比如Font Awesome、Material Icons，这决定了你将从哪里获取图标，以及如何在组件中使用它们。&lt;/li&gt;
&lt;li&gt;安装和引入图标库：</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>03-Container组件的实现</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c3.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c3.html</id>
    <published>2024-07-07T16:31:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>Container组件是用于布局的容器组件，可以方便快速搭建PC管理后台页面的基本结构：</p><p><el-container>：外层容器。 当子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列， 否则会水平左右排列。</p><p><el-header>：顶栏容器。</p><p><el-aside>：侧边栏容器。</p><p><el-main>：主要区域容器。</p><p><el-footer>：底栏容器。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a><strong>实现思路</strong></h2><p>针对Container组件的布局，我们可以使用 flex 布局方式来实现</p><ol><li><el-container> 组件会渲染成一个 <section> 标签，并通过 slot 做内容分发,  默认水平排列，但是也支持传入direction的prop, 根据direction判断水平/垂直排列，此外如果当 <el-container> 容器的子元素中包含 <el-header> 或 <el-footer> 时，全部子元素会垂直上下排列，否则会水平左右排列。</li><li>el-header渲染成一个 <header> 标签，并通过 slot 做内容分发,  传入height属性来指定高度，如果不指定，则有默认高度。</li><li>el-footer实现和el-header基本类似</li><li>el-main: 渲染成一个 <main> 标签，并通过 slot 做内容分发, 不设置高度和宽度，通过flex: 1分配剩余空间。</li><li>el-aside: 渲染侧边栏， 传入width属性来指定高度，如果不指定，则有默认宽度。</li></ol><p><a href="https://juejin.cn/post/6844903946448797709?searchId=20240223114200992AFB7A324175968005">黄轶-Container 布局容器组件的设计与实现</a></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h2><p>参考实现中已经给出了很详细的解释，其实现难点在于样式布局上，需要对flex布局有较好的理解。</p><h3 id="el-container"><a href="#el-container" class="headerlink" title="el-container"></a><strong>el-container</strong></h3><p>该组件略微有难度的地方就是布局方向的判定，该组件接收direction作为属性，其值为’horizontal’ | ‘vertical’。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断布局方向是否是Vertical</span></span><br><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 如果props.direction等于&#x27;vertical&#x27;，返回true</span></span><br><span class="line"> <span class="keyword">if</span> (props.<span class="property">direction</span> === <span class="string">&#x27;vertical&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(props.<span class="property">direction</span> === <span class="string">&#x27;horizontal&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果props.direction等于&#x27;horizontal&#x27;，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>另外一个条件是子元素中有 el-header 或 el-footer 时为 vertical，否则为 horizontal</p><p>slots.default()会返回一个包含了当前插槽内容的虚拟节点数组。这个数组中的每个元素都是一个虚拟节点对象，描述了当前插槽内容的各个部分。</p><p>每个虚拟节点对象通常包含以下一些重要属性：</p><ol><li>type：表示节点的类型，可以是一个字符串（表示HTML标签名），或是一个组件对象。</li><li>props：包含了节点的属性和事件监听器等信息。</li><li>children：是一个包含了当前节点的子节点的虚拟节点数组。</li></ol><p>如果type是一个组件，则通常包含下面属性：</p><ol><li>name：组件的名称，可以通过这个属性获取组件的名称。</li><li>props：组件的属性，包含了组件接受的props以及它们的类型等信息。</li><li>emits：组件发出的事件，包含了组件可以发出的事件名称以及它们的参数类型等信息。</li><li>setup：组件的setup函数，包含了组件的响应式数据、计算属性、方法等逻辑。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isVertical = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// .......... 省略代码</span></span><br><span class="line"> <span class="comment">// 如果插槽存在且有默认插槽内容</span></span><br><span class="line"> <span class="keyword">if</span>(slots &amp;&amp; slots.<span class="property">default</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用slots.default获取默认插槽中的所有vNode节点</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">vNodes</span>: <span class="title class_">VNode</span>[] = slots.<span class="title function_">default</span>()</span><br><span class="line">  <span class="comment">// 遍历 vNode节点数组，如果存在el-header/el-footer</span></span><br><span class="line">  <span class="keyword">return</span> vNodes.<span class="title function_">some</span>(<span class="function"><span class="params">vNode</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 将 vNode.type 断言为 Component 类型，然后获取组件类型属性 name</span></span><br><span class="line">   <span class="keyword">const</span> tag = (vNode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">Component</span>).<span class="property">name</span></span><br><span class="line">   <span class="keyword">return</span> tag === <span class="string">&#x27;ElHeader&#x27;</span> || tag === <span class="string">&#x27;ElFooter&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 插槽不存在或者没有默认插槽内容，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="el-header-aside-main-footer的实现"><a href="#el-header-aside-main-footer的实现" class="headerlink" title="el-header/aside/main/footer的实现"></a><strong>el-header/aside/main/footer的实现</strong></h3><p>以el-header组件为例，该组件使用slot接收传递的内容，并接受一个height 作为props, 默认高度为60px ， 在传递height的情况下，以传入的height值为准。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;header class=&quot;el-header&quot; :style=&quot;headerHeight&quot;&gt;</span><br><span class="line">  &lt;slot&gt;Header&lt;/slot&gt;</span><br><span class="line"> &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; HeightProps &#125; from &#x27;./types&#x27;</span><br><span class="line">​</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElHeader&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">// 接收height作为参数</span><br><span class="line">const props = defineProps&lt;HeightProps&gt;()</span><br><span class="line">// 计算 Header的高度</span><br><span class="line">const headerHeight = computed(() =&gt; &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">  height: (props.height || 60) + &#x27;px&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Container组件是用于布局的容器组件，可以方便快速搭建PC管理后台页面的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;el-container&gt;：外层容器。 当子元素中包含 &lt;el-header&gt; 或 &lt;el-footer&gt; 时，全部子元素会垂直上下排列， 否则会水平左右排列。&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>02-Button按钮组件</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c2.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c2.html</id>
    <published>2024-07-06T16:31:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>关于Button组件的实现，网上有非常多的文章，借助实现该组件，我们可以掌握组件封装和实现的基本思路，本篇文章如果写的不是很详细，可以参考这篇文章：<a href="https://juejin.cn/post/7103081918266081287?searchId=202401221508015F93F063191DCAE7D770">手摸手教你仿一下Element-ui的Button组件</a></p><h2 id="组件通用实现思路"><a href="#组件通用实现思路" class="headerlink" title="组件通用实现思路"></a><strong>组件通用实现思路</strong></h2><ol><li>组件设计<ul><li>确定要实现的组件，一些常见的基础组件（按钮、输入框等），高级组件（表格、表单、轮播图等）</li><li>设计组件的API,  包括支持的props、events和slots</li></ul></li><li>UI设计<ul><li>设计组件的样式和布局，应当保持视觉上的统一和美观</li></ul></li><li>组件实现<ul><li>遵循最佳实践，使用组件化、模块化和可复用性的原则来编写代码</li><li>组件实现要考虑到可维护性和可扩展性</li></ul></li><li>文档和示例<ul><li>编写清晰的文档，包括组件的使用说明、API 文档和示例代码</li><li>提供丰富的示例，帮助用户理解和使用组件</li></ul></li><li>测试<ul><li>编写单元测试和集成测试，确保组件的功能和性能符合预期</li><li>进行用户体验测试，收集用户反馈，并及时修复和改进组件</li></ul></li><li>版本管理和发布</li></ol><h2 id="Button组件实现原理"><a href="#Button组件实现原理" class="headerlink" title="Button组件实现原理"></a><strong>Button组件实现原理</strong></h2><p>Button组件官网：<a href="https://element.eleme.io/#/zh-CN/component/button">https://element.eleme.io/#/zh-CN/component/button</a></p><p>Button（按钮）组件通常是一个可以点击的区域，用户可以通过鼠标点击从而触发与该按钮相关联的功能或动作，HTML有原生的button元素，而Button组件只是通过props属性接受父组件传递过来的参数，例如按钮的类型、尺寸和禁用状态等，而这些参数可以在组件内部使用，在button按钮上根据参数添加各式各样的class类名，从而动态生成按钮的样式和行为。</p><p><img src="https://www.picgo.net/image/SaQZpu" alt=""></p><p>我们可以打开其源码或者打开控制台查看。</p><p><img src="https://www.picgo.net/image/SaQBQj" alt=""></p><h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a><strong>组件实现</strong></h2><h3 id="Button组件实现思路"><a href="#Button组件实现思路" class="headerlink" title="Button组件实现思路"></a><strong>Button组件实现思路</strong></h3><p>根据组件通用实现思路，我们想要实现一个Button组件，需要考虑以下方面：</p><ul><li><p>Props属性：定义组件的属性，以便用户可以通过属性来自定义按钮的外观和行为， 比如按钮的类型（primary、success、warning、danger 等）、尺寸（large、medium、small 等）、禁用状态，ElementUI 实现了各式各样的button 组件，按照其网站上的描述，包含下面属性。</p><p><img src="https://www.picgo.net/image/SaQMJN" alt=""></p></li><li><p>事件：点击按钮时触发事件，原生button标签即可支持。</p></li><li><p>Slot插槽：提供插槽，以便用户可以在按钮内部插入自定义的内容，例如按钮上的文本、图标等。</p></li><li><p>样式：按钮样式包括基本样式和根据用户传入的属性来动态修改样式的功能（判断是否有对应的属性从而动态添加类名）。</p></li></ul><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a><strong>基本实现</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button</span><br><span class="line">  :class=&quot;[&#x27;btn&#x27;, `btn-$&#123;type&#125;`, `btn-$&#123;size&#125;`, &#123; &#x27;btn-disabled&#x27;: disabled &#125;]&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  @click=&quot;handleClick&quot;</span><br><span class="line"> &gt;</span><br><span class="line">  &lt;slot&gt;Button Text&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;,</span><br><span class="line"> props: &#123;</span><br><span class="line">  type: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;default&#x27; // 可选值: &#x27;default&#x27;, &#x27;primary&#x27;, &#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  size: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#x27;medium&#x27; // 可选值: &#x27;small&#x27;, &#x27;medium&#x27;, &#x27;large&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">  disabled: &#123;</span><br><span class="line">   type: Boolean,</span><br><span class="line">   default: false</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">   this.$emit(&#x27;click&#x27;);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a><strong>属性定义</strong></h3><p>在component文件夹下新建Button文件夹，定义<a href="http://button.vue/">Button.vue</a>和<a href="http://types.ts/">types.ts</a> 两个文件，分别用于定义组件和组件中使用的ts类型。</p><p>button组件接收type\size\plain\round\disabled等props属性，我们提前在types文件中定义好（也可以定义在Vue组件中）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button/types.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 定义button接收的props类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line">  <span class="comment">// type: 类型为string</span></span><br><span class="line">  <span class="attr">type</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面，提前定义</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span>&gt;,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">    </span><br><span class="line">   &#125;,</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="attr">size</span>: &#123;</span><br><span class="line">    <span class="comment">// 将类型提到前面</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">ProType</span>&lt;<span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span>&gt;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonType</span> = <span class="string">&#x27;primary&#x27;</span>| <span class="string">&#x27;success&#x27;</span>| <span class="string">&#x27;info&#x27;</span> | <span class="string">&#x27;warning&#x27;</span>| <span class="string">&#x27;danger&#x27;</span></span><br><span class="line"><span class="comment">// 按钮尺寸, 额外的尺寸：medium、small、mini，通过设置size属性来配置它们。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonSize</span> = <span class="string">&#x27;medium&#x27;</span> | <span class="string">&#x27;small&#x27;</span> | <span class="string">&#x27;mini&#x27;</span></span><br><span class="line"><span class="comment">// 原生按钮类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">NativeType</span> = <span class="string">&#x27;button&#x27;</span> | <span class="string">&#x27;submit&#x27;</span> | <span class="string">&#x27;reset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> buttonProps = &#123;</span><br><span class="line"> <span class="attr">type</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">size</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">ButtonSize</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">plain</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">round</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">circle</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">disabled</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">autofocus</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">loading</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="attr">nativeType</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">NativeType</span>&gt;,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="http://button.vue/">Button.vue</a> 中定义Button组件，其结构比较简单，就是button按钮，class样式控制其样式，并接收传递的slot作为显示的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;button class=&quot;el-button&quot;</span><br><span class="line">  :disabled=&quot;disabled&quot;</span><br><span class="line">  :autofocus=&quot;autofocus&quot;</span><br><span class="line">  :type=&quot;nativeType&quot;</span><br><span class="line">  :class=&quot;[</span><br><span class="line">  type ? &#x27;el-button--&#x27; + type : &#x27;&#x27;,</span><br><span class="line">  size ? &#x27;el-button--&#x27; + size : &#x27;&#x27;,</span><br><span class="line">  &#123;</span><br><span class="line">   &#x27;is-disabled&#x27;: disabled,</span><br><span class="line">   &#x27;is-plain&#x27;: plain,</span><br><span class="line">   &#x27;is-round&#x27;: round,</span><br><span class="line">   &#x27;is-circle&#x27;: circle,</span><br><span class="line">   &#x27;is-loading&#x27;: loading</span><br><span class="line">  &#125;</span><br><span class="line"> ]&quot;&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line"> &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; buttonProps &#125; from &#x27;./types&#x27;</span><br><span class="line">// 定义组件名称</span><br><span class="line">defineOptions(&#123;</span><br><span class="line"> name: &#x27;ElButton&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">// 接收props</span><br><span class="line">defineProps(buttonProps)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a><strong>CSS样式</strong></h3><p>根据需要编写button组件的CSS样式，使其具有对应的效果即可。</p><h3 id="暴露组件实例"><a href="#暴露组件实例" class="headerlink" title="暴露组件实例"></a><strong>暴露组件实例</strong></h3><p>在使用我们定制的组件时，有时会通过ref 获取组件实例，进而使用DOM元素，但是<script setup>组件默认关闭，我们可以通过defineExpose获取组件实例，其实现在ElementPlus源码中也可以看到，操作也很简单，只需要绑定一个ref并暴露出来即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定义组件实例</span><br><span class="line">const _ref = ref&lt;HTMLButtonElement&gt;()</span><br><span class="line">// defineExpose暴露实例</span><br><span class="line">defineExpose(&#123;</span><br><span class="line"> ref: _ref</span><br><span class="line">&#125;)</span><br><span class="line">// 在&lt;button&gt;&lt;/button&gt;上绑定 ref=&quot;_ref&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于Button组件的实现，网上有非常多的文章，借助实现该组件，我们可以掌握组件封装和实现的基本思路，本篇文章如果写的不是很详细，可以参考这篇文章：&lt;a href=&quot;https://juejin.cn/post/7103081918266081287?searchId=20</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>01-项目创建和开发规范</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c1.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c1.html</id>
    <published>2024-07-05T15:51:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>使用Vite创建项目</p><p>官方文档：<a href="https://cn.vitejs.dev/">Vite | 下一代的前端工具链</a> </p><p>Vite是一个轻量级的，速度极快的构建工具，也是Vue3官方推荐的脚手架，使用Vite可以快速创建一个Vue3 + Typescript项目。</p><p><strong>前置准备</strong></p><p>你需要在Vscode的插件市场中搜索Volar并安装下面两个插件（安装插件后需要重新加载VSCode)</p><p>如果你之前安装了Vetur, 请禁用掉，并改用Volar, 它现在是 Vue 3 项目的官方推荐。</p><p>此外，你还需要在浏览器插件市场中安装Vue Dev tools</p><h2 id="使用Vite创建项目"><a href="#使用Vite创建项目" class="headerlink" title="使用Vite创建项目"></a><strong>使用Vite创建项目</strong></h2><p>创建项目，在终端中输入以下命令：</p><p><code>npm create vite@latest</code></p><p>然后按照提示操作即可！</p><ol><li>Project name: 定义项目名称my-elem</li><li>Select a framework: 选择Vue</li><li>Select a variant: 选择TypeScript</li></ol><p>启动项目需要执行下面的命令(当然你也可以使用yarn)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd my-elem</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板，具体命令请查看官网。</p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a><strong>项目目录</strong></h2><p>创建出来的模板项目具有如下目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|-node_modules          -- 第三方包存储目录</span><br><span class="line">|-public             -- 静态资源目录</span><br><span class="line">    |--vite.svg           -- 网站地址栏前面的小图标</span><br><span class="line">|-src              -- src目录</span><br><span class="line">    |-assets               -- 资源目录，存放图片等资源</span><br><span class="line">    |-components             -- 定义公共组件</span><br><span class="line">    |--App.vue              -- 根组件</span><br><span class="line">    |--style.css             -- 项目的通用CSS样式</span><br><span class="line">    |--main.ts              -- 项目入口文件</span><br><span class="line">    |--vite-env.d.ts         -- 类型声明文件，定义项目的全局类型</span><br><span class="line">|--.gitignore          -- git的管理配置文件</span><br><span class="line">|--index.html          -- 项目的默认首页</span><br><span class="line">|--package-lock.json      -- 包安装时的版本号</span><br><span class="line">|--package.json         -- 项目配置文件，包管理、项目名称、版本和命令</span><br><span class="line">|--README.md          -- 项目说明文件</span><br><span class="line">|--tsconfig.json        -- 指定 TypeScript 编译器的行为</span><br><span class="line">|--tsconfig.node.json      -- 配置在 Node.js 环境下编译 TypeScript 代码的选项</span><br><span class="line">|--vite.config.ts        -- 配置 Vite 构建工具的行为</span><br></pre></td></tr></table></figure><h2 id="编程规范-Eslint"><a href="#编程规范-Eslint" class="headerlink" title="编程规范-Eslint"></a><strong>编程规范-Eslint</strong></h2><p>很多人写代码有自己的风格，比如有的人喜欢在结尾加;, 但是有的人不加，这些争论还有字符串是使用单引号还是双引号，是使用空格还是tab, 正是因为每个人风格不一样，代码合并之后就会显得丑陋，如果希望团队开发者都遵循一套相同的代码规范，可以使用工具Eslint进行约束，它可以帮助你进行代码格式检测，并自动修复代码中的语法问题。</p><p>中文文档地址：<a href="https://zh-hans.eslint.org/docs/latest/use/getting-started">https://zh-hans.eslint.org/docs/latest/use/getting-started</a></p><p>你可以使用该命令安装并配置 ESLint：</p><p>npm init @eslint/config</p><p>在安装的过程中，你会遇到很多次询问。</p><p>如果觉得下面的操作不够详细，可以看这篇博客：前端Vuer，请给你的项目加上 ESLint</p><ol><li>你想怎么使用Eslint： 选择第二个</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only //只检查语法</span><br><span class="line">❯ To check syntax and find problems // 检查语法并发现问题</span><br><span class="line">  To check syntax, find problems, and enforce code style // 检查语法、发现问题并强制执行代码样式</span><br></pre></td></tr></table></figure><ol><li>使用哪种类型的模块，这里使用Esmodules</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What type of modules does your project use? … </span><br><span class="line">❯ JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>使用什么框架</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? … </span><br><span class="line">  React</span><br><span class="line">❯ Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><ol><li>是否使用TypeScript: 选择 Yes</li><li>运行在哪种环境：选择Browser/Node,  浏览器环境和Node环境均配置</li><li>配置文件格式是什么</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? … </span><br><span class="line">❯ JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><ol><li>选择以什么工具安装上面的包：选择npm</li></ol><p>完成上面的操作之后，就会自动生成一个<a href="http://.eslintrc.cjs/">.eslintrc.cjs</a>配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;env&quot;: &#123; // 支持的环境</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;es2021&quot;: true,</span><br><span class="line">    &quot;node&quot;: true</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;extends&quot;: [ // 使用那些拓展</span><br><span class="line">    &quot;eslint:recommended&quot;,</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;,</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot;</span><br><span class="line">   ],</span><br><span class="line">  &quot;overrides&quot;: [ // 匹配哪些文件的 配置</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;env&quot;: &#123;</span><br><span class="line">        &quot;node&quot;: true</span><br><span class="line">       &#125;,</span><br><span class="line">      &quot;files&quot;: [</span><br><span class="line">        &quot;.eslintrc.&#123;js,cjs&#125;&quot;</span><br><span class="line">       ],</span><br><span class="line">      &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;sourceType&quot;: &quot;script&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaVersion&quot;: &quot;latest&quot;, // 指定要使用的 ECMAScript 版本</span><br><span class="line">    &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">    &quot;sourceType&quot;: &quot;module&quot; // 指定代码的来源类型,如果你的代码是 ES 模块，则应设置为 &#x27;module&#x27;。</span><br><span class="line">   &#125;,</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@typescript-eslint&quot;,</span><br><span class="line">    &quot;vue&quot;</span><br><span class="line">   ],</span><br><span class="line">  // Eslint规则: https://eslint.org/docs/latest/rules/</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">   // 如果你要关闭某条规则你可以 off</span><br><span class="line">   // 如果你希望某条规则报错 你可以 error</span><br><span class="line">   // 如果你希望只是警告 你可以设置为 warn</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以尝试在rules中进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    // 表示需要加分号，不加就会报错</span><br><span class="line">    &quot;semi&quot;: 2</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存代码，就会发现在每行的末尾没有加分号的就会报错。(<strong>需要在Vscode中安装Eslint插件</strong>)</p><p>这样的规则有很多，比如no-unused-var,表示声明的变量必须使用：具体的可以在<a href="https://eslint.org/docs/latest/rules/">https://eslint.org/docs/latest/rules/</a>中找到，为了简化这些规则的书写，eslint提供了推荐的配置集合，即extends选项中配置的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;eslint:recommended&quot;, // ESLint 官方提供的推荐配置集</span><br><span class="line">    &quot;plugin:@typescript-eslint/recommended&quot;, // 适用于 TypeScript 代码的规则集</span><br><span class="line">    &quot;plugin:vue/vue3-essential&quot; // 针对 Vue.js 3 版本的 ESLint 插件提供的基本配置集</span><br><span class="line">   ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vite添加Eslint支持"><a href="#Vite添加Eslint支持" class="headerlink" title="Vite添加Eslint支持"></a><strong>Vite添加Eslint支持</strong></h2><p>上面的操作只是在项目中安装了Eslint, 但是还没有与Vite项目进行集成，这需要安装插件vite-plugin-eslint</p><p>npm i vite-plugin-eslint —save-dev</p><p>如果你遇到了Could not find a declaration file for module ‘vite-plugin-eslint’的报错，请参考下面的解决方案</p><p><a href="https://juejin.cn/post/7313507274868965439">https://juejin.cn/post/7313507274868965439</a></p><p><a href="https://github.com/gxmari007/vite-plugin-eslint/issues/74">https://github.com/gxmari007/vite-plugin-eslint/issues/74</a></p><p>然后修改<a href="http://vite.config.ts/">vite.config.ts</a>的代码，添加对vite-plugin-eslint的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">// 添加下面一行代码</span><br><span class="line">import eslintPlugin from &#x27;vite-plugin-eslint&#x27;</span><br><span class="line"></span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line"> plugins: [vue(), eslintPlugin()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Vite创建项目&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://cn.vitejs.dev/&quot;&gt;Vite | 下一代的前端工具链&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Vite是一个轻量级的，速度极快的构建工具，也是Vue3官方推荐的脚手架，使用Vite可以快速创建一个V</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>00-Typescript基础</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c0.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c0.html</id>
    <published>2024-07-04T11:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>想要系统学习ts ，可以查看阮一峰老师的教程 <a href="https://wangdoc.com/typescript/intro">TypeScript教程</a></p><h3 id="为什么需要TypeScript"><a href="#为什么需要TypeScript" class="headerlink" title="为什么需要TypeScript"></a><strong>为什么需要TypeScript</strong></h3><p>JavaScript 是一门动态运行语言，没有类型检测，但是这也导致了有很多错误到了运行阶段才能发现，比如说下面一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLen</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getLen</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="title function_">getLen</span>() <span class="comment">// 只有在运行时才会报错</span></span><br></pre></td></tr></table></figure><h3 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a><strong>什么是TypeScript</strong></h3><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p><p>Typescript是JavaScript的超集，支持类型，并且最终会被编译成JS代码。</p><h3 id="TS运行环境"><a href="#TS运行环境" class="headerlink" title="TS运行环境"></a><strong>TS运行环境</strong></h3><ol><li>前置条件</li></ol><p>安装ts前，要提前安装<a href="http://node.js/">Node.js</a> , 并且<a href="http://node.js/">Node.js</a>版本最好在V16以上，建议你使用nvm来管理你的nodejs版本。</p><ol><li>ts的安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 ts</span><br><span class="line">npm install typescript -g</span><br><span class="line"># 查看tsc的版本</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h3 id="TS基本示例"><a href="#TS基本示例" class="headerlink" title="TS基本示例"></a><strong>TS基本示例</strong></h3><p>新建hello.ts文件，代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>执行下列命令，会看到生成一个.js文件，是与之对应的js代码</p><p>tsc hello.ts</p><p>修改ts代码，在函数参数中加上name:string , 这表示传入的参数名称为name, 类型为string ，如果传入其他类型的参数，比如整数类型100， 代码会自动报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHello</span> = (<span class="params">name:<span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&quot;jack&quot;</span>)</span><br><span class="line"><span class="comment">// 下一行代码会自动报错：100下方有红色波浪线</span></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h3><p>想要为变量添加类型很简单，就是在变量后面添加: type ，但是一旦添加上类型之后，就不能修改其值的类型，比如下面的示例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line"><span class="comment">// 不被允许 </span></span><br><span class="line"><span class="comment">// name = 100</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isMale</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a><strong>联合类型</strong></h3><p>联合类型是由两个或者多个其他类型组成的类型，类型和类型之间用| 关联，值可以是类型中的任何一个。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="type类型别名"><a href="#type类型别名" class="headerlink" title="type类型别名"></a><strong>type类型别名</strong></h3><p>假设有多个类型都需要用到同一个类型，别名不允许重名。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">---</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumOrStr</span> = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="title class_">NumOrStr</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a><strong>类型缩小</strong></h3><p>如果一个变量有多种类型，读取该变量时，往往需要进行“类型缩小”, 区分该值到底属于哪一种类型，然后再进一步处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;100&quot;</span></span><br><span class="line">id = <span class="number">100</span></span><br><span class="line"><span class="comment">// 下面一行代码还是会报错, 类型number上不存在length属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br></pre></td></tr></table></figure><p>可以使用 typeof/switch等类型判断的方法进行类型缩小。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(id.<span class="property">length</span>)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(id)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a><strong>类型推断</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;mike&quot;</span> <span class="comment">// 类型推断为string</span></span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h3><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IName</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = <span class="title class_">IName</span> &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">age</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a><strong>any</strong></h3><p>如果你不想限制变量的类型，可以使用any, 但是并不推荐这样做。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">any</span> = <span class="string">&quot;mike&quot;</span></span><br><span class="line">name = <span class="number">30</span></span><br><span class="line">name = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a><strong>数组的声明</strong></h3><p>在ts中，要求所有成员必须满足类型要求，其类型有两种写法，第一种是成员的类型之后，加上方括号。如果成员有多种类型，可以使用()将联合类型包起来。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:(<span class="built_in">number</span>|<span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>第二种写法是使用内置的 Array 接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>|<span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="string">&quot;mike&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="元组的声明"><a href="#元组的声明" class="headerlink" title="元组的声明"></a><strong>元组的声明</strong></h3><p>元组是ts特有的，在数组中应该尽量保持成员类型是相同的，但是元组的成员类型可以自由设置，各个成员的类型可以不同。</p><p>const a: [string, number, string] = [“mike”, 18, “male”]</p><p>使用元组时，必须给出类型，否则会将其视为数组</p><p>const a = [“mike”, 18] // 类型被推断为 (number | string)[]</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a><strong>type</strong></h3><p>除了原始类型，ts还可以为对象定义类型，比如说用一个对象表示一个坐标点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> point = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要求坐标的 x 属性和 y 属性必须传入整数时，可以这样做</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样无法通用，我们可以用type为该类型起一个别名，简化使用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// point的类型为PointType</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果某个属性是可选的（即可以忽略），需要在属性名后面加一个问号。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>,</span><br><span class="line">    z?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以传递或者不传递 z 属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a><strong>interface</strong></h3><p>interface的使用和type十分相似，都是用来定义类型，基本用法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interface可以扩展，这意味着可以声明同名的interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PointType</span> &#123;</span><br><span class="line">  z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: <span class="title class_">PointType</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">z</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交叉类型-1"><a href="#交叉类型-1" class="headerlink" title="交叉类型"></a><strong>交叉类型</strong></h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h3><p>JS中对函数的参数个数，参数类型，返回类型均不做限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) : <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h3><p>开发中，经常需要定义一组相关的常量，比如方向Direction, 状态码Status, 因此ts中引入了枚举结构，将相关常量放在一起。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举结构的默认值从0开始，依次递增, 我们也可以为成员显式赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个颜色的枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="string">&quot;RED&quot;</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="string">&quot;GREEN&quot;</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="string">&quot;BLUE&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><strong>泛型</strong></h3><p>泛型是ts的难点</p><p>泛型可以在编写函数、类或者接口的时候传递类型参数，这些类型参数在使用时才被具体指定，就相当于一个占位符，在使用时才会传入具体类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数使用了类型参数 T, 但是 T是什么并不确定</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们可以对函数进行调用，函数被调用时会被具体参数替代。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T 被替换为 string 类型</span></span><br><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 输出: Hello</span></span><br><span class="line"><span class="comment">// T 被替换为 number 类型</span></span><br><span class="line"><span class="keyword">let</span> numberResult = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于类和接口, 其写法也是在类的名称后面加上<T></p><p>下面我们定义一个Box 类接受类型参数 T，并使用它来定义实例变量和方法的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型类</span></span><br><span class="line"><span class="keyword">let</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">102</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="title function_">getValue</span>()); <span class="comment">// 输出: 102</span></span><br></pre></td></tr></table></figure><p>泛型不仅可以用于函数，还可以用于接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型接口，表示具有一个值的容器</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型接口</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">numberContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">99</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">stringContainer</span>: <span class="title class_">Container</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberContainer.<span class="property">value</span>); <span class="comment">// 输出: 99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringContainer.<span class="property">value</span>); <span class="comment">// 输出: Hello</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a><strong>泛型约束</strong></h3><p>直接使用泛型太过自由，有的时候我们需要让泛型类型参数满足某些条件，比如下面代码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">   <span class="comment">// 代码报错，类型 T 上不存在属性 length</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此ts提供了语法约束类型参数，如果不满足约束条件，编译时就会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> hasLength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接受一个类型参数 T，该参数必须符合 hasLength 接口</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T <span class="keyword">extends</span> hasLength&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用泛型约束，我们在函数内部可以安全地访问arg.length属性。</p><h3 id="类型声明文件"><a href="#类型声明文件" class="headerlink" title="类型声明文件"></a><strong>类型声明文件</strong></h3><p><u>xx.d.ts</u>  , d 表示声明，类型声明。</p><p><u>tsconfig.json </u> 是TS项目的配置文件, 供tsc编译器使用，其内容是一个JSON对象，通过这个配置文件，你可以定义项目的编译选项、文件包含与排除规则、模块解析规则等。</p><p>关于配置的更多内容，可以在官网查看：<a href="https://www.typescriptlang.org/tsconfig">tsconfig说明</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想要系统学习ts ，可以查看阮一峰老师的教程 &lt;a href=&quot;https://wangdoc.com/typescript/intro&quot;&gt;TypeScript教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么需要TypeScript&quot;&gt;&lt;a href=&quot;#为什么需要TypeSc</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a549.html"/>
    <id>https://daixueshengt.github.io/posts/c993a549.html</id>
    <published>2024-06-08T09:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="43-localStorage和sessionStorage的区别"><a href="#43-localStorage和sessionStorage的区别" class="headerlink" title="43.localStorage和sessionStorage的区别"></a>43.localStorage和sessionStorage的区别</h2><p>localStorage：永久存储在本地，适合保存在本地的数据</p><p>sessionStorage：会话级的存储，敏感账号一次性登录</p><p>相同点：</p><ul><li>都是保存在浏览器端</li><li>不会把数据自动的发送给服务器，仅在本地保存</li><li>只能存储字符串，可以将对象JSON.stringfy()编码之后进行存储</li></ul><p>不同点：</p><ul><li>存储大小限制不同：sessionStorage存储的大小为5M，localStorage存储大小为20M</li><li>数据有效期不同：localStorage始终有效，窗口关闭或浏览器关闭，一直保存，持久保存数据</li><li>作用域不同：sessionStorage在不同的浏览器窗口不会进行共享，只有同一个页面中共享。localStorage在所有同源的窗口下可以共享。</li></ul><h2 id="leetcode20-有效的括号"><a href="#leetcode20-有效的括号" class="headerlink" title="leetcode20. 有效的括号"></a>leetcode<a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> start = s[i];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span> || s[i]==<span class="string">&#x27;[&#x27;</span> || s[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> end = stack[stack.<span class="property">length</span>-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(end==<span class="string">&#x27;(&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;)&#x27;</span> ||end==<span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;&#125;&#x27;</span> || end==<span class="string">&#x27;[&#x27;</span> &amp;&amp; start ==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="property">length</span>==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode1047-删除字符串中的所有相邻重复项"><a href="#leetcode1047-删除字符串中的所有相邻重复项" class="headerlink" title="leetcode1047. 删除字符串中的所有相邻重复项"></a>leetcode<a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(v <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">let</span> prev =stack.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(prev!=v)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(prev);</span><br><span class="line">            stack.<span class="title function_">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="leetcode104771-简化路径"><a href="#leetcode104771-简化路径" class="headerlink" title="leetcode104771. 简化路径"></a>leetcode<a href="https://leetcode.cn/problems/simplify-path/">104771. 简化路径</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">path</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> simplifyPath = <span class="keyword">function</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack =[]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = path.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val &amp;&amp; val==<span class="string">&#x27;..&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val &amp;&amp; val!=<span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    arr.<span class="property">length</span> ? str=<span class="string">&#x27;/&#x27;</span>+stack.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>):str=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;43-localStorage和sessionStorage的区别&quot;&gt;&lt;a href=&quot;#43-localStorage和sessionStorage的区别&quot; class=&quot;headerlink&quot; title=&quot;43.localStorage和sessionSto</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a548.html"/>
    <id>https://daixueshengt.github.io/posts/c993a548.html</id>
    <published>2024-06-07T09:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="38-宏任务和微任务"><a href="#38-宏任务和微任务" class="headerlink" title="38.宏任务和微任务"></a>38.宏任务和微任务</h2><p>js是单线程的 、 主线程</p><p>宏任务</p><p>​    分类：setTimeout、setInterval、requestAnimation</p><p>​    1、宏任务所处的队列就是宏任务队列</p><p>​    2、第一个宏任务队列中只有一个任务：执行主线程的js代码</p><p>​    3、宏任务队列可以有多个</p><p>​    4、当宏任务队列中的任务全部执行完以后会查看是否有微任务队列 如果有先执行微任务队列中的所有任务，如果没有就查看是否有宏任务队列</p><p>微任务</p><p>​    分类：new Promise().then(回调)    process.nextTick</p><p>​    微任务所处的队列就是微任务队列</p><p>​    只有一个微任务队列</p><p>​    在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务</p><p>默认一开始第一个宏任务队列中只有一个任务：执行主线程的js代码；执行完毕后检查是否有微任务，有则执行完 再执行宏任务队列。</p><p>代码案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---start---&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>();<span class="comment">//修改promise实例对象的状态为成功状态</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise实例成功回调执行&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---end---&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>—-start—-</p><p>0</p><p>1</p><p>2</p><p>3</p><p>4</p><p>—-end—-</p><p>promise实例成功回调执行</p><p>setTimeout</p><h2 id="39-比较React与Vue"><a href="#39-比较React与Vue" class="headerlink" title="39.比较React与Vue"></a>39.比较React与Vue</h2><p>1）相同点</p><ul><li>都有组件化开发和虚拟dom</li><li>都支持props进行父子组件间数据通信</li><li>都支持数据驱动视图，不直接操作真实dom，更新状态数据界面就自动更新</li><li>都支持服务器端渲染</li><li>都有支持native 的方案,React 的 React Native,Vue 的Weex</li></ul><p>2）不同点</p><ul><li>数据绑定vue 实现了数据的双向绑定,react 数据流动是单向的</li><li>组件写法不一样,React 推荐的做法是 JSX，也就是把 HTML和 CSS 全都写进 JavaScript了,即’all in js’; Vue 推荐的做法是webpack+vue-loader 的单文件组件格式,即 html,css,js 写在同一个文件</li><li>state 对象在 react 应用中不可变的,需要使用 setstate 方法更新状态;在 vue 中,state 对象不是必须的,数据由 data 属性在 vue 对象中管理</li></ul><h2 id="40-Redux管理状态的机制"><a href="#40-Redux管理状态的机制" class="headerlink" title="40.Redux管理状态的机制"></a>40.Redux管理状态的机制</h2><p>1) redux 是一个独立专门用于做状态管理的JS库，不是 react 插件库</p><p>2)它可以用在 react, angular, vue 等项目中,但基本与 react 配合使用</p><p>3)作用:集中式管理 react 应用中多个组件共享的状态和从后台获取的数据</p><h2 id="41-VUE组件间通信方式"><a href="#41-VUE组件间通信方式" class="headerlink" title="41.VUE组件间通信方式"></a>41.VUE组件间通信方式</h2><p>1）通信种类</p><p>1.父向子</p><p>2.子向父</p><p>3.隔代组件间通信</p><p>4.兄弟组件间通信</p><p>2）实现通信方式</p><p>1.props</p><ul><li>通过一般属性实现父向子通信</li><li>通过函数属性实现子向父通信</li><li>缺点：隔代组件和兄弟组件间通信比较麻烦</li></ul><p>2.vue自定义事件</p><ul><li>vue内置实现，可以代替函数类型的props<ul><li>绑定监听：&lt;MyComp @eventName=”callback”</li><li>触发事件：this.$emit(“eventName,data)</li></ul></li><li>缺点：只适合于子向父通信</li></ul><p>3.消息订阅与发布</p><ul><li>需要引入消息订阅与发布的实现库，如：pubsub-js<ul><li>订阅消息：PubSub.subscribe(‘msg’,(msg,data)=&gt;{})</li><li>发布消息：PubSub.publish(‘msg’,data)</li></ul></li><li>优点：此方式可用于任意关系组件间通信</li></ul><p>4.vuex</p><ul><li>是什么: vuex 是 vue 官方提供的集中式管理 vue 多组件共享状态数据的 vue 插件</li><li>优点：对组件间关系没有限制，且相比于pubsub库管理更集中，更方便</li></ul><p>5.slot</p><ul><li>是什么：专门用来实现父向子传递带数据的标签</li><li>注意：通信的标签板块是在父组件中解析好后再传递给子组件的</li></ul><h2 id="42-说说vue的MVVM实现原理"><a href="#42-说说vue的MVVM实现原理" class="headerlink" title="42.说说vue的MVVM实现原理"></a>42.说说vue的MVVM实现原理</h2><p>Vue作为MVVM模式的实现库的2种技术</p><ul><li>模版解析</li><li>数据绑定</li></ul><p>模版解析：实现初始化显示</p><ul><li>解析大括号表达式</li><li>解析指令</li></ul><p>数据绑定：实现更新显示</p><ul><li>通过数据劫持实现</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;38-宏任务和微任务&quot;&gt;&lt;a href=&quot;#38-宏任务和微任务&quot; class=&quot;headerlink&quot; title=&quot;38.宏任务和微任务&quot;&gt;&lt;/a&gt;38.宏任务和微任务&lt;/h2&gt;&lt;p&gt;js是单线程的 、 主线程&lt;/p&gt;
&lt;p&gt;宏任务&lt;/p&gt;
&lt;p&gt;​    分</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a547.html"/>
    <id>https://daixueshengt.github.io/posts/c993a547.html</id>
    <published>2024-06-06T10:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="31-你是如何理解ES6中Promise的以及它的实例方法？"><a href="#31-你是如何理解ES6中Promise的以及它的实例方法？" class="headerlink" title="31.你是如何理解ES6中Promise的以及它的实例方法？"></a>31.你是如何理解ES6中Promise的以及它的实例方法？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是异步编程的一种解决方案</span></span><br><span class="line"><span class="comment">// 三种状态：pending（进行中），fulfilled（已成功），rejected（已失败）</span></span><br><span class="line"><span class="comment">// 特点：状态不受外界的影响，只有异步操作的结果，决定当前是哪一种状态，一旦状态改变就不会再变</span></span><br><span class="line"><span class="comment">// 用法：Promise是一个构造函数，用来生成Promise实例</span></span><br><span class="line"><span class="comment">// promise的构造函数接收一个函数作为参数，这个函数有两个参数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="comment">// resolve函数：将promise对象的状态由pending变为fulfilled，在异步操作成功时调用</span></span><br><span class="line">    <span class="title function_">resolve</span>() <span class="comment">// 返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reject函数：将promise对象的状态由pending变为rejected，在异步操作失败时调用</span></span><br><span class="line">    <span class="title function_">reject</span>() <span class="comment">//返回异步操作的结果，作为参数传递出去</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 实例方法</span></span><br><span class="line"><span class="comment">// then():当实例状态发生改变的时候的回调函数,返回的是一个新的promise实例，也就是promise可以链式书写的原因</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="keyword">if</span>(time%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败的数据，time=&#x27;</span>+time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123; <span class="comment">//rejected已失败的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch():用于指定发生错误的回调函数，一般来说通过catch替代then的第二个参数</span></span><br><span class="line"><span class="comment">// finally():用来指定不管Promise对象状态最后如何，都会执行的操作</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; <span class="comment">//resolved已成功的状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最后的结果&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="32-ES6中Promise-all的理解以及应用场景？"><a href="#32-ES6中Promise-all的理解以及应用场景？" class="headerlink" title="32.ES6中Promise.all的理解以及应用场景？"></a>32.ES6中Promise.all的理解以及应用场景？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于将多个Promise实例，包装成一个新的Promise实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功01&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功02&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功03&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 参数可以不是数组，但是必须是iterator接口</span></span><br><span class="line"><span class="keyword">let</span> pAll = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pAll)</span><br><span class="line"><span class="comment">//pAll的状态，由p1,p2,p3来决定，只有当这三个都为成功，pA11才会为成功，</span></span><br><span class="line"><span class="comment">//但是有一个失败，那么就是失败，这个时候第一个失败的实例的返回值，会传递给pAll的回调函数</span></span><br><span class="line"><span class="comment">//如果作为参数的实例，自己定义了catch方法，那么它一旦rejected，不会触pAll的catch方法</span></span><br><span class="line"><span class="comment">//多个请求结果合并在一起</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBannerList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;轮播图的数据&#x27;</span>)&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMusicList</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌曲列表的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getcateList</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;歌单分类的数据&#x27;</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span>=<span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getMusicList</span>(),<span class="title function_">getcateList</span>()])</span><br><span class="line"><span class="title class_">All</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">initLoad</span>()</span><br></pre></td></tr></table></figure><h2 id="33-你能说说ES6中Promise-race的用法和使用场景吗？"><a href="#33-你能说说ES6中Promise-race的用法和使用场景吗？" class="headerlink" title="33.你能说说ES6中Promise.race的用法和使用场景吗？"></a>33.你能说说ES6中Promise.race的用法和使用场景吗？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prace)</span><br><span class="line"><span class="comment">//Promise.race区别于promise.all只要实例中有一个先改变状态，就会把这个实例的参数的返回值传给prace的回调函数</span></span><br><span class="line"><span class="comment">// 使用场景：请求超时提示</span></span><br></pre></td></tr></table></figure><h2 id="34-函数节流和防抖"><a href="#34-函数节流和防抖" class="headerlink" title="34.函数节流和防抖"></a>34.函数节流和防抖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">节流函数</span><br><span class="line"><span class="comment">// fn要被节流的函数，delay规定的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line"><span class="comment">// 记录上一次函数触发的时间</span></span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//记录当前函数触发的时间</span></span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">if</span>(nowTime-lastTime &gt; delay)&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">// 同步时间</span></span><br><span class="line">            lastTime =nowTime; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scroll事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;，<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">节流函数：一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="comment">//记录上一次的延时器</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 清除上一次的延时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="comment">// 重新设置新的延时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击事件被触发了&#x27;</span>+ <span class="title class_">Date</span>.<span class="title function_">now</span>());&#125;, <span class="number">1000</span>);</span><br><span class="line">多次点击按钮，只让最后一次点击后才触发</span><br></pre></td></tr></table></figure><h2 id="35-什么是跨域-解决跨域的办法有哪些"><a href="#35-什么是跨域-解决跨域的办法有哪些" class="headerlink" title="35.什么是跨域?解决跨域的办法有哪些?"></a>35.什么是跨域?解决跨域的办法有哪些?</h2><ol><li>同源策略</li></ol><ul><li>是浏览器安全策略</li><li>协议名、域名、端口号必须完全一致</li></ul><ol><li>跨域</li></ol><ul><li>违背同源策略就会产生跨域</li></ul><ol><li>解决跨域</li></ol><ul><li>jsonp cors 服务器代理。。。</li></ul><p>jsonp解决方案  前端实现方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建script标签</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//数据请求回来会被触发的函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置script的src属性，设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000?callback=getData&#x27;</span>;</span><br><span class="line"><span class="comment">// 让script生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><h2 id="36-从一个url地址到最终页面渲染完成，发生了什么？"><a href="#36-从一个url地址到最终页面渲染完成，发生了什么？" class="headerlink" title="36.从一个url地址到最终页面渲染完成，发生了什么？"></a>36.从一个url地址到最终页面渲染完成，发生了什么？</h2><ol><li><p>DNS解析：将域名地址解析为ip地址</p><ul><li>浏览器DNS缓存</li><li>系统DNS缓存</li><li>路由器DNS缓存</li><li>网络运营商DNS缓存</li><li>递归搜索：blog.baidu.com<ul><li>.com域名下查找DNS解析</li><li>.baidu域名下查找DNS解析</li><li>blog域名下查找DNS解析</li><li>出错了</li></ul></li></ul></li><li><p>TCP连接：三次握手</p><ul><li>第一次握手，浏览器发起，告诉服务器我要发送请求了</li><li>第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧</li><li>第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧</li></ul></li><li><p>发送请求</p><ul><li>请求报文：http协议的通信内容</li></ul></li><li><p>接受响应</p><ul><li>响应报文</li></ul></li><li><p>渲染页面</p><ul><li>遇见html标记，浏览器调用html解析器解析成token并构建成dom树</li><li>遇到style/link标记，浏览器调用css解析器，处理css标记并构建cssom树</li><li>遇到script标记，调用JavaScript解析器，处理script代码（绑定事件，修改dom树、cssom树）</li><li>将dom树和cssom树合并成一个渲染树</li><li>根据渲染树来计算布局，计算每个节点的几何信息（布局）</li><li>将各个节点颜色绘制到屏幕上（渲染）</li></ul><p>注意：</p><p>这五个步骤不一定按照顺序执行，如果dom树或cssom树被修改了，可能会执行多次布局和渲染。往往实际页面中，这些步骤都会执行多次的。</p></li><li><p>断开连接：TCP四次挥手</p></li></ol><ul><li>第一次挥手：由浏览器发起的，发送给服务器，我东西发送完了（请求报文），你准备关闭吧</li><li>第二次挥手：由服务器发起的，告诉浏览器，我东西接受完了（请求报文），我准备关闭了，你也准备吧</li><li>第三次挥手：由服务器发起的，告诉浏览器，我东西发送完了（响应报文），你准备关闭吧</li><li>第四次挥手：由浏览器发起，告诉服务器，我东西接受完了（响应报文），我准备关闭了，你也准备吧</li></ul><h2 id="37-闭包"><a href="#37-闭包" class="headerlink" title="37.闭包"></a>37.闭包</h2><p>什么是闭包？</p><ol><li>密闭的容器，类似于set，map容器，存储数据的</li><li>闭包是一个对象，存放数据的格式：key：value</li></ol><p>形成条件</p><ol><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li></ol><p>闭包的优点：延长外部函数局部变量的生命周期</p><p>闭包的缺点：容易造成内存泄漏</p><p>注意点：</p><ol><li>合理使用闭包</li><li>用完闭包要及时清除（销毁）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包的应用场景</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//2</span></span><br><span class="line"><span class="title function_">fun2</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;31-你是如何理解ES6中Promise的以及它的实例方法？&quot;&gt;&lt;a href=&quot;#31-你是如何理解ES6中Promise的以及它的实例方法？&quot; class=&quot;headerlink&quot; title=&quot;31.你是如何理解ES6中Promise的以及它的实例方法？&quot;&gt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a546.html"/>
    <id>https://daixueshengt.github.io/posts/c993a546.html</id>
    <published>2024-06-05T23:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="28-如何在JS中对原型进行修改和重写？"><a href="#28-如何在JS中对原型进行修改和重写？" class="headerlink" title="28.如何在JS中对原型进行修改和重写？"></a>28.如何在JS中对原型进行修改和重写？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改原型</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span><br><span class="line">    <span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接给Person的原型对象用对象进行赋值时，p的构造函数指向根构造函数object</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>);<span class="comment">//p(this).__proto__=Person.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//false</span></span><br><span class="line">p.<span class="property">constructor</span>=<span class="title class_">Person</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>===p.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？"><a href="#29-JS中如何判断一个属性是属于实例对象还是继承于构造函数？" class="headerlink" title="29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？"></a>29.JS中如何判断一个属性是属于实例对象还是继承于构造函数？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过hasownProperty()//检测一个属性是否属于自身对象，还是继承于原型链上的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">phone</span> = <span class="number">12345</span>;</span><br><span class="line">p.<span class="property">height</span>=<span class="number">182</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;phone&quot;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sex&quot;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="title function_">hasOwnProperty</span>(i))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="30-JS中bind和call、apply有什么作用？它们的区别是什么？"><a href="#30-JS中bind和call、apply有什么作用？它们的区别是什么？" class="headerlink" title="30.JS中bind和call、apply有什么作用？它们的区别是什么？"></a>30.JS中bind和call、apply有什么作用？它们的区别是什么？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：改变函数运行时的this指向</span></span><br><span class="line"><span class="keyword">var</span> uname=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    uname=<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>() <span class="comment">//李四</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>,<span class="number">0</span>)<span class="comment">//张三</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj),<span class="number">0</span>)<span class="comment">//李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//apply:两个参数，第一个是this指向，第二个是函数接收的参数，以数组的形式传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...argus</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...argus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    myname=<span class="string">&quot;王五&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="title function_">apply</span>(person,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);<span class="comment">//传入的参数必须是一个数组</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 如果第一个参数是null或者是undefined，this默认指向window</span></span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">fun.<span class="title function_">apply</span>(<span class="literal">undefined</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//call:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// call 和 apply改变this指向原函数立即执行，临时改变this指向一次</span></span><br><span class="line">fun.<span class="title function_">call</span>(person,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">// bind:两个参数，第一个是this指向，第二个是参数列表</span></span><br><span class="line"><span class="comment">// 改变this指向不会立即执行，返回一个永久改变this指向的函数</span></span><br><span class="line"><span class="keyword">var</span> bindFun = fun.<span class="title function_">bind</span>(person)</span><br><span class="line"><span class="title function_">bindFun</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;28-如何在JS中对原型进行修改和重写？&quot;&gt;&lt;a href=&quot;#28-如何在JS中对原型进行修改和重写？&quot; class=&quot;headerlink&quot; title=&quot;28.如何在JS中对原型进行修改和重写？&quot;&gt;&lt;/a&gt;28.如何在JS中对原型进行修改和重写？&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a545.html"/>
    <id>https://daixueshengt.github.io/posts/c993a545.html</id>
    <published>2024-06-03T09:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="26-JS中数组的遍历方法有哪些"><a href="#26-JS中数组的遍历方法有哪些" class="headerlink" title="26.JS中数组的遍历方法有哪些"></a>26.JS中数组的遍历方法有哪些</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// forEach:不会改变原数组，没有返回值</span></span><br><span class="line"><span class="comment">// 三个参数 遍历值，索引值，数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map:不会改变原数组，有返回值（以数组的形式返回）</span></span><br><span class="line"><span class="keyword">let</span> resultMap = arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);c</span><br><span class="line">    <span class="keyword">return</span> index*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter: 过滤数组,也可直接遍历</span></span><br><span class="line"><span class="comment">// 有返回值 返回包含符合条件元素的数组</span></span><br><span class="line"><span class="keyword">let</span> resultFilter = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="keyword">return</span> item&gt;<span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultFilter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of:返回是数组的元素，对象的属性值。不能遍历普通的对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce :接受一个函数，作为一个累加器</span></span><br><span class="line"><span class="comment">// 前两个参数, 第一个计算之后返回的值或者初始值，第二个当前元素</span></span><br><span class="line"><span class="keyword">let</span> resultReduce = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre+item</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultReduce);</span><br></pre></td></tr></table></figure><h2 id="27-如何理解JS中原型？"><a href="#27-如何理解JS中原型？" class="headerlink" title="27.如何理解JS中原型？"></a>27.如何理解JS中原型？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prototype属性，默认对应着一个空对象（没有我们指定的方法和属性），这个空对象就是我们所说的原型对象，每一个prototype属性都是不相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 显式原型和隐式原型</span></span><br><span class="line"><span class="comment">// 每一个函数都有一个prototype属性，就是显式原型</span></span><br><span class="line"><span class="comment">// 每一个实例对象都有一个__proto__,就是隐式原型</span></span><br><span class="line"><span class="comment">// 实例对象的隐式原型等于对应的构造函数的显示原型的值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>)&#123; <span class="comment">// 内部语句：Fun(this).prototype=&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> fun=<span class="keyword">new</span> <span class="title class_">Fun</span>() <span class="comment">// 内部语句：fun(this).__proto__=Fun.prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>===fun.<span class="property">__proto__</span>)</span><br><span class="line"><span class="comment">// 总结：</span></span><br><span class="line"><span class="comment">// 函数的prototype属性，在定义函数是自动添加的，默认值是一个空对象</span></span><br><span class="line"><span class="comment">// 对象的__proto__属性，创建对象时自动添加的，默认值是构造函数的prototype属性。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;26-JS中数组的遍历方法有哪些&quot;&gt;&lt;a href=&quot;#26-JS中数组的遍历方法有哪些&quot; class=&quot;headerlink&quot; title=&quot;26.JS中数组的遍历方法有哪些&quot;&gt;&lt;/a&gt;26.JS中数组的遍历方法有哪些&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>day2(5-30)</title>
    <link href="https://daixueshengt.github.io/posts/97c25550.html"/>
    <id>https://daixueshengt.github.io/posts/97c25550.html</id>
    <published>2024-05-30T14:20:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part02</span><br><span class="line"> </span><br><span class="line">977.有序数组的平方 ，209.长度最小的子数组 ，59.螺旋矩阵II ，总结 </span><br><span class="line"></span><br><span class="line">建议大家先独立做题，然后看视频讲解，然后看文章讲解，然后在重新做一遍题，把题目AC，最后整理成今日当天的博客</span><br><span class="line"></span><br><span class="line">拓展题目可以先不做</span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 977.有序数组的平方 </span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解双指针思想 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/</span><br><span class="line">文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html</span><br><span class="line">视频讲解： https://www.bilibili.com/video/BV1QB4y1D7ep </span><br><span class="line"></span><br><span class="line"> 209.长度最小的子数组</span><br><span class="line"></span><br><span class="line">题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/minimum-size-subarray-sum/</span><br><span class="line">文章讲解：https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1tZ4y1q7XE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 59.螺旋矩阵II</span><br><span class="line"></span><br><span class="line">题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/spiral-matrix-ii/</span><br><span class="line">文章讲解：https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1SL4y1N7mV/</span><br><span class="line"></span><br><span class="line"> 总结 </span><br><span class="line"></span><br><span class="line">题目建议：希望大家 也做一个自己 对数组专题的总结</span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93%E7%AF%87.html </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>day1(5-29)</title>
    <link href="https://daixueshengt.github.io/posts/762a9ea0.html"/>
    <id>https://daixueshengt.github.io/posts/762a9ea0.html</id>
    <published>2024-05-29T10:50:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">第一章  数组part01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 今日任务 </span><br><span class="line"></span><br><span class="line">数组理论基础，704. 二分查找，27. 移除元素  </span><br><span class="line"></span><br><span class="line"> 详细布置</span><br><span class="line"></span><br><span class="line"> 数组理论基础  </span><br><span class="line"></span><br><span class="line">文章链接：https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html</span><br><span class="line"></span><br><span class="line">题目建议： 了解一下数组基础，以及数组的内存空间地址，数组也没那么简单。</span><br><span class="line"></span><br><span class="line"> 704. 二分查找 </span><br><span class="line"></span><br><span class="line">题目建议： 大家能把 704 掌握就可以，35.搜索插入位置 和 34. 在排序数组中查找元素的第一个和最后一个位置 ，如果有时间就去看一下，没时间可以先不看，二刷的时候在看。</span><br><span class="line"></span><br><span class="line">先把 704写熟练，要熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法。</span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/binary-search/</span><br><span class="line">文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV1fA4y1o715</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> 27. 移除元素</span><br><span class="line"></span><br><span class="line">题目建议：  暴力的解法，可以锻炼一下我们的代码实现能力，建议先把暴力写法写一遍。 双指针法 是本题的精髓，今日需要掌握，至于拓展题目可以先不看。 </span><br><span class="line"></span><br><span class="line">题目链接：https://leetcode.cn/problems/remove-element/ </span><br><span class="line">文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html</span><br><span class="line">视频讲解：https://www.bilibili.com/video/BV12A4y1Z7LP </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a></h2><h5 id="二分法第一种写法"><a href="#二分法第一种写法" class="headerlink" title="二分法第一种写法"></a>二分法第一种写法</h5><p> target 是在一个在左闭右闭的区间里，[left, right]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><h5 id="二分法第二种写法"><a href="#二分法第二种写法" class="headerlink" title="二分法第二种写法"></a>二分法第二种写法</h5><p> target 是在一个在左闭右开的区间里，[left, right），那么二分法的边界处理方式则截然不同。</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>; <span class="comment">// target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li></ul><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid,left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        mid=left+((right-left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">            right=mid-<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">nums: <span class="built_in">number</span>[], target: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">mid</span>: <span class="built_in">number</span>, <span class="attr">left</span>: <span class="built_in">number</span> = <span class="number">0</span>, <span class="attr">right</span>: <span class="built_in">number</span> = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        mid = left + ((right - left)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2,_,_]</span><br></pre></td></tr></table></figure><h5 id="暴力写法"><a href="#暴力写法" class="headerlink" title="暴力写法"></a>暴力写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;size;j++)&#123;</span><br><span class="line">                    nums[j<span class="number">-1</span>]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h5 id="双指针写法"><a href="#双指针写法" class="headerlink" title="双指针写法"></a>双指针写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> fast = <span class="number">0</span>;fast&lt;nums.<span class="built_in">size</span>();fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>js写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ts写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeElement</span>(<span class="params">nums: <span class="built_in">number</span>[], val: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">slow</span>:<span class="built_in">number</span> = <span class="number">0</span>,<span class="attr">fast</span>: <span class="built_in">number</span> =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (fast &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] !== val) &#123;</span><br><span class="line">            nums[slow++] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>职场小白军规</title>
    <link href="https://daixueshengt.github.io/posts/9bdce6af.html"/>
    <id>https://daixueshengt.github.io/posts/9bdce6af.html</id>
    <published>2024-05-28T21:24:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>当学生的时候，老师有义务回答你的问题</p><p>但是在职场，没人有这个义务，凡事先求已后求人</p><p><img src="https://img2.imgtp.com/2024/05/28/skWfPQgT.jpg" alt=""></p><h3 id="心态调整"><a href="#心态调整" class="headerlink" title="心态调整"></a>心态调整</h3><ul><li>做、学、问，三件事，做：学：问=2:2:1</li><li>比起学习的你，其他人更希望看到在做事的你</li><li>少问<code>是什么</code>，<code>为什么</code>，<code>怎么做</code></li><li>要闻就问 <code>我这样做对不对？</code>，<code>我打算这么做可以么？</code>，<code>我这么做哪里不合适？</code></li><li>有问题优先找师傅，如果没有固定师傅，就去问问招你进来的领导，让他帮你指定一个师傅</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>电脑必装笔记软件，与手机云同步</li><li>常备便签纸，再买个好本子，配两只好笔，推荐Pentel+荧光笔</li><li>低调，别太显眼，不要把自己整滴过于帅或者漂亮，除非你的工作本身就跟颜值有关</li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>别人交代的任务，尽可能的要当场复述重点并确认，目标及时间节点要卡准</p><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>两个目标：实现、学习。</p><p>大爷心态：实习（工作）是双向的，公司要人干活又缺钱，别PUA自己，别让自己被PUA</p><p>初期框架意识：对业务全程掌握感的重要性</p><p>中期差不多意识：合理分配自己的时间精力，批量化分配70分的东西；并且多沟通，向上管理</p><p>后期观察判断意识：不要all in 转正。你首先是自己的产品经理，要借助平台撬动更大的资源，做好自己这款产品。</p><p><code>世界上成功的产品经理只有一种，那就是用自己的方式度过这一生。</code></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>正常不需要新人站队，如果要站，你师傅站哪你站哪</p><p>有些事坚持做就好了，不用想太多。没有必要短期上太高的强度，没有必要。习惯细水长流</p><p>没有必要过度安排和计划，以致过渡的压力与焦虑，走一步看一步，如今计划赶不上变化。船到桥头自然直</p><p>谁不向往更好的生活，眼界打开，自身的基础素质够高，才能走的更远。</p><p>不忘探索生活与热爱，活着的本质就是现在。</p><p>或许有时要向钱低头，但也要找到难得的兴趣所在，把自己的时间付给有价值的事情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当学生的时候，老师有义务回答你的问题&lt;/p&gt;
&lt;p&gt;但是在职场，没人有这个义务，凡事先求已后求人&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2.imgtp.com/2024/05/28/skWfPQgT.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;心态调</summary>
      
    
    
    
    <category term="非技术杂记" scheme="https://daixueshengt.github.io/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>经典前端面试题</title>
    <link href="https://daixueshengt.github.io/posts/c993a544.html"/>
    <id>https://daixueshengt.github.io/posts/c993a544.html</id>
    <published>2024-05-27T10:36:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><p><img src="https://img2.imgtp.com/2024/05/27/iU4gPmmD.png" alt="冒泡排序原理图"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序的排序  冒泡</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 轮数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="comment">// 次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">length</span>-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="2-反转数组"><a href="#2-反转数组" class="headerlink" title="2.反转数组"></a>2.反转数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>/<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i]=arr[arr.<span class="property">length</span>-<span class="number">1</span>-i];</span><br><span class="line">    arr[arr.<span class="property">length</span>-<span class="number">1</span>-i]=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h2 id="3-去掉数组中重复性的数据"><a href="#3-去掉数组中重复性的数据" class="headerlink" title="3.去掉数组中重复性的数据"></a>3.去掉数组中重复性的数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 新数组</span></span><br><span class="line"><span class="keyword">let</span> t=[];</span><br><span class="line">t[<span class="number">0</span>]=arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;t.<span class="property">length</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[k]==arr[i]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(k==t.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">            t.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span><br></pre></td></tr></table></figure><h2 id="4-用css创建一个三角形"><a href="#4-用css创建一个三角形" class="headerlink" title="4.用css创建一个三角形"></a>4.用css创建一个三角形</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 用css创建一个三角形 --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#box&#123;</span><br><span class="line">width: 0px;</span><br><span class="line">height: 0px;</span><br><span class="line">border: 100px solid;</span><br><span class="line"></span><br><span class="line">border-top-color: red;</span><br><span class="line">border-right-color: transparent;</span><br><span class="line">border-bottom-color: transparent;</span><br><span class="line">border-left-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="5-rem适配"><a href="#5-rem适配" class="headerlink" title="5.rem适配"></a>5.rem适配</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 实现移动端 rem适配 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* html根元素字体大小设置屏幕区域的宽 */</span></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取屏幕区域的宽度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> width= <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取html</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> htmlNode=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置字体大小</span></span></span><br><span class="line"><span class="language-javascript">    htmlNode.<span class="property">style</span>.<span class="property">fontSize</span>=width+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-冒泡排序&quot;&gt;&lt;a href=&quot;#1-冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;1.冒泡排序&quot;&gt;&lt;/a&gt;1.冒泡排序&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img2.imgtp.com/2024/05/27/iU4gPmmD.p</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>前端项目打包上线</title>
    <link href="https://daixueshengt.github.io/posts/987bf438.html"/>
    <id>https://daixueshengt.github.io/posts/987bf438.html</id>
    <published>2024-05-24T16:54:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端项目上线"><a href="#前端项目上线" class="headerlink" title="前端项目上线"></a>前端项目上线</h2><h3 id="1-项目打包"><a href="#1-项目打包" class="headerlink" title="1.项目打包"></a>1.项目打包</h3><ul><li>我们开发用的脚手架其实就是一个微型服务器，用于:支撑开发环境、运行代理服务器等。</li><li>打包完的文件中不存在: <code>.vue</code>、<code>.jsx</code>、<code>.less</code> 等文件，而是:html、css、js 等。</li><li>打包后的文件，不再借助脚手架运行，而是需要部署到服务器上运行。</li><li>打包前，请务必梳理好前端项目的 <code>ajax</code>封装(请求前缀、代理规则等)</li></ul><h2 id="2-本地服务器部署"><a href="#2-本地服务器部署" class="headerlink" title="2.本地服务器部署"></a>2.本地服务器部署</h2><h2 id="3-nginx-服务器部署"><a href="#3-nginx-服务器部署" class="headerlink" title="3.nginx 服务器部署"></a>3.nginx 服务器部署</h2><h3 id="3-1-nginx-简介"><a href="#3-1-nginx-简介" class="headerlink" title="3.1.nginx 简介"></a>3.1.nginx 简介</h3><p>Nginx(发音为“engine-x”)是一款高性能的 HTTP 服务器和反向代理服务器，同时也是一个IMAP/POP3/SMTP 代理服务器。Nginx最初由 lgor Sysoev 编写，于 2004年发布。它以其高性能、高稳定性、丰富的功能集和低系统资源消耗而闻名，主要功能有:<br>1.反向代理<br>2.负载均衡<br>3.静态内容服务<br>4.HTTP/2 支持<br>5.SSL/TLS 支持<br>6.高速缓存</p><p><img src="https://img2.imgtp.com/2024/05/24/ameDRWn8.png" alt="1655883039"></p><h2 id="4-云服务器部署"><a href="#4-云服务器部署" class="headerlink" title="4.云服务器部署"></a>4.云服务器部署</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端项目上线&quot;&gt;&lt;a href=&quot;#前端项目上线&quot; class=&quot;headerlink&quot; title=&quot;前端项目上线&quot;&gt;&lt;/a&gt;前端项目上线&lt;/h2&gt;&lt;h3 id=&quot;1-项目打包&quot;&gt;&lt;a href=&quot;#1-项目打包&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>产品入门记录</title>
    <link href="https://daixueshengt.github.io/posts/f1288e52.html"/>
    <id>https://daixueshengt.github.io/posts/f1288e52.html</id>
    <published>2024-05-24T11:24:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<p>产品岗最终要的是实习经历 做产品的经历</p><p>star法则     描述项目经历 实习经历</p><p>Situation（情景）、Task（任务）、Action（行动）和Result（结果）</p><p>1、STAR法则，说清背景，结果要尽可能量化</p><p>2、提取产品关键词在前，方便HR阅览</p><p>3、自己尝试去将过往经历进行优化，去写对应的文档、去输出对应的框架图</p><p>工作职责</p><p>需求挖掘</p><p>产品设计</p><p>产品优化</p><p>上线效果</p><p>其中简历的个人技能与评价部分</p><p>个人技能</p><ul><li>计算机技能:Axure、Visio、Xmind、figma、墨刀、办公软件三件套、数据分析软件SQL等</li><li>语言技能:英语四六级、托福雅思等</li></ul><p>获奖情况</p><ul><li>奖项不要写太多了，该模块没有都可以…</li></ul><p>自我评价</p><ul><li>自我评价不要用大量形容词堆砌，多用动词，数量词，如坚持每月阅读5本互联网相关数据，并做读书笔记;慎用形容词，比如严谨认真，刻苦努力等</li></ul><p>产品最重要的是面试</p><p>产品最常见的灵魂三问<br>1、产品经理是什么，团队中什么样的角色?<br>2、产品经理应该具备什么特质，什么是产品思维?<br>3、产品经理日常的工作是什么，具体是？</p><p>群面</p><p>一、产品运营策划题</p><ol><li>明确目标用户</li><li>用户需求及痛点</li><li>产品解决方案</li></ol><p>AARRR海盗模型</p><p>提高触达用户数</p><p>提高用户活跃度</p><p>提高用户粘性</p><p>提高用户付费数</p><p>二、排序策略题</p><ol><li>考察逻辑思维</li><li>列出评分体系</li><li>列出打分框架</li></ol><p>什么是一个好的产品</p><ol><li>解决用户的需求 </li><li>有一定的用户粘性 </li><li>有完整的产品体验</li></ol><p>群面的心态：要认识到群面的本质是推动方案的形成，要合作而不是零和博弈。同时，要自信一点。</p><p>自我介绍：尽量说一些和题目、团队有关的经历、专业知识，少谈题外话。</p><p>自由讨论：一开始的时候要站出来说要3分钟的时间来看题目，3分钟之后给后面的时间划分出一个框架出来。</p><p>观点如何出来？</p><p>横向拆解：需求、用户、场景</p><p>纵向拆解：前中后，比如设计一种购物app，分析购物前、购物中、购物后</p><p>如果没有观点的时候，使用复读机战略。不断去重复别人的观点（询问式）</p><p>要注意不要将自己的角色框死了，随机应变。</p><p>要有打断别人的勇气。如果讨论没有结论，就会团灭，所以当一个人发言很垃圾的时候，一定要去打断、拉回来。</p><p>初次群面体验</p><p><img src="https://img2.imgtp.com/2024/05/24/4bBqlpdl.png" alt="群面题"></p><p>讨论得出：2,3,8,9,10.</p><p>群面总结：</p><p>Leader</p><p>Timer</p><p>小组成员</p><p>Recorder</p><p>reporter</p><p>洞察力 </p><p>优先级的能力 挑资源</p><p>合作能力</p><p>抗压能力</p><p>决策能力</p><p>创新思维</p><p>成本控制</p><p>能否被人记住</p><p>近期读《幕后产品》脑图</p><p><img src="https://img2.imgtp.com/2024/05/24/n79jCxeI.png" alt="幕后产品"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;产品岗最终要的是实习经历 做产品的经历&lt;/p&gt;
&lt;p&gt;star法则     描述项目经历 实习经历&lt;/p&gt;
&lt;p&gt;Situation（情景）、Task（任务）、Action（行动）和Result（结果）&lt;/p&gt;
&lt;p&gt;1、STAR法则，说清背景，结果要尽可能量化&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="非技术杂记" scheme="https://daixueshengt.github.io/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>防抖与节流</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c9.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c9.html</id>
    <published>2024-05-23T17:54:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<ul><li>防抖(Debounce)是指对于短时间内重复发生的输入事件,只处理最后一次输入。它的目的是消除输入抖动。</li></ul><ul><li>节流(Throttle)是指对于短时间内频繁发生的输入事件,只处理一定时间内的第一次输入。它的目的是限制输入频率。</li></ul><p>使用场景不同：</p><ul><li>防抖通常用于处理诸如按钮点击、滚动条滚动等偶尔发生的输入事件,以避免重复触发。</li><li>节流通常用于处理诸如鼠标移动、窗口大小调整等频繁发生的输入事件,以限制更新频率,提高性能。</li></ul><p>实现方式不同：</p><ul><li>防抖一般通过设置一个延迟时间,只在指定时间内没有新的输入事件发生时才触发。</li><li>节流一般通过设置一个固定的时间间隔,每隔一定时间触发一次输入事件的处理。</li></ul><p>效果不同：</p><ul><li>防抖可以确保在输入稳定后才触发一次事件处理。</li><li>节流可以确保在指定时间内至多触发一次事件处理。</li></ul><p>防抖函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">debence</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debence</span>(<span class="params">handle</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果第二次的时间没到1s，就销毁上一个定时器</span></span><br><span class="line">        <span class="comment">// 第二次点击时，会找到上一次闭包中的timer，并且销毁</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            handle.<span class="title function_">call</span>(<span class="variable language_">this</span>,e);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节流函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    获取当前时间戳 now。</span></span><br><span class="line"><span class="comment">    计算当前时间与上次执行时间 lastTime 的差值。</span></span><br><span class="line"><span class="comment">    如果差值大于等于 1000ms (1 秒), 则执行 handle 函数,并更新 lastTime 为当前时间。</span></span><br><span class="line"><span class="comment">    如果差值小于 1000ms, 则不执行 handle 函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">handle</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="comment">// 如果当前时间 - 上次执行时间 &gt;= 1000ms，则执行 handle 函数</span></span><br><span class="line">    <span class="keyword">if</span> (now - lastTime &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">      lastTime = now;</span><br><span class="line">      handle.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样,当我们在 1 秒内多次点击按钮时,throttle 函数只会在第一次点击时执行 handle 函数,后续的点击事件会被忽略,直到 1 秒后再次执行。</span></span><br></pre></td></tr></table></figure><p>可以使用lodash中的Debounce、Throttle 函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;防抖(Debounce)是指对于短时间内重复发生的输入事件,只处理最后一次输入。它的目的是消除输入抖动。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;节流(Throttle)是指对于短时间内频繁发生的输入事件,只处理一定时间内的第一次输入。它的目的是限制输入频率。&lt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="知识点" scheme="https://daixueshengt.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>5-15简单题开始找手感</title>
    <link href="https://daixueshengt.github.io/posts/43cc8af.html"/>
    <id>https://daixueshengt.github.io/posts/43cc8af.html</id>
    <published>2024-05-15T18:30:00.000Z</published>
    <updated>2024-08-12T15:22:24.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-牛群排列去重"><a href="#1-牛群排列去重" class="headerlink" title="1.  牛群排列去重"></a>1.  牛群排列去重</h2><p>[<a href="https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4">https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* pre=head;</span><br><span class="line">        ListNode* cur=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;val==cur-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=cur-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-调整牛群顺序"><a href="#2-调整牛群顺序" class="headerlink" title="2.调整牛群顺序"></a>2.调整牛群顺序</h2><p>[<a href="https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4">https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @param n int整型 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">moveNthToEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 统一操作，设置一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* tail=dummy;</span><br><span class="line">  <span class="comment">// 先有一个指针走到最后一个节点，并计算个数</span></span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p=dummy;</span><br><span class="line">  <span class="comment">//另一个指正走到倒数n个节点的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count-n;i++)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp=p-&gt;next;</span><br><span class="line">        p-&gt;next=tmp-&gt;next;</span><br><span class="line">        tail-&gt;next=tmp;</span><br><span class="line">        tmp-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-合并两群能量值"><a href="#3-合并两群能量值" class="headerlink" title="3.合并两群能量值"></a>3.合并两群能量值</h2><p>[<a href="https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec">https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param l1 ListNode类 </span></span><br><span class="line"><span class="comment">     * @param l2 ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeEnergyValues</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* cur=dummy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归并排序思想</span></span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&gt;=l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接剩余节点</span></span><br><span class="line">        <span class="keyword">if</span>(l1) cur-&gt;next=l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) cur-&gt;next=l2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-牛牛队列成环"><a href="#4-牛牛队列成环" class="headerlink" title="4.牛牛队列成环"></a>4.牛牛队列成环</h2><p>[<a href="https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7">https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span> || head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow-&gt;val!=fast-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">nullptr</span> || fast-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关键是这，快慢指针，快指针每次走两步，慢指针每次走一步，如果存在环，一定会相遇。</span></span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-牛群编号的回文顺序"><a href="#5-牛群编号的回文顺序" class="headerlink" title="5.牛群编号的回文顺序"></a>5.牛群编号的回文顺序</h2><p>[<a href="https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528">https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以将链表中的数据保存到一个vector数组中，然后判断这个数组是否回文。</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;<span class="function">s</span></span><br><span class="line"><span class="function">    <span class="title">for</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>,j=v.size()<span class="number">-1</span>;i&lt;j;i++,j--)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=v[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-牛群的秘密通信"><a href="#6-牛群的秘密通信" class="headerlink" title="6.牛群的秘密通信"></a>6.牛群的秘密通信</h2><ol><li>创建一个栈用于存储左括号。栈的作用是用于判断括号的闭合性，它遵循先进后出的原则。每当遇到左括号时，就将其压入栈中，当遇到右括号时，就需要判断当前栈顶的左括号是否与之匹配。</li><li>遍历字符串s的每个字符。在遍历过程中，对于每个字符，我们需要判断它是否是左括号或右括号，并进行相应的操作。</li><li>如果当前字符是左括号（‘(’, ‘{’, ‘[’），将其压入栈中。</li><li>如果当前字符是右括号（‘)’, ‘}’,‘]’），我们需要判断栈是否为空。如果栈为空，说明没有相应的左括号与之匹配，直接返回false。如果栈不为空，将栈顶的左括号弹出，判断当前右括号是否与弹出的左括号匹配。如果不匹配，返回false。</li><li>遍历结束后，判断栈是否为空。如果栈不为空，说明左括号没有完全闭合，返回false；如果栈为空，说明所有左括号都有相应的右括号匹配，返回true。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param s string字符串</span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_valid_cow_communication</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-牛的表达式计算器"><a href="#7-牛的表达式计算器" class="headerlink" title="7.牛的表达式计算器"></a>7.牛的表达式计算器</h2><p>[<a href="https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906">https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param tokens string字符串vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用到队列，从左往右，依次入队，遇到运算符，出队两个进行计算，再入队</span></span><br><span class="line">        <span class="comment">// 将数组中的数据入栈，如果遇到符号，则出数据并进行相加，再入数据，直到遍历完。</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> str:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str==<span class="string">&quot;+&quot;</span>||str==<span class="string">&quot;-&quot;</span>||str==<span class="string">&quot;*&quot;</span>||str==<span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> right=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> left=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (str[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left+right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left-right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left*right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left/right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tokens[i] != <span class="string">&quot;+&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;-&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;*&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sk.<span class="built_in">push</span>(<span class="built_in">stoi</span>(tokens[i])); <span class="comment">// 遇到数字将其入栈（需要将字符串转为整型）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 遇到运算符则依次弹出栈顶的两个数字进行相应的运算</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> a = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> res;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a + b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a - b; <span class="comment">// 注意弹出和运算顺序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a * b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res = a / b;</span><br><span class="line">            &#125;</span><br><span class="line">            sk.<span class="built_in">push</span>(res); <span class="comment">// 将运算结果入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sk.<span class="built_in">top</span>(); <span class="comment">// 最终栈顶元素即为运算结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-牛群排列去重&quot;&gt;&lt;a href=&quot;#1-牛群排列去重&quot; class=&quot;headerlink&quot; title=&quot;1.  牛群排列去重&quot;&gt;&lt;/a&gt;1.  牛群排列去重&lt;/h2&gt;&lt;p&gt;[&lt;a href=&quot;https://www.nowcoder.com/practic</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
