<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陶同学&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/85a0cbb73a82a62a3f9fc11c5e6f5f5c</icon>
  <subtitle>hhh</subtitle>
  <link href="https://daixueshengt.github.io/atom.xml" rel="self"/>
  
  <link href="https://daixueshengt.github.io/"/>
  <updated>2024-05-23T14:55:27.359Z</updated>
  <id>https://daixueshengt.github.io/</id>
  
  <author>
    <name>陶同学</name>
    <email>2568510567@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>防抖与节流</title>
    <link href="https://daixueshengt.github.io/posts/100fa4c9.html"/>
    <id>https://daixueshengt.github.io/posts/100fa4c9.html</id>
    <published>2024-05-23T17:54:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<ul><li>防抖(Debounce)是指对于短时间内重复发生的输入事件,只处理最后一次输入。它的目的是消除输入抖动。</li></ul><ul><li>节流(Throttle)是指对于短时间内频繁发生的输入事件,只处理一定时间内的第一次输入。它的目的是限制输入频率。</li></ul><p>使用场景不同：</p><ul><li>防抖通常用于处理诸如按钮点击、滚动条滚动等偶尔发生的输入事件,以避免重复触发。</li><li>节流通常用于处理诸如鼠标移动、窗口大小调整等频繁发生的输入事件,以限制更新频率,提高性能。</li></ul><p>实现方式不同：</p><ul><li>防抖一般通过设置一个延迟时间,只在指定时间内没有新的输入事件发生时才触发。</li><li>节流一般通过设置一个固定的时间间隔,每隔一定时间触发一次输入事件的处理。</li></ul><p>效果不同：</p><ul><li>防抖可以确保在输入稳定后才触发一次事件处理。</li><li>节流可以确保在指定时间内至多触发一次事件处理。</li></ul><p>防抖函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">debence</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debence</span>(<span class="params">handle</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果第二次的时间没到1s，就销毁上一个定时器</span></span><br><span class="line">        <span class="comment">// 第二次点击时，会找到上一次闭包中的timer，并且销毁</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            handle.<span class="title function_">call</span>(<span class="variable language_">this</span>,e);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节流函数举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(handle));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    获取当前时间戳 now。</span></span><br><span class="line"><span class="comment">    计算当前时间与上次执行时间 lastTime 的差值。</span></span><br><span class="line"><span class="comment">    如果差值大于等于 1000ms (1 秒), 则执行 handle 函数,并更新 lastTime 为当前时间。</span></span><br><span class="line"><span class="comment">    如果差值小于 1000ms, 则不执行 handle 函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">handle</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="comment">// 如果当前时间 - 上次执行时间 &gt;= 1000ms，则执行 handle 函数</span></span><br><span class="line">    <span class="keyword">if</span> (now - lastTime &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">      lastTime = now;</span><br><span class="line">      handle.<span class="title function_">call</span>(<span class="variable language_">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样,当我们在 1 秒内多次点击按钮时,throttle 函数只会在第一次点击时执行 handle 函数,后续的点击事件会被忽略,直到 1 秒后再次执行。</span></span><br></pre></td></tr></table></figure><p>可以使用lodash中的Debounce、Throttle 函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;防抖(Debounce)是指对于短时间内重复发生的输入事件,只处理最后一次输入。它的目的是消除输入抖动。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;节流(Throttle)是指对于短时间内频繁发生的输入事件,只处理一定时间内的第一次输入。它的目的是限制输入频率。&lt;</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5-15简单题开始找手感</title>
    <link href="https://daixueshengt.github.io/posts/43cc8af.html"/>
    <id>https://daixueshengt.github.io/posts/43cc8af.html</id>
    <published>2024-05-15T18:30:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-牛群排列去重"><a href="#1-牛群排列去重" class="headerlink" title="1.  牛群排列去重"></a>1.  牛群排列去重</h2><p>[<a href="https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4">https://www.nowcoder.com/practice/8cabda340ac6461984ef9a1ad66915e4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode* pre=head;</span><br><span class="line">        ListNode* cur=head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre-&gt;val==cur-&gt;val)&#123;</span><br><span class="line">                pre-&gt;next=cur-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre=cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-调整牛群顺序"><a href="#2-调整牛群顺序" class="headerlink" title="2.调整牛群顺序"></a>2.调整牛群顺序</h2><p>[<a href="https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4">https://www.nowcoder.com/practice/a1f432134c31416b8b2957e66961b7d4</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @param n int整型 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">moveNthToEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 统一操作，设置一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* tail=dummy;</span><br><span class="line">  <span class="comment">// 先有一个指针走到最后一个节点，并计算个数</span></span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p=dummy;</span><br><span class="line">  <span class="comment">//另一个指正走到倒数n个节点的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count-n;i++)&#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tmp=p-&gt;next;</span><br><span class="line">        p-&gt;next=tmp-&gt;next;</span><br><span class="line">        tail-&gt;next=tmp;</span><br><span class="line">        tmp-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-合并两群能量值"><a href="#3-合并两群能量值" class="headerlink" title="3.合并两群能量值"></a>3.合并两群能量值</h2><p>[<a href="https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec">https://www.nowcoder.com/practice/d728938f66ac44b5923d4f2e185667ec</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param l1 ListNode类 </span></span><br><span class="line"><span class="comment">     * @param l2 ListNode类 </span></span><br><span class="line"><span class="comment">     * @return ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeEnergyValues</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个虚拟头节点</span></span><br><span class="line">        ListNode* dummy=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* cur=dummy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 归并排序思想</span></span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&gt;=l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//连接剩余节点</span></span><br><span class="line">        <span class="keyword">if</span>(l1) cur-&gt;next=l1;</span><br><span class="line">        <span class="keyword">if</span>(l2) cur-&gt;next=l2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-牛牛队列成环"><a href="#4-牛牛队列成环" class="headerlink" title="4.牛牛队列成环"></a>4.牛牛队列成环</h2><p>[<a href="https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7">https://www.nowcoder.com/practice/38467f349b3a4db595f58d43fe64fcc7</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *int val;</span></span><br><span class="line"><span class="comment"> *struct ListNode *next;</span></span><br><span class="line"><span class="comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param head ListNode类 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">nullptr</span> || head-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(slow-&gt;val!=fast-&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==<span class="literal">nullptr</span> || fast-&gt;next==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关键是这，快慢指针，快指针每次走两步，慢指针每次走一步，如果存在环，一定会相遇。</span></span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-牛群编号的回文顺序"><a href="#5-牛群编号的回文顺序" class="headerlink" title="5.牛群编号的回文顺序"></a>5.牛群编号的回文顺序</h2><p>[<a href="https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528">https://www.nowcoder.com/practice/e41428c80d48458fac60a35de44ec528</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以将链表中的数据保存到一个vector数组中，然后判断这个数组是否回文。</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;<span class="function">s</span></span><br><span class="line"><span class="function">    <span class="title">for</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>,j=v.size()<span class="number">-1</span>;i&lt;j;i++,j--)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=v[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-牛群的秘密通信"><a href="#6-牛群的秘密通信" class="headerlink" title="6.牛群的秘密通信"></a>6.牛群的秘密通信</h2><ol><li>创建一个栈用于存储左括号。栈的作用是用于判断括号的闭合性，它遵循先进后出的原则。每当遇到左括号时，就将其压入栈中，当遇到右括号时，就需要判断当前栈顶的左括号是否与之匹配。</li><li>遍历字符串s的每个字符。在遍历过程中，对于每个字符，我们需要判断它是否是左括号或右括号，并进行相应的操作。</li><li>如果当前字符是左括号（‘(’, ‘{’, ‘[’），将其压入栈中。</li><li>如果当前字符是右括号（‘)’, ‘}’,‘]’），我们需要判断栈是否为空。如果栈为空，说明没有相应的左括号与之匹配，直接返回false。如果栈不为空，将栈顶的左括号弹出，判断当前右括号是否与弹出的左括号匹配。如果不匹配，返回false。</li><li>遍历结束后，判断栈是否为空。如果栈不为空，说明左括号没有完全闭合，返回false；如果栈为空，说明所有左括号都有相应的右括号匹配，返回true。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param s string字符串</span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_valid_cow_communication</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;(&#x27;</span> || c==<span class="string">&#x27;&#123;&#x27;</span> || c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(c);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>()!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="7-牛的表达式计算器"><a href="#7-牛的表达式计算器" class="headerlink" title="7.牛的表达式计算器"></a>7.牛的表达式计算器</h2><p>[<a href="https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906">https://www.nowcoder.com/practice/261e7f01438f414c92f59c0059d3a906</a>]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param tokens string字符串vector </span></span><br><span class="line"><span class="comment">     * @return int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用到队列，从左往右，依次入队，遇到运算符，出队两个进行计算，再入队</span></span><br><span class="line">        <span class="comment">// 将数组中的数据入栈，如果遇到符号，则出数据并进行相加，再入数据，直到遍历完。</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> str:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str==<span class="string">&quot;+&quot;</span>||str==<span class="string">&quot;-&quot;</span>||str==<span class="string">&quot;*&quot;</span>||str==<span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="type">int</span> right=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> left=st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (str[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left+right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left-right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left*right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        st.<span class="built_in">push</span>(left/right);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculatePostfix</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tokens[i] != <span class="string">&quot;+&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;-&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;*&quot;</span> &amp;&amp; tokens[i] != <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sk.<span class="built_in">push</span>(<span class="built_in">stoi</span>(tokens[i])); <span class="comment">// 遇到数字将其入栈（需要将字符串转为整型）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 遇到运算符则依次弹出栈顶的两个数字进行相应的运算</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> a = sk.<span class="built_in">top</span>();</span><br><span class="line">            sk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> res;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a + b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a - b; <span class="comment">// 注意弹出和运算顺序</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;*&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a * b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                res = a / b;</span><br><span class="line">            &#125;</span><br><span class="line">            sk.<span class="built_in">push</span>(res); <span class="comment">// 将运算结果入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sk.<span class="built_in">top</span>(); <span class="comment">// 最终栈顶元素即为运算结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-牛群排列去重&quot;&gt;&lt;a href=&quot;#1-牛群排列去重&quot; class=&quot;headerlink&quot; title=&quot;1.  牛群排列去重&quot;&gt;&lt;/a&gt;1.  牛群排列去重&lt;/h2&gt;&lt;p&gt;[&lt;a href=&quot;https://www.nowcoder.com/practic</summary>
      
    
    
    
    <category term="算法训练" scheme="https://daixueshengt.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="算法题" scheme="https://daixueshengt.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>9.day9 (5-14)</title>
    <link href="https://daixueshengt.github.io/posts/a5d80461.html"/>
    <id>https://daixueshengt.github.io/posts/a5d80461.html</id>
    <published>2024-05-14T11:30:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="牛客-前端专业面试真题"><a href="#牛客-前端专业面试真题" class="headerlink" title="牛客-前端专业面试真题"></a>牛客-前端专业面试真题</h2><h3 id="1-说一说HTML语义化？"><a href="#1-说一说HTML语义化？" class="headerlink" title="1.说一说HTML语义化？"></a>1.说一说HTML语义化？</h3><p>语义化标签、利于页面内容结构化、利于无CSS页面可读、利于SEO、利于代码可读  标准回答 HTML语义化就是指在使用HTML标签构建页面时，避免大篇幅的使用无语义的标签</p><p>使用HTML语义化标签的作用：</p><ul><li>易于用户阅读，样式文件未加载时，页面结构清晰</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重</li><li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li><li>有利于开发和维护，代码更具可读性，代码更好维护</li></ul><p>加分回答 HTML5语义化标签并没有广泛使用，比如京东、淘宝等，还是使用div元素，设置id是header或者footer，这个可能是因为HTML5新增的语义化标签的作用不是特别大，网站没有必要重写</p><h3 id="2-说一说盒模型？"><a href="#2-说一说盒模型？" class="headerlink" title="2.说一说盒模型？"></a>2.说一说盒模型？</h3><p>CSS盒模型定义了盒的每个部分包含 margin, border, padding,  content 。根据盒子大小的计算方式不同盒模型分成了两种，标准盒模型和怪异盒模型。 标准模型，给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是 content box。<code>padding</code> 和 <code>border</code>再加上设置的宽高一起决定整个盒子的大小。  怪异盒模型，给盒设置 <code>width</code> 和 <code>height</code>，包含了<code>padding</code>和<code>border</code>，设置的 <code>width</code> 和 <code>height</code>就是盒子实际的大小 默认情况下，盒模型都是标准盒模型 设置标准盒模型：<code>box-sizing:content-box</code> 设置怪异盒模型：<code>box-sizing:border-box</code></p><h3 id="3-说一下浮动？"><a href="#3-说一下浮动？" class="headerlink" title="3.说一下浮动？"></a>3.说一下浮动？</h3><p>得分点 脱离文档流、盒子塌陷、 影响其他元素排版、伪元素  、<code>overflow:hidden</code> 、标签插入法  </p><p>标准回答 浮动的作用，设置浮动的图片，可以实现文字环绕图片，设置了浮动的块级元素可以排列在同一行，设置了浮动的行内元素可以设置宽高，同时可以按照浮动设置的方向对齐排列盒子。</p><p>设置浮动元素的特点：</p><ul><li>设置了浮动，该元素脱标。元素不占位置 -浮动可以进行模式转换（行内块元素）  浮动造成的影响，使盒子脱离文档流，如果父级盒子没有设置高度，需要被子盒子撑开，那么这时候父级盒子的高度就塌陷了，同时也会造成父级盒子后面的兄弟盒子布局受到影响。如果浮动元素后面还有其他兄弟元素，其他兄弟元素的布局也会受到影响。  </li></ul><p>清除浮动的方法：</p><ul><li>伪元素清除浮动：给浮动元素父级增加 .clearfix::after {      content: ‘’; display: table; clear: both;  } /<em>兼容IE低版本 </em>/ .clearfix {  *zoom: 1; } overflow：hidden<code>：给浮动元素父级增加</code>overflow：hidden`属性 额外标签法：给浮动元素父级增加标签 </li></ul><p>加分回答 三种清除浮动的特点和影响：</p><ul><li>伪元素清除浮动：不会新增标签，不会有其他影响，是当下清除浮动最流行的方法 </li><li><code>overflow：hidden</code>：不会新增标签，但是如果父级元素有定位元素超出父级，超出部分会隐藏，在不涉及父级元素有超出内容的情况，overflow：hidden比较常用，毕竟写法方便简洁 </li><li>标签插入法：清除浮动的语法加在新增标签上，由于新增标签会造成不必要的渲染，所以这种方法目前不建议使用</li></ul><h3 id="4-说一说样式优先级的规则是什么？"><a href="#4-说一说样式优先级的规则是什么？" class="headerlink" title="4.说一说样式优先级的规则是什么？"></a>4.说一说样式优先级的规则是什么？</h3><p>得分点 <code>!important</code>、行内样式、嵌入样式、外链样式、id选择器、类选择器、标签选择器、复合选择器、通配符、继承样式  </p><p>标准回答:</p><p>CSS样式的优先级应该分成四大类</p><ul><li>第一类<code>!important</code>，无论引入方式是什么，选择器是什么，它的优先级都是最高的。</li><li>第二类引入方式，行内样式的优先级要高于嵌入和外链，嵌入和外链如果使用的选择器相同就看他们在页面中插入的顺序，在后面插入的会覆盖前面的。</li><li>第三类选择器，选择器优先级：id选择器&gt;（类选择器 | 伪类选择器 | 属性选择器 ）&gt; （后代选择器 | 伪元素选择器 ）&gt; （子选择器 | 相邻选择器） &gt; 通配符选择器 。</li><li>第四类继承样式，是所有样式中优先级比较低的。</li><li>第五类浏览器默认样式优先级最低。</li></ul><p>加分回答：</p><p>用!important要谨慎</p><ul><li>一定要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li><li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li><li>永远不要在你的插件中使用 <code>!important</code></li><li>永远不要在全站范围的 CSS 代码中使用 <code>!important</code>  优先级的比较指的是相同的样式属性，不同样式属性优先级比较失效，比如：在设置<code>max-width</code>时注意，已经给元素的<code>max-width</code>设置了<code>!important</code>但是还不生效，很有可能就是被width覆盖了  举例：<code>div</code>最终的宽度还是<code>200px</code>  <code>div &#123;  max-width: 400px !important; height: 200px;background-color: tomato;width: 200px;&#125;</code></li></ul><h3 id="5-说一说CSS尺寸设置的单位"><a href="#5-说一说CSS尺寸设置的单位" class="headerlink" title="5.说一说CSS尺寸设置的单位"></a>5.说一说CSS尺寸设置的单位</h3><p>px、rem、em、vw、vh </p><p>标准回答:</p><p>px：pixel像素的缩写，绝对长度单位，它的大小取决于屏幕的分辨率，是开发网页中常常使用的单位。</p><p>em：相对长度单位，在 <code>font-size</code> 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width。如当前元素的字体尺寸未设置，由于字体大小可继承的原因，可逐级向上查找，最终找不到则相对于浏览器默认字体大小。</p><p>rem：相对长度单位，相对于根元素的字体大小，根元素字体大小未设置，使用浏览器默认字体大小。</p><p>vw：相对长度单位，相对于视窗宽度的1%。</p><p>vh：相对长度单位，相对于视窗高度的1%。</p><p> 加分回答:</p><p>rem应用：在移动端网页开发中，页面要做成响应式的，可使用rem配合媒体查询或者flexible.js实现。原理是通过媒体查询或者flexible.js，能够在屏幕尺寸发生改变时，重置html根元素的字体大小，页面中的元素都是使用rem为单位设置的尺寸，因此只要改变根元素字体大小，页面中的其他元素的尺寸就自动跟着修改  vw应用：由于vw被更多浏览器兼容之后，在做移动端响应式页面时，通常使用vw配合rem。原理是使用vw设置根元素html字体的大小，当窗口大小发生改变，vw代表的尺寸随着修改，无需加入媒体查询和flexible.js，页面中的其他元素仍使用rem为单位，就可实现响应式。</p><h3 id="6-说一说BFC"><a href="#6-说一说BFC" class="headerlink" title="6.说一说BFC"></a>6.说一说BFC</h3><p>定义：BFC(Block Formatting Context)块级格式化上下文，是Web页面一块独立的渲染区域，内部元素的渲染不会影响边界以外的元素。</p><p>形成条件：a.flaot  b.position  3. overflow  4.display</p><p>布局规则：</p><p>a.区域内box从上到下排列 </p><p>b.box垂直方向的距离由margin决定 </p><p>c.同一个bfc内box margin会重叠</p><p>d.bfc不会与flaot重叠 </p><p>e.bfc计算高度 也会计算float元素 </p><h3 id="7-说几个未知宽高元素水平垂直居中方法"><a href="#7-说几个未知宽高元素水平垂直居中方法" class="headerlink" title="7.说几个未知宽高元素水平垂直居中方法"></a>7.说几个未知宽高元素水平垂直居中方法</h3><p><code>position</code>   <code>transform</code>   <code>flex</code>   <code>justify-content</code>   <code>align-items</code>  <code>vertical-align</code>  <code>text-align</code></p><p> 标准回答</p><p> 未知宽高元素水平垂直都居中的实现方法：</p><ol><li>设置元素相对父级定位<code>position:absolute;left:50%;right:50%</code>，让自身平移自身高度50% <code>transform: translate(-50%,-50%);</code>，这种方式兼容性好，被广泛使用的一种方式</li><li>设置元素的父级为弹性盒子<code>display:flex</code>，设置父级和盒子内部子元素水平垂直都居中<code>justify-content:center; align-items:center</code>  ，这种方式代码简洁，但是兼容性ie 11以上支持，由于目前ie版本都已经很高，很多网站现在也使用这种方式实现水平垂直居中</li><li>设置元素的父级为网格元素<code>display: grid</code>，设置父级和盒子内部子元素水平垂直都居中<code>justify-content:center; align-items:center</code>  ，这种方式代码简洁，但是兼容性ie 10以上支持<ol><li>设置元素的父级为表格元素<code>display: table-cell</code>，其内部元素水平垂直都居中<code>text-align: center;vertical-align: middle;</code> ，设置子元素为行内块<code>display: inline-block;</code>，这种方式兼容性较好</li></ol></li></ol><p>加分回答</p><p>京东的移动端顶部京东logo，使用的是<code>display:flex</code>这种模式 </p><h3 id="8-说一说三栏布局的实现方案"><a href="#8-说一说三栏布局的实现方案" class="headerlink" title="8.说一说三栏布局的实现方案"></a>8.说一说三栏布局的实现方案</h3><p>三栏布局：三栏布局一般指的是页面中一共有三栏，左右两栏宽度固定，中间自适应的布局，一共有五种实现方式。  这里以左边宽度固定为100px，右边宽度固定为200px为例。  （1）利用绝对定位的方式，左右两栏设置为绝对定位，中间设置对应方向大小的margin的值。  （2）利用flex布局的方式，左右两栏的宽度分别设置为100px和200px，中间一栏增长系数设置为1  （3）利用浮动的方式，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的margin值，注意这种方式，中间一栏必须放到最后。  （4）圣杯布局，利用浮动和负边距来实现。父级元素设置左右的padding，三列均设置向左浮动，中间一列放在最前面，宽度设置为父级元素的宽度，因此后面两列都被挤到了下一行，通过设置margin负值将其移动到上一行，再利用相对定位，定位到两边。圣杯布局中间列的宽度不能小于左边列的宽度，否则左边列上不去，而双飞翼布局则不存在这个问题。  （5）双飞翼布局，双飞翼布局相对于圣杯布局来说，左右位置的保留是通过中间列的margin值来实现的，而不是通过父元素的padding来实现的。本质上来说，也是通过浮动和外边距负值来实现的。</p><h3 id="9-说一说JS数据类型有哪些-区别是什么？"><a href="#9-说一说JS数据类型有哪些-区别是什么？" class="headerlink" title="9.说一说JS数据类型有哪些,区别是什么？"></a>9.说一说JS数据类型有哪些,区别是什么？</h3><p>Number、String、Boolean、BigInt、Symbol、Null、Undefined、Object、8种</p><p>标准回答：</p><p> JS数据类型分为两类：一类是基本数据类型，也叫简单数据类型，包含7种类型，分别是Number 、String、Boolean、BigInt、Symbol、Null、Undefined。另一类是引用数据类型也叫复杂数据类型，通常用Object代表，普通对象，数组，正则，日期，Math数学函数都属于Object。</p><p> 数据分成两大类的本质区别：基本数据类型和引用数据类型它们在内存中的存储方式不同。</p><p> 基本数据类型是直接存储在栈中的简单数据段，占据空间小，属于被频繁使用的数据。</p><p>引用数据类型是存储在堆内存中，占据空间大。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。</p><p> 加分回答：</p><p> Symbol是ES6新出的一种数据类型，这种数据类型的特点就是没有重复的数据，可以作为object的key。</p><p>数据的创建方法Symbol()，因为它的构造函数不够完整，所以不能使用new Symbol()创建数据。由于Symbol()创建数据具有唯一性，所以 Symbol() !== Symbol(), 同时使用Symbol数据作为key不能使用for获取到这个key，需要使用Object.getOwnPropertySymbols(obj)获得这个obj对象中key类型是Symbol的key值。</p><p>BigInt也是ES6新出的一种数据类型，这种数据类型的特点就是数据涵盖的范围大，能够解决超出普通数据类型范围报错的问题。</p><p>使用方法：</p><ul><li>整数末尾直接+n：647326483767797n</li><li>调用BigInt()构造函数：BigInt(“647326483767797”)</li><li>注意：BigInt和Number之间不能进行混合操作  </li></ul><h3 id="10-说一说null-和-undefined-的区别，如何让一个属性变为null"><a href="#10-说一说null-和-undefined-的区别，如何让一个属性变为null" class="headerlink" title="10.说一说null 和 undefined 的区别，如何让一个属性变为null"></a>10.说一说null 和 undefined 的区别，如何让一个属性变为null</h3><p>undefind 是全局对象的一个属性，当一个变量没有被赋值或者一个函数没有返回值或者某个对象不存在某个属性却去访问或者函数定义了形参但没有传递实参，这时候都是undefined。undefined通过typeof判断类型是’undefined’。undefined == undefined  undefined === undefined 。</p><p>null代表对象的值未设置，相当于一个对象没有设置指针地址就是null。null通过typeof判断类型是’object’。</p><p>undefined 表示一个变量初始状态值，而 null 则表示一个变量被人为的设置为空对象，而不是原始状态。</p><p>null 其实属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。 对象被赋值了null 以后，对象对应的堆内存中的值就是游离状态了，GC 会择机回收该值并释放内存。因此，需要释放某个对象，就将变量设置为 null，即表示该对象已经被清空，目前无效状态。</p><h3 id="11-说一说JavaScript有几种方法判断变量的类型？"><a href="#11-说一说JavaScript有几种方法判断变量的类型？" class="headerlink" title="11.说一说JavaScript有几种方法判断变量的类型？"></a>11.说一说JavaScript有几种方法判断变量的类型？</h3><p>typeof、instanceof、Object.prototype.toString.call()（对象原型链判断方法）、 constructor (用于引用数据类型)   </p><p>标准回答:</p><p>typeof：常用于判断基本数据类型，对于引用数据类型除了function返回’function‘，其余全部返回’object’。</p><p>instanceof：主要用于区分引用数据类型，检测方法是检测的类型在当前实例的原型链上，用其检测出来的结果都是true，不太适合用于简单数据类型的检测，检测过程繁琐且对于简单数据类型中的undefined, null, symbol检测不出来。</p><p>constructor：用于检测引用数据类型，检测方法是获取实例的构造函数判断和某个类是否相同，如果相同就说明该数据是符合那个数据类型的，这种方法不会把原型链上的其他类也加入进来，避免了原型链的干扰。</p><p>Object.prototype.toString.call()：适用于所有类型的判断检测，检测方法是Object.prototype.toString.call(数据) 返回的是该数据类型的字符串。 </p><h3 id="12-说一说数组去重都有哪些方法？"><a href="#12-说一说数组去重都有哪些方法？" class="headerlink" title="12.说一说数组去重都有哪些方法？"></a>12.说一说数组去重都有哪些方法？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">new</span> <span class="title class_">Set</span>(): </span><br><span class="line"><span class="keyword">let</span> array = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"><span class="number">2.</span><span class="attr">indexOf</span>: </span><br><span class="line"><span class="keyword">if</span>(array.<span class="title function_">indexOf</span>(arr[i]) == -<span class="number">1</span>)&#123; array.<span class="title function_">push</span>(arr[i])&#125;  </span><br><span class="line">或者 arr5.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, self</span>) =&gt;</span> &#123;<span class="keyword">return</span> self.<span class="title function_">indexOf</span>(item) === index&#125;)  </span><br><span class="line"><span class="number">3.</span>使用reduce+includes：</span><br><span class="line"><span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,curr</span>) =&gt;</span> prev.<span class="title function_">includes</span>(curr) ? prev : [...prev,curr],[])   </span><br></pre></td></tr></table></figure><h3 id="13-说一说伪数组和数组的区别？"><a href="#13-说一说伪数组和数组的区别？" class="headerlink" title="13.说一说伪数组和数组的区别？"></a>13.说一说伪数组和数组的区别？</h3><p> 伪数组它的类型不是Array，而是Object，而数组类型是Array。可以使用的length属性查看长度，也可以使用[index]获取某个元素，但是不能使用数组的其他方法，也不能改变长度，遍历使用for in方法。</p><p>伪数组的常见场景：</p><ul><li>函数的参数arguments </li><li>原生js获取DOM：document.querySelector(‘div’) 等</li><li>jquery获取DOM：$(“div”)等 </li></ul><p>伪数组转换成真数组方法 </p><ul><li>Array.prototype.slice.call(伪数组) </li><li>[].slice.call(伪数组) </li><li>Array.from(伪数组) 转换后的数组长度由 <code>length</code> 属性决定。索引不连续时转换结果是连续的，会自动补位。</li></ul><h3 id="14-说一说map-和-forEach-的区别？"><a href="#14-说一说map-和-forEach-的区别？" class="headerlink" title="14.说一说map 和 forEach 的区别？"></a>14.说一说map 和 forEach 的区别？</h3><p>map有返回值，可以开辟新空间，return出来一个length和原数组一致的数组，即便数组元素是undefined或者是null。</p><p>forEach默认无返回值，返回结果为undefined，可以通过在函数体内部使用索引修改数组元素。</p><p>map的处理速度比forEach快，而且返回一个新的数组，方便链式调用其他数组新方法，比如filter、reduce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; </span><br><span class="line"><span class="keyword">let</span> arr2 = arr.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> value * value).<span class="title function_">filter</span>(<span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">10</span>); <span class="comment">// arr2 = [16, 25]</span></span><br></pre></td></tr></table></figure><h3 id="15-说一说es6中箭头函数？"><a href="#15-说一说es6中箭头函数？" class="headerlink" title="15.说一说es6中箭头函数？"></a>15.说一说es6中箭头函数？</h3><p>得分点 没有this、this是从外部获取、不能使用new、没有arguments、没有原型和super</p><p>标准回答</p><p>箭头函数相当于匿名函数，简化了函数定义。箭头函数有两种写法，当函数体是单条语句的时候可以省略{}和return。另一种是包含多条语句，不可以省略{}和return。</p><p>箭头函数最大的特点就是没有this，所以this是从外部获取，就是继承外部的执行上下文中的this，由于没有this关键字所以箭头函数也不能作为构造函数， 同时通过 <code>call()</code> 或 <code>apply()</code> 方法调用一个函数时，只能传递参数（不能绑定this），第一个参数会被忽略。箭头函数也没有原型和super。</p><p>不能使用yield关键字，因此箭头函数不能用作 Generator 函数。不能返回直接对象字面量。  </p><p>加分回答</p><p>箭头函数函数适用场景:</p><ul><li><p>简单的函数表达式，内部没有this引用，没有递归、事件绑定、解绑定，适用于map、filter等方法中，写法简洁  <code>var arr = [1,2,3]; var newArr = arr.map((num)=&gt;num*num)</code></p></li><li><p>内层函数表达式，需要调用this，且this应与外层函数一致时</p></li><li><blockquote><p>let group = {   title: “Our Group”,   students: [“John”, “Pete”, “Alice”],   </p><p>showList() {     this.students.forEach(       student =&gt; alert(this.title + ‘: ‘ + student)     );   } }; group.showList();</p></blockquote></li></ul><h3 id="16-事件扩展符用过吗-…-，什么场景下？"><a href="#16-事件扩展符用过吗-…-，什么场景下？" class="headerlink" title="16.事件扩展符用过吗(…)，什么场景下？"></a>16.事件扩展符用过吗(…)，什么场景下？</h3><ol><li>数组克隆 let a = [1,2,3];let b = […a] </li><li>数组合并 let a = [1,2,3];let b = [4,5,6];let c = […a,…b] </li><li>类数组转成真正的数组 let a = new Set([1,2,3]); let b = […a] </li></ol><p>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历的属性，浅拷贝到当前的对象中，浅拷贝和深拷贝：浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p><h3 id="17-说一说你对闭包的理解？"><a href="#17-说一说你对闭包的理解？" class="headerlink" title="17.说一说你对闭包的理解？"></a>17.说一说你对闭包的理解？</h3><ol><li>内层函数引用外层函数中变量，这些变量的集合就是闭包 </li><li>通过作用域链，当前作用域可以访问上级作用域中的变量 </li><li>解决的问题：保存变量，保护变量 </li><li>带来的问题：内存泄露 </li><li>块级作用域</li></ol><p>闭包形成的原理：作用域链，当前作用域可以访问上级作用域中的变量</p><p>闭包解决的问题：能够让函数作用域中的变量在函数执行结束之后不被销毁，同时也能在函数外部可以访问函数内部的局部变量。 </p><p>闭包带来的问题：由于垃圾回收器不会将闭包中变量销毁，于是就造成了内存泄露，内存泄露积累多了就容易导致内存溢出。</p><p>加分回答 闭包的应用，能够模仿块级作用域，能够实现柯里化，在构造函数中定义特权方法、Vue中数据响应式Observer中使用闭包等。 </p><h3 id="18-说一说JS变量提升？"><a href="#18-说一说JS变量提升？" class="headerlink" title="18.说一说JS变量提升？"></a>18.说一说JS变量提升？</h3><p>函数和var声明的变量会有变量提升，js在预编译阶段会将函数和var声明的变量提升至最前面先执行，之后再按顺序执行代码块进行赋值，而let和const声明的变量只是创建提升，在预编译中将其创建，形成暂时性死区，不能提前访问和调用变量，只能在赋值之后进行调用和访问</p><h3 id="19-说一说this指向（普通函数、箭头函数）？"><a href="#19-说一说this指向（普通函数、箭头函数）？" class="headerlink" title="19.说一说this指向（普通函数、箭头函数）？"></a>19.说一说this指向（普通函数、箭头函数）？</h3><p>普通函数指向调用处，箭头函数指向定义处</p><h3 id="20-说一说call-apply-bind的作用和区别？"><a href="#20-说一说call-apply-bind的作用和区别？" class="headerlink" title="20.说一说call apply bind的作用和区别？"></a>20.说一说call apply bind的作用和区别？</h3><p>首先，call apply bind三个方法都可以用来改变函数的this指向，具体区别如下：</p><p>1、fn.call (newThis,params) call函数的第一个参数是this的新指向，后面依次传入函数fn要用到的参数。会立即执行fn函数。  </p><p>  2、fn.apply (newThis,paramsArr) apply函数的第一个参数是this的新指向,第二个参数是fn要用到的参数数组，会立即执行fn函数。  </p><p>  3、fn.bind (newThis,params) bind函数的第一个参数是this的新指向，后面的参数可以直接传递，也可以按数组的形式传入。  不会立即执行fn函数，且只能改变一次fn函数的指向，后续再用bind更改无效。返回的是已经更改this指向的新fn</p><h3 id="21-说一说js继承的方法和优缺点？"><a href="#21-说一说js继承的方法和优缺点？" class="headerlink" title="21.说一说js继承的方法和优缺点？"></a>21.说一说js继承的方法和优缺点？</h3><p>1、原型链继承 </p><p>优点：写法简单、容易理解。</p><p>缺点：①引用类型的值会被所有实例共享；②在子类实例对象创建时，不能向父类传参；</p><p>2、借用构造函数继承 </p><p>优点：①避免了引用类型的值会被所有实例共享；②在子类实例对象创建时，可以向父类传参；</p><p>缺点：方法在构造函数中，每次创建实例对象时都会重新创建一遍方法；</p><p>3、组合继承</p><p>融合原型链和借用构造函数的优点，是js中最常用的继承方式；</p><p>缺点：无论什么情况下，父类构造函数都会被调用两次，一是创建子类原型对象时，二是子类构造函数内部。</p><p>4、原型式继承 </p><p>优点：不需要单独创建构造函数；</p><p>缺点：引用类型的值会被所有实例共享。</p><p>5、寄生式继承</p><p>优点：不需要单独创建构造函数；</p><p>缺点：方法在构造函数中，每次创建实例对象时都会重新创建一遍。</p><p>6、寄生组合继承</p><p>优点：高效率只调用一次父类构造函数，并且避免了子类原型对象上不必要、多余的属性，同时，还能将原型链保持不变，因此能使用instanceof 和 isPrototypeOf。</p><p>缺点：代码复杂</p><h3 id="22-说一说new会发生什么？"><a href="#22-说一说new会发生什么？" class="headerlink" title="22.说一说new会发生什么？"></a>22.说一说new会发生什么？</h3><ol><li>创建一个空的简单JavaScript对象（即<code>&#123;&#125;</code>）</li><li>为步骤1新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象</li><li>将步骤1新创建的对象作为<code>this</code>的上下文</li><li><p>如果该函数没有返回对象，则返回<code>this</code></p><p><code>new</code>关键字后面的构造函数不能是箭头函数。</p></li></ol><h3 id="23-说一说defer和async区别？"><a href="#23-说一说defer和async区别？" class="headerlink" title="23.说一说defer和async区别？"></a>23.说一说defer和async区别？</h3><p>html文件都是按顺序执行的，script标签中没有加defer和async时，浏览器在解析文档时遇到script标签就会停止解析阻塞文档解析，先加载JS文件，加载完之后立即执行，执行完毕后才能继续解析文档。 而在script标签中写入defer或者async时，就会使JS文件异步加载，即html执行到script标签时，JS加载和文档解析同时进行，而async是在JS加载完成后立即执行JS脚本，阻塞文档解析，而defer则是JS加载完成后，在文档解析完成后执行JS脚本。</p><p>因为js文件存在服务器中并不是在浏览器中，当浏览器遇见script标签时就发起请求，也就是加载的意思，然后把js代码解析再执行  </p><p>文档解析就是解析html创建dom树</p><h3 id="24-说一说promise是什么与使用方法？"><a href="#24-说一说promise是什么与使用方法？" class="headerlink" title="24.说一说promise是什么与使用方法？"></a>24.说一说promise是什么与使用方法？</h3><ol><li>概念：异步编程的一种解决方案，解决了地狱回调的问题</li><li>使用方法：new Promise((resolve,reject) =&gt; { resolve（）; reject（）; })里面有多个resovle或者reject只执行第一个。如果第一个是resolve的话后面可以接.then查看成功消息。如果第一个是reject的话，.catch查看错误消息。</li></ol><p>Promise的作用：Promise是异步微任务，解决了异步多层嵌套回调的问题，让代码的可读性更高，更容易维护</p><p>Promise使用：Promise是ES6提供的一个构造函数，可以使用Promise构造函数new一个实例，Promise构造函数接收一个函数作为参数，这个函数有两个参数，分别是两个函数 <code>resolve</code>和<code>reject</code>，<code>resolve</code>将Promise的状态由等待变为成功，将异步操作的结果作为参数传递过去；<code>reject</code>则将状态由等待转变为失败，在异步操作失败时调用，将异步操作报出的错误作为参数传递过去。实例创建完成后，可以使用<code>then</code>方法分别指定成功或失败的回调函数，也可以使用catch捕获失败，then和catch最终返回的也是一个Promise，所以可以链式调用。</p><p>Promise的特点：</p><ol><li>对象的状态不受外界影响（Promise对象代表一个异步操作，有三种状态）。</li><li>pending（执行中）  Resolved（成功，又称Fulfilled）  rejected（拒绝）<br>其中pending为初始状态，fulfilled和rejected为结束状态（结束状态表示promise的生命周期已结束）</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。 Promise对象的状态改变，只有两种可能（状态凝固了，就不会再变了，会一直保持这个结果）从Pending变为Resolved   从Pending变为Rejected</li><li>resolve 方法的参数是then中回调函数的参数，reject 方法中的参数是catch中的参数</li><li>then 方法和 catch方法 只要不报错，返回的都是一个fullfilled状态的promise</li></ol><blockquote><p>Promise.resolve() :返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。 Promise.reject()：返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法。 Promise.all()：返回一个新的promise对象，该promise对象在参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。 Promise.any()：接收一个Promise对象的集合，当其中的一个 promise 成功，就返回那个成功的promise的值。 </p><p>Promise.race()：当参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。 </p></blockquote><h3 id="25-说一说JS实现异步的方法？"><a href="#25-说一说JS实现异步的方法？" class="headerlink" title="25.说一说JS实现异步的方法？"></a>25.说一说JS实现异步的方法？</h3><p>得分点：回调函数、事件监听、setTimeout、Promise、生成器Generators/yield、async/await </p><h3 id="26-说一说cookie、sessionStorage、localStorage-区别？"><a href="#26-说一说cookie、sessionStorage、localStorage-区别？" class="headerlink" title="26.说一说cookie、sessionStorage、localStorage 区别？"></a>26.说一说cookie、sessionStorage、localStorage 区别？</h3><p>1.都是浏览器存储 </p><p>2.都存储在浏览器本地 </p><p>区别： </p><ol><li>cookie由服务器写入， sessionStorage以及localStorage都是由前端写入</li><li>cookie的生命周期由服务器端写入时就设置好的，localStorage是写入就一直存在，除非手动清除，sessionStorage是由页面关闭时自动清除 </li><li>cookie存储空间大小约4kb， sessionStorage及localStorage空间比较大，大约5M </li><li>3者的数据共享都遵循同源原则，sessionStorage还限制必须是同一个页面 </li><li>前端给后端发送请求时，自动携带Cookie中的数据, 但是SessionStorage、 LocalStorage不会</li><li>cookie一般存储登录验证信息或者token，localStorage常用于存储不易变动的数据，减轻服务器压力，sessionStorage可以用来监测用户是否是刷新进入页面，如音乐播放器恢复进度条功能</li></ol><h3 id="27-说一说如何实现可过期的localstorage数据？"><a href="#27-说一说如何实现可过期的localstorage数据？" class="headerlink" title="27.说一说如何实现可过期的localstorage数据？"></a>27.说一说如何实现可过期的localstorage数据？</h3><p>惰性删除是指某个键值过期后，该键值不会被马上删除，而是等到下次被使用的时候，才会被检查到过期，此时才能得到删除。</p><p>定时删除是指，每隔一段时间执行一次删除操作，并通过限制删除操作执行的次数和频率，来减少删除操作对CPU的长期占用。另一方面定时删除也有效的减少了因惰性删除带来的对localStorage空间的浪费。</p><h3 id="28-说一下token-能放在cookie中吗？"><a href="#28-说一下token-能放在cookie中吗？" class="headerlink" title="28.说一下token 能放在cookie中吗？"></a>28.说一下token 能放在cookie中吗？</h3><p>能、不设置cookie有效期、重新登录重写cookie覆盖原来的cookie </p><p>token认证流程 </p><ol><li>客户端使用用户名跟密码请求登录 </li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端签发一个 token ，并把它发送给客户端</li><li>客户端接收 token 以后会把它存储起来，比如放在  cookie 里或者 localStorage 里</li><li>客户端每次发送请求时都需要带着服务端签发的 token（把 token 放到 HTTP 的 Header 里） </li><li>服务端收到请求后，需要验证请求里带有的 token ，如验证成功则返回对应的数据</li></ol><h3 id="29-说一说axios的拦截器原理及应用？"><a href="#29-说一说axios的拦截器原理及应用？" class="headerlink" title="29.说一说axios的拦截器原理及应用？"></a>29.说一说axios的拦截器原理及应用？</h3><p> 1.拦截器分为 请求（request）拦截器和响应（response）拦截器。<br> 2.请求拦截器用于在接口请求之前做的处理，比如为每个请求带上相应的参数（token，时间戳等）。<br> 3.响应拦截器用于在接口返回之后做的处理，比如对返回的状态进行判断（token是否过期）<br> 4.拦截器原理：创建一个chn数组，数组中保存了拦截器相应方法以及dispatchRequest（dispatchRequest这个函数调用才会真正的开始下发请求），把请求拦截器的方法放到chn数组中dispatchRequest的前面，把响应拦截器的方法放到chn数组中dispatchRequest的后面，把请求拦截器和响应拦截器forEach将它们分unshift,push到chn数组中，为了保证它们的执行顺序，需要使用promise，以出队列的方式对chn数组中的方法挨个执行。</p><h3 id="30-说一说创建ajax过程？"><a href="#30-说一说创建ajax过程？" class="headerlink" title="30.说一说创建ajax过程？"></a>30.说一说创建ajax过程？</h3><p>（1）创建异步对象，即 XMLHttpRequest 对象。 </p><p>（2）使用 open 方法设置请求参数。open(method, url, async)。</p><p>​    参数解释：请求的方法、请求的 url、是否异步。第三个参数如果不写，则默认为 true。 </p><p>（3）发送请求：send()。 </p><p>（4）注册事件：注册 onreadystatechange 事件，状态改变时就会调用。如果要在数据完整请求回来的时候才调  用，我们需要手动写一些判断的逻辑。</p><p> （5）服务端响应，获取返回的数据。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;牛客-前端专业面试真题&quot;&gt;&lt;a href=&quot;#牛客-前端专业面试真题&quot; class=&quot;headerlink&quot; title=&quot;牛客-前端专业面试真题&quot;&gt;&lt;/a&gt;牛客-前端专业面试真题&lt;/h2&gt;&lt;h3 id=&quot;1-说一说HTML语义化？&quot;&gt;&lt;a href=&quot;#1-说一</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>8.ES6中扩展运算符的作用</title>
    <link href="https://daixueshengt.github.io/posts/1a75aa6a.html"/>
    <id>https://daixueshengt.github.io/posts/1a75aa6a.html</id>
    <published>2024-05-13T21:30:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="23-ES6中扩展运算符的作用"><a href="#23-ES6中扩展运算符的作用" class="headerlink" title="23.ES6中扩展运算符的作用"></a>23.ES6中扩展运算符的作用</h2><p>ES6中扩展运算符(…)的作用:将一个数组变为一个以空格分隔的参数序列</p><p>数组的复制 （浅拷贝）</p><p>数组的和合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> arr4=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> arr5=[...arr3,...arr4];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5)</span><br><span class="line">对象合并同理</span><br></pre></td></tr></table></figure><p>字符串改为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr=[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArr)</span><br></pre></td></tr></table></figure><h2 id="24-ES6中的rest参数"><a href="#24-ES6中的rest参数" class="headerlink" title="24.ES6中的rest参数"></a>24.ES6中的rest参数</h2><p>ES6中的rest参数，用于禁取函数多余的参数，形式:(…变量名)，把一个分离的参数序列整合为一个数组，值是一个数组</p><p>rest参数只能放在最后一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">a,...argus</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> argus)&#123;</span><br><span class="line">        total+=value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(total)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="25-ES6中对象和数组的解构"><a href="#25-ES6中对象和数组的解构" class="headerlink" title="25.ES6中对象和数组的解构"></a>25.ES6中对象和数组的解构</h2><p>解构：一种提取数据的模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的解构：以元素的位置为匹配条件</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c] =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)</span><br><span class="line"><span class="keyword">const</span> [a,,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的解构:是以属性的名称为匹配条件</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>:name,age&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">children</span>:&#123;<span class="attr">name1</span>:<span class="string">&quot;张三2&quot;</span>,<span class="attr">age</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,<span class="attr">children</span>:&#123;name1&#125;&#125;=obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS中什么是DOM和BOM?</span></span><br><span class="line"><span class="comment">//DOM:document,文档对象类型，用来获取或者设置文档标签的属性</span></span><br><span class="line"><span class="comment">// JS可以通过DOM获取到有哪些标签，标签有哪些属性，内容有哪些</span></span><br><span class="line"><span class="comment">// DOM操作的对象是文档，所以DOM和浏览器没有关系，关注网页本身的内容</span></span><br><span class="line"><span class="comment">// BOM:browser object model，浏览器对象模型，提供独立于内容而与浏览器窗口进行交瓦的对象</span></span><br><span class="line"><span class="comment">// 管理窗口与窗口之间的通讯，核心对象是window --&gt; location(用于url相关的操作)、history(用于历史相关的操作)，navigator(包含了浏览器相关的信息)...</span></span><br><span class="line"><span class="comment">// BOM是控制浏览器行为的api,DOM是一个页面结构的api</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;23-ES6中扩展运算符的作用&quot;&gt;&lt;a href=&quot;#23-ES6中扩展运算符的作用&quot; class=&quot;headerlink&quot; title=&quot;23.ES6中扩展运算符的作用&quot;&gt;&lt;/a&gt;23.ES6中扩展运算符的作用&lt;/h2&gt;&lt;p&gt;ES6中扩展运算符(…)的作用:将一</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>7.ES6中const定义的对象属性可以修改吗？</title>
    <link href="https://daixueshengt.github.io/posts/5d1f741e.html"/>
    <id>https://daixueshengt.github.io/posts/5d1f741e.html</id>
    <published>2024-05-11T22:27:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="19-ES6中const定义的对象属性可以修改吗？"><a href="#19-ES6中const定义的对象属性可以修改吗？" class="headerlink" title="19.ES6中const定义的对象属性可以修改吗？"></a>19.ES6中const定义的对象属性可以修改吗？</h2><p>const定义后，当然可以修改对象中的属性的值</p><p>const保证并不是变量的值不能改动，而是变量指向内存地址不能改动</p><h2 id="20-ES6中let、const和var有哪些用法和区别？"><a href="#20-ES6中let、const和var有哪些用法和区别？" class="headerlink" title="20.ES6中let、const和var有哪些用法和区别？"></a>20.ES6中let、const和var有哪些用法和区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var</span>:</span><br><span class="line">使用<span class="keyword">var</span>声明的变量既是顶级变量(顶层对象(<span class="variable language_">window</span>对象)的属性)也是全局变量</span><br><span class="line">使用<span class="keyword">var</span>声明的变量存在变量提升的情况</span><br><span class="line">使用<span class="keyword">var</span>可以对一个变量进行多次声明，后面的声明会覆盖前面的变量声明</span><br><span class="line">在函数中再次使用<span class="keyword">var</span>声明这个变量的时候，这个变量就是局部的，如果不是用<span class="keyword">var</span>，那就全局的</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> :</span><br><span class="line"><span class="keyword">let</span>所声明变量只在<span class="keyword">let</span>命令所在的代码块中生效</span><br><span class="line"><span class="keyword">let</span>不存在变量提升</span><br><span class="line"><span class="keyword">let</span>不允许在相同的作用域下重复声明</span><br><span class="line"></span><br><span class="line"><span class="attr">const</span>:</span><br><span class="line"><span class="keyword">const</span>声明一个只读的常量，一旦声明，常量的值就不能改变</span><br><span class="line"><span class="keyword">const</span>一旦声明，就必须赋值</span><br><span class="line">除了以上的其他的都和<span class="keyword">let</span>一样的</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">变量提升:</span><br><span class="line"><span class="keyword">var</span>声明的变量存在变量提升，<span class="keyword">let</span>和<span class="keyword">const</span>不存在变量提升</span><br><span class="line">块级作用域:</span><br><span class="line"><span class="keyword">var</span>不存在块级作用域，<span class="keyword">let</span>和<span class="keyword">const</span>存在块级作用域，只在所在代码块生效</span><br><span class="line">重复声明:</span><br><span class="line"><span class="keyword">var</span>允许重复声明，<span class="keyword">let</span>和<span class="keyword">const</span>不允许在同一个作用域重复声明</span><br><span class="line">修改声明的变量:</span><br><span class="line"><span class="keyword">var</span>和<span class="keyword">let</span>可以改变声明的变量，<span class="keyword">const</span>，不可以，一旦声明，必须赋值，并且常量的值不能改变</span><br></pre></td></tr></table></figure><h2 id="21-JS中如何判断一个对象是空对象？"><a href="#21-JS中如何判断一个对象是空对象？" class="headerlink" title="21.JS中如何判断一个对象是空对象？"></a>21.JS中如何判断一个对象是空对象？</h2><p>使用JSON自带的.stringify方法来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)===<span class="string">&quot;&#123;&#125;&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;是空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用object.keys()来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))<span class="comment">//[name,age]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是一个空对象&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-如果在ES6中new一个箭头函数会怎么样？"><a href="#22-如果在ES6中new一个箭头函数会怎么样？" class="headerlink" title="22.如果在ES6中new一个箭头函数会怎么样？"></a>22.如果在ES6中new一个箭头函数会怎么样？</h2><p>会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new关键字的执行过程</span></span><br><span class="line"><span class="number">1.</span><span class="keyword">new</span>构造函数会在内存中创建一个空对象</span><br><span class="line"><span class="number">2.</span><span class="variable language_">this</span>就会指向刚才创建的那个空对象</span><br><span class="line"><span class="number">3.</span>执行构造函数中的代码，给空对象添加属性和方法</span><br><span class="line"><span class="number">4.</span>返回这个新的对象（所以构造函数中不需要<span class="keyword">return</span>）</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"> 箭头函数内的<span class="variable language_">this</span>是静态的，指向定义时所在的对象，而不是调用时，<span class="variable language_">this</span>指向不可以改变的</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;19-ES6中const定义的对象属性可以修改吗？&quot;&gt;&lt;a href=&quot;#19-ES6中const定义的对象属性可以修改吗？&quot; class=&quot;headerlink&quot; title=&quot;19.ES6中const定义的对象属性可以修改吗？&quot;&gt;&lt;/a&gt;19.ES6中cons</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>6.你是如何在JS中进行隐式转换的？</title>
    <link href="https://daixueshengt.github.io/posts/2b5cd5a6.html"/>
    <id>https://daixueshengt.github.io/posts/2b5cd5a6.html</id>
    <published>2024-05-10T21:27:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="16-你是如何在JS中进行隐式转换的？"><a href="#16-你是如何在JS中进行隐式转换的？" class="headerlink" title="16.你是如何在JS中进行隐式转换的？"></a>16.你是如何在JS中进行隐式转换的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// + 操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串;其他情况下两边的变量都会被转换为数字。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="string">&quot;23&quot;</span>);<span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="literal">false</span>);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>+<span class="literal">false</span>);<span class="comment">//1false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span>+<span class="literal">false</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -、*、/ 操作运算符会转换为数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">25</span>-<span class="string">&#x27;23&#x27;</span>);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>*<span class="literal">false</span>);<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>/<span class="string">&#x27;aa&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于==操作符来说</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>==<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span>==<span class="literal">false</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;0&#x27;</span>==<span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于 &lt; 和 &gt; 比较符，按照字母的排列顺序来比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>&gt;<span class="string">&#x27;d&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;de&#x27;</span>&gt;<span class="string">&#x27;fg&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他情况下，转换为数字再比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>&lt;<span class="number">13</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span>&lt;-<span class="number">1</span>)<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a&gt;<span class="number">2</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">valueOf</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(a.<span class="title function_">toString</span>()));</span><br></pre></td></tr></table></figure><h2 id="17-你是如何理解JS中深拷贝和浅拷贝的？"><a href="#17-你是如何理解JS中深拷贝和浅拷贝的？" class="headerlink" title="17.你是如何理解JS中深拷贝和浅拷贝的？"></a>17.你是如何理解JS中深拷贝和浅拷贝的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要在于复制出来的新对象和原来的对象是否会互相影响</span></span><br><span class="line"><span class="comment">// 浅拷贝:仅仅是指向被复制的内存地址，如果原地址发生改变，那么浅拷贝出来的对象也会相应的改变</span></span><br><span class="line"><span class="comment">// 新旧对象共享内存，修改其中一个，另一个也会受到影响</span></span><br><span class="line"><span class="comment">// 深拷贝:在内存中开辟一块新的地址用于存放复制的对象</span></span><br><span class="line"><span class="comment">// 新旧对象不会共享内存，修改其中的一个不会影响另一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝 通过‘=’直接赋值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=obj;</span><br><span class="line"><span class="comment">//而后改变obj1中的属性值，obj中的也会变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝 Object.assign()方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1= <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj)</span><br><span class="line">obj1.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 通过JSON对象来实现</span></span><br><span class="line"><span class="comment">// JSON.stringify:将js的值(对象或者数组)转为一个JSON字符串</span></span><br><span class="line"><span class="comment">// JSON.parse:用来解析JSON字符串，转换为Object类型</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">obj1.<span class="property">age</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝 通过扩展运算符实现深拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1= &#123;...obj,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure><h2 id="18-你是怎么理解JS中-操作符的强制类型转换规则的？"><a href="#18-你是怎么理解JS中-操作符的强制类型转换规则的？" class="headerlink" title="18.你是怎么理解JS中==操作符的强制类型转换规则的？"></a>18.你是怎么理解JS中==操作符的强制类型转换规则的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS中==操作符的强制类型转换规定</span></span><br><span class="line"><span class="comment">//首先判断两者的类型是否相同，如果不相同会进行类型转换，相同的话就比较大小</span></span><br><span class="line"><span class="comment">// 转换情况:</span></span><br><span class="line"><span class="comment">// 1、字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较大小</span></span><br><span class="line"><span class="comment">// 2、其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较</span></span><br><span class="line"><span class="comment">// 3、nu11和undefined之间的相等比较，结果为真，其他值和它们进行比较都返回假值</span></span><br><span class="line"><span class="comment">// 4、对象和非对象之间的相等比较，会将对象先转为基本数据类型再进行判断</span></span><br><span class="line"><span class="comment">// 5、如果两个操作值都是对象，则比较它们是不是指向同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回true,否则返回false</span></span><br></pre></td></tr></table></figure><p><em>你想成为一个成功的人，怎么能不累</em> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;16-你是如何在JS中进行隐式转换的？&quot;&gt;&lt;a href=&quot;#16-你是如何在JS中进行隐式转换的？&quot; class=&quot;headerlink&quot; title=&quot;16.你是如何在JS中进行隐式转换的？&quot;&gt;&lt;/a&gt;16.你是如何在JS中进行隐式转换的？&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>5.JS中有哪几种判断数组的方法？</title>
    <link href="https://daixueshengt.github.io/posts/2d646d77.html"/>
    <id>https://daixueshengt.github.io/posts/2d646d77.html</id>
    <published>2024-05-09T22:27:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13-JS中有哪几种判断数组的方法？"><a href="#13-JS中有哪几种判断数组的方法？" class="headerlink" title="13.JS中有哪几种判断数组的方法？"></a>13.JS中有哪几种判断数组的方法？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js中判断数组的方法</span></span><br><span class="line"><span class="comment">//通过Object.prototype.toString.call()做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]))&gt;&gt;&gt; [object <span class="title class_">Array</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>))&gt;&gt;&gt; <span class="title class_">Array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>)===<span class="string">&#x27;Array&#x27;</span>)&gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过原型链做判断</span></span><br><span class="line"><span class="comment">//对象的隐式原型等于构造函数的显式原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">__proto__</span>===<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>); &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ES6的Array.isArray()做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([])); &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过instanceof做判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &gt;&gt;&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Array.prototype.isPrototypeOf做判断,判断Array是否在传入内容的原型链上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>([])) &gt;&gt;&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="14-JS中“-”操作符什么时候用于字符串拼接？"><a href="#14-JS中“-”操作符什么时候用于字符串拼接？" class="headerlink" title="14.JS中“+”操作符什么时候用于字符串拼接？"></a>14.JS中“+”操作符什么时候用于字符串拼接？</h2><p>如果 + 操作符其中一个操作数是字符串(或者通过ToPrimitive操作之后最终得到的字符串),则执行字符串的拼接，否则执行数字加法</p><h2 id="15-JS中Object-is-和-、-有什么区别？"><a href="#15-JS中Object-is-和-、-有什么区别？" class="headerlink" title="15.JS中Object.is()和===、==有什么区别？"></a>15.JS中Object.is()和===、==有什么区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Js中object.is()与比较操作符 ”===“(严格相等运算符)和”==“(相等运算符)的区别</span></span><br><span class="line"><span class="comment">// 双等号(==):如果两边的类型不一致，进行强制类型转换，然后再去进行比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="literal">true</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>==<span class="string">&#x27;1&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三等号(===):如果两边的类型不一致，不会进行强制类型转换，直接返回false。等型等值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>===<span class="literal">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>===<span class="string">&#x27;1&#x27;</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// object.is() : 用来判断两个值是否严格相等。处理一些特殊的情况，-0和+0不再相等，两个NaN是相等的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">is</span>(+<span class="number">0</span>，-<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;13-JS中有哪几种判断数组的方法？&quot;&gt;&lt;a href=&quot;#13-JS中有哪几种判断数组的方法？&quot; class=&quot;headerlink&quot; title=&quot;13.JS中有哪几种判断数组的方法？&quot;&gt;&lt;/a&gt;13.JS中有哪几种判断数组的方法？&lt;/h2&gt;&lt;figure c</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>4.JS数据类型检测的方式有哪些？</title>
    <link href="https://daixueshengt.github.io/posts/4b968259.html"/>
    <id>https://daixueshengt.github.io/posts/4b968259.html</id>
    <published>2024-05-08T22:52:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="10-JS数据类型检测的方式有哪些？"><a href="#10-JS数据类型检测的方式有哪些？" class="headerlink" title="10.JS数据类型检测的方式有哪些？"></a>10.JS数据类型检测的方式有哪些？</h2><ol><li><p>typeof（检测数据类型的运算符）</p></li><li><p>instanceof（检测某一个实例是否属于这个类）</p><blockquote><p>可以正确判断对象的类型，不可以判断基本数据类型，内部运行机制，判断在它的原型链上能否找到这个类型的原型。</p></blockquote></li><li><p>constructor(检测实例和类的关系，从而检测数据类型)，引用原来构造该对象的函数</p><blockquote><p>除了undefined和null，其他类型都能检测正确</p></blockquote></li><li><p>Object.prototype.toString.call() (检测数据类型)</p><blockquote><p>都能检测</p></blockquote></li></ol><h2 id="11-JS中instanceof操作符的实现原理以及实现方法"><a href="#11-JS中instanceof操作符的实现原理以及实现方法" class="headerlink" title="11.JS中instanceof操作符的实现原理以及实现方法"></a>11.JS中instanceof操作符的实现原理以及实现方法</h2><p>instanceof操作符用于判断构造函数的prototype属性是否出现在对象的原型链中的任何位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)===<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); &gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>);&gt;&gt;&gt;<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//手写instanceof实现原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instance</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line"><span class="comment">//获取对象的原型</span></span><br><span class="line"><span class="keyword">let</span> proto=<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left)；</span><br><span class="line"><span class="comment">//获取构造函数的prototype属性</span></span><br><span class="line"><span class="keyword">let</span> prototype=right.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!proto)&#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"><span class="keyword">if</span>(proto===prototype)&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;</span><br><span class="line"><span class="comment">//如果没有找到，就继续在原型链上找</span></span><br><span class="line">proto=<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-JS中typeof-NaN的结果是什么？"><a href="#12-JS中typeof-NaN的结果是什么？" class="headerlink" title="12.JS中typeof NaN的结果是什么？"></a>12.JS中typeof NaN的结果是什么？</h2><p>NaN(not a number)不是一个数字，表示是否属于number类型的一种状态:是或否，不是确切的值</p><p>Js中number数据类型除了浮点型和整数型，还有一个特殊值NaN</p><p><code>console.log(typeof NaN)</code>     &gt;&gt;&gt;number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NaN,表达式中存在不可转化的变量，返回了无效的结果，不是返回确切的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//NaN不等于本身,不是确切的值,代表一个范围</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>（<span class="title class_">NaN</span>==<span class="title class_">NaN</span>）<span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;10-JS数据类型检测的方式有哪些？&quot;&gt;&lt;a href=&quot;#10-JS数据类型检测的方式有哪些？&quot; class=&quot;headerlink&quot; title=&quot;10.JS数据类型检测的方式有哪些？&quot;&gt;&lt;/a&gt;10.JS数据类型检测的方式有哪些？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>canvas网页电子签名实现方式</title>
    <link href="https://daixueshengt.github.io/posts/14b8c4f5.html"/>
    <id>https://daixueshengt.github.io/posts/14b8c4f5.html</id>
    <published>2024-05-08T20:27:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>签名<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">canvas</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* cursor: url(&#x27;./pan.cur&#x27;),auto; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持Canva，请升级浏览器</span><br><span class="line">  <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交签名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>清空签名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cvs = $(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取画笔工具对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ctx = cvs.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置线条的粗细</span></span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineWidth</span>=<span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置线端、折角样式</span></span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineCap</span>=<span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    ctx.<span class="property">lineJoin</span>=<span class="string">&#x27;round&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    cvs.<span class="property">onmousedown</span>=<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 开始绘制名字</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将画笔起点设置为当前位置</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">moveTo</span>(e.<span class="property">offsetX</span>,e.<span class="property">offsetY</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      cvs.<span class="property">onmousemove</span>=<span class="function"><span class="params">ev</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 画笔跟着鼠标绘制线</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">lineTo</span>(ev.<span class="property">offsetX</span>,ev.<span class="property">offsetY</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 上色</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ctx.strokeStyle=&#x27;#f00&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    cvs.<span class="property">onmouseup</span>=<span class="function">()=&gt;</span>cvs.<span class="property">onmousemove</span>=<span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.clear&quot;</span>).<span class="property">onclick</span>=<span class="function">()=&gt;</span>ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,cvs.<span class="property">width</span>,cvs.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.submit&quot;</span>).<span class="property">onclick</span>=<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 借助a标签实现下载</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> aEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将canvas转换为base64的图片格式路径，赋值给a标签的链接</span></span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="property">href</span> = cvs.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/webp&#x27;</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="property">download</span>=<span class="string">&#x27;签名&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">appendChild</span>(aEl).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">      aEl.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">select</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(select);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://img2.imgtp.com/2024/05/08/bYP9oJjc.png" alt="效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接上代码&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="技术杂记" scheme="https://daixueshengt.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3.你能解释下作用域和作用域链吗？</title>
    <link href="https://daixueshengt.github.io/posts/6b7299f4.html"/>
    <id>https://daixueshengt.github.io/posts/6b7299f4.html</id>
    <published>2024-05-07T17:08:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="5-作用域和作用域链"><a href="#5-作用域和作用域链" class="headerlink" title="5.作用域和作用域链"></a>5.作用域和作用域链</h2><p>作用域：就是一个规则；用来查找变量</p><p>全局作用域</p><p>局部作用域</p><p>作用域链：多层嵌套作用域产生作用域链，会向外查找</p><p>面试题1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a) &gt;&gt;&gt; <span class="number">2</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a=<span class="number">4</span></span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>面试题2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a) &gt;&gt;&gt; <span class="literal">undefined</span> 函数内没有，向上一级查找到a，但是没有赋值</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> a</span><br><span class="line">        <span class="title function_">fn2</span>()</span><br><span class="line">        a=<span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> fn3</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> fn=<span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h2 id="6-你能讲清VUE中diff算法的原理吗？"><a href="#6-你能讲清VUE中diff算法的原理吗？" class="headerlink" title="6.你能讲清VUE中diff算法的原理吗？"></a>6.你能讲清VUE中diff算法的原理吗？</h2><p>vue2：递归+双指针</p><blockquote><p>1.判断是不是同一个元素，不是同一个元素，直接替换</p><p>2.是同一个元素 &gt;&gt; 比对属性 &gt;&gt; 比对儿子（1老的有儿子，新的没儿子 2新的有儿子老的没有儿子 3是文本的情况（直接创建插入/替换） 4都有children(双指针：头头，尾尾，头尾，尾头)=&gt; 对比查找 继续复用）</p></blockquote><p>vue3：采用了最长递增子序列 优化乱序的情况</p><p>补充：vue中为什么需要虚拟dom</p><ol><li>如果我们直接操作真实dom 性能低</li><li>vnode就是一个js对象，也可以理解为 它是真实dom的抽象</li><li>减少对真实dom的操作，从而提高性能</li></ol><h2 id="7-说说你对Vue2和Vue3响应式的理解"><a href="#7-说说你对Vue2和Vue3响应式的理解" class="headerlink" title="7.说说你对Vue2和Vue3响应式的理解"></a>7.说说你对Vue2和Vue3响应式的理解</h2><p>响应式：就是数据改变，对应的视图也会改变</p><p>vue2：是通过Object.defineProperty()，如果是多层次就要递归</p><p>vue3：采用proxy，如果是多层次数据，用户不使用，就不会递归</p><h2 id="8-在vue2中你是如何检测数组变化的"><a href="#8-在vue2中你是如何检测数组变化的" class="headerlink" title="8.在vue2中你是如何检测数组变化的"></a>8.在vue2中你是如何检测数组变化的</h2><p>vue2中没有使用defineProperty对这个数组的每一项进行拦截，而是选择重写数组{push,shift…}方法</p><p>数组中如果是对象的数据类型 也继续递归处理 [{},{}]</p><p>数组的索引和长度变化是无法监控的</p><h2 id="9-nextTick是在哪里使用？你能说说它的原理吗？"><a href="#9-nextTick是在哪里使用？你能说说它的原理吗？" class="headerlink" title="9.nextTick是在哪里使用？你能说说它的原理吗？"></a>9.nextTick是在哪里使用？你能说说它的原理吗？</h2><p>vue中的数据更新是异步的，使用nextTick方法可以保证用户定义的逻辑在更新之后执行</p><p>业务：dom更新完毕之后，需要做一些处理</p><p>this.$nextTick(()=&gt;{</p><p>})</p><p>原理：使用nextTick中的回调函数，在下一次dom更新循环结束之后执行回调</p><p>用于获取更新后的dom</p><hr><p>意外：markdown语法还能画流程图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">​```flow</span><br><span class="line">st =&gt;start: 开始</span><br><span class="line">op =&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e =&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt; op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;5-作用域和作用域链&quot;&gt;&lt;a href=&quot;#5-作用域和作用域链&quot; class=&quot;headerlink&quot; title=&quot;5.作用域和作用域链&quot;&gt;&lt;/a&gt;5.作用域和作用域链&lt;/h2&gt;&lt;p&gt;作用域：就是一个规则；用来查找变量&lt;/p&gt;
&lt;p&gt;全局作用域&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>2.什么是闭包？闭包是如何使用的？</title>
    <link href="https://daixueshengt.github.io/posts/71a30201.html"/>
    <id>https://daixueshengt.github.io/posts/71a30201.html</id>
    <published>2024-05-06T22:35:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-什么是闭包？闭包是如何使用的？"><a href="#2-什么是闭包？闭包是如何使用的？" class="headerlink" title="2.什么是闭包？闭包是如何使用的？"></a>2.什么是闭包？闭包是如何使用的？</h2><p>概念：</p><ol><li>函数中返回一个函数 </li><li>函数的声明的作用域和函数使用的作用域不同</li></ol><p>用途：</p><ol><li><p>获取私有作用域中的变量</p></li><li><p>这些变量可以保存到内存中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">        n++</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getN = <span class="title function_">a</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getN</span>()) &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getN</span>()) &gt;&gt;&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><p>面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)&gt;&gt;&gt; <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fnArr[<span class="number">3</span>]())&gt;&gt;&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//闭包</span></span><br><span class="line">        <span class="keyword">let</span> j= i </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fnArr[<span class="number">3</span>]()) &gt;&gt;&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="3-能说说你是怎么实现防抖的吗？"><a href="#3-能说说你是怎么实现防抖的吗？" class="headerlink" title="3.能说说你是怎么实现防抖的吗？"></a>3.能说说你是怎么实现防抖的吗？</h2><p>防抖：用户点击 &gt;&gt; 多次点击 &gt;&gt; 浪费性能</p><p>防抖：只有最后一次点击后才触发一次</p><p>节流：固定时间只触发一次</p><p>1.定时器 2.高阶函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户点击发送请求&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高阶函数 1.函数的返回值是一个函数 2.它的参数是一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dalay</span>(<span class="params">cb,time</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer<span class="comment">//这个变量会保存在内存，只会创建一次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">cb</span>()<span class="comment">//处理业务逻辑</span></span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">dalay</span>(change,<span class="number">2000</span>))</span><br></pre></td></tr></table></figure><h2 id="4-请说明Vue中key的作用和原理，谈谈你对它的理解"><a href="#4-请说明Vue中key的作用和原理，谈谈你对它的理解" class="headerlink" title="4.请说明Vue中key的作用和原理，谈谈你对它的理解"></a>4.请说明Vue中key的作用和原理，谈谈你对它的理解</h2><ul><li>vue中在patch过程中，通过key可以判断两个vnode节点是否相同（可以复用老的节点）</li><li>没有key会导致出错，性能会有极大的损耗</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-什么是闭包？闭包是如何使用的？&quot;&gt;&lt;a href=&quot;#2-什么是闭包？闭包是如何使用的？&quot; class=&quot;headerlink&quot; title=&quot;2.什么是闭包？闭包是如何使用的？&quot;&gt;&lt;/a&gt;2.什么是闭包？闭包是如何使用的？&lt;/h2&gt;&lt;p&gt;概念：&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>1.JS有哪些数据类型？它们有什么区别？</title>
    <link href="https://daixueshengt.github.io/posts/71a30200.html"/>
    <id>https://daixueshengt.github.io/posts/71a30200.html</id>
    <published>2024-05-05T22:00:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-javaScript有哪些数据类型？它们有什么区别？"><a href="#1-javaScript有哪些数据类型？它们有什么区别？" class="headerlink" title="1.javaScript有哪些数据类型？它们有什么区别？"></a>1.javaScript有哪些数据类型？它们有什么区别？</h2><p>总共有7种<br>基本数据类型：string/number/boolean/null/undefined/symbol(代表创建后独一无二并且不可变的数据类型)<br>引用数据类型：Object</p><p>区别：</p><ol><li><p>声明变量时的存储分配</p><p>基本数据类型存储在栈中，var a=10<br>引用数据类型存储在堆中，var arr=[1,2,3,4,5,…]</p></li><li><p>不同的内存分配机制也带来了不同的访问机制</p><p>不可以直接访问堆内存空间的位置以及直接操作堆内存空间，只能操作对象在栈内存中引用地址</p><p>基本数据类型直接访问到，引用数据类型访问引用地址，根据引用地址找到堆中实体</p></li><li><p>复制变量时的不同</p><p>基本数据类型:var a=1,var b=a,将原始值的副本赋值新的变量 -传值</p><p>引用数据类型:var obj={name:’张三’},var obj1=obj,将引用地址赋值给新的变量 -传址</p></li></ol><p><img src="https://img2.imgtp.com/2024/05/05/cFbxYL8B.png" alt="案例图片"></p><hr><h3 id="基本数据类型中null和undefined的区别以及应用"><a href="#基本数据类型中null和undefined的区别以及应用" class="headerlink" title="基本数据类型中null和undefined的区别以及应用"></a>基本数据类型中null和undefined的区别以及应用</h3><p>都是代表没有值<br>null表示“没有对象”，该处不应该有值</p><p>undefined表示“缺少值”，该处应该有值，但是还没有定义</p><p>转为数值也不同，null转为数值为0，undefined转为数值NaN(不是一个数字)<br>console.log(Number(nul1));》》》0</p><p>console.log(Number(undefined));》》》NaN</p><p>什么时候会有null：</p><ol><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ol><p>什么时候会出现undefined：</p><ol><li>变量被声明了。但是没有赋值，就等于undefined</li><li>调用函数时，应该提供的参数没有提供，该参数就等于undefined</li><li>对象没有赋值的属性，该属性的值为undefined</li><li>函数没有返回值时，默认返回undefined</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-javaScript有哪些数据类型？它们有什么区别？&quot;&gt;&lt;a href=&quot;#1-javaScript有哪些数据类型？它们有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;1.javaScript有哪些数据类型？它们有什么区别？&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="面试题" scheme="https://daixueshengt.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="八股" scheme="https://daixueshengt.github.io/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>测试hexo标签</title>
    <link href="https://daixueshengt.github.io/posts/7c2466b0.html"/>
    <id>https://daixueshengt.github.io/posts/7c2466b0.html</id>
    <published>2024-04-29T23:53:45.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮 Button"></a>按钮 Button</h2><a class="btn-beautify " href="#"   title="#"><span>#</span></a><a class="btn-beautify " href="#"   title="#"><i class="outline"></i><span>#</span></a><a class="btn-beautify block larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify block center larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify block right blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><div class\="btn-center"\>  <a class="btn-beautify larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify pink larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify red larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify purple larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify orange larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify green larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  </div\><div class\="btn-center"\>  <a class="btn-beautify outline larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline pink larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline red larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline purple larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline orange larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  <a class="btn-beautify outline green larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a>  </div><hr><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><u>文本内容</u>  <emp>文本内容</emp>  <wavy>文本内容</wavy>  <del>文本内容</del>  <kbd>文本内容</kbd>  <psw>文本内容</psw>  <mark class="hl-label red">文本内容</mark>   <span class='nota' data-nota='悬停显示的注解内容'>注释词汇</span><span class='p 样式参数(参数以空格划分)'>文本内容</span><span class='p center logo large'>康纳百川</span>  <span class='p center small'>康纳百川</span><hr><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><p class='p 样式参数(参数以空格划分)'>文本内容</p><p class='p center logo large'>tao's Blog</p>  <p class='p center small'>tao's Blog</p><hr><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><p><code>&#123;% tip \[参数，可选\] %&#125;文本内容&#123;% endtip %&#125;</code></p><ul><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持 fontawesome。</li></ul><div class="tip "><p>默认情况</p></div>  <div class="tip success"><p>success</p></div>  <div class="tip error"><p>error</p></div>  <div class="tip warning"><p>warning</p></div>  <div class="tip bolt"><p>bolt</p></div>  <div class="tip ban"><p>ban</p></div>  <div class="tip home"><p>home</p></div>  <div class="tip sync"><p>sync</p></div>  <div class="tip cogs"><p>cogs</p></div>  <div class="tip key"><p>key</p></div>  <div class="tip bell"><p>bell</p></div>  <div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><hr><h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><p><code>&#123;% tip \[参数，可选\] %&#125;文本内容&#123;% endtip %&#125;</code></p><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div>  <div class="tip ban faa-flash animated"><p>ban</p></div><p>2.调整动画速度</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div>  <div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><p>3.On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div>  <div class="tip ban faa-flash animated-hover"><p>ban</p></div><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p><p class\="faa-horizontal"\>warning&lt;/p></p></div>  <div class="tip ban faa-parent animated-hover"><p><p class\="faa-flash"\>ban&lt;/p></p></div><hr><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br><span class="line">*   颜色: red,yellow,green,cyan,blue,gray</span><br><span class="line">*   选中状态: checked</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div>  <div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 [markdown](<a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a>) 语法</p>            </div>  <div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div>  <div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div>  <div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div>  <div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div>  <div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><hr><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br><span class="line">*   样式: plus, minus, times</span><br><span class="line">*   颜色: red,yellow,green,cyan,blue,gray</span><br><span class="line">*   选中状态: checked</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div>  <div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 [markdown](<a href="https://guides.github.com/features/mastering-markdown/">https://guides.github.com/features/mastering-markdown/</a>) 语法</p>            </div>  <div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div>  <div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div>  <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div>  <div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div>  <div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div>  <div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div>  <div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div>  <div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><hr><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;  </span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;  </span><br><span class="line">正文内容  </span><br><span class="line">&#123;% endtimenode %&#125;  </span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;  </span><br><span class="line">正文内容  </span><br><span class="line">&#123;% endtimenode %&#125;  </span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><div class="tag link"><a class="link-card" title="标题" href="https://www.baidu.com"><div class="left"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="right"><p class="text">标题</p><p class="url">https://www.baidu.com</p></div></a></div><hr><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;  </span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;  </span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;  </span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><div class="site-card-group">  <a class="site-card" href="https://www.baidu.com"><div class="img"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="info"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/><span class="title">标题1</span><span class="desc">描述（可选）</span></div></a>  <a class="site-card" href="https://www.baidu.com"><div class="img"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/></div><div class="info"><img src="https://i.imgtg.com/2022/11/21/tCRfB.jpg"/><span class="title">标题2</span><span class="desc">描述（可选）</span></div></a>  </div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage https://i.imgtg.com/2022/11/21/tCRfB.jpg, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><img no-lazy class="inline" src="https://i.imgtg.com/2022/11/21/tCRfB.jpg" style="height:100px;"/><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br><span class="line">*   图片宽度高度：width=300px, height=32px</span><br><span class="line">*   图片描述：alt=图片描述（butterfly 需要在主题配置文件中开启图片描述）</span><br><span class="line">*   占位背景色：bg=#f2f2f2</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg" style="background:#f2f2f2"><img class="img" src="https://i.imgtg.com/2022/11/21/tCRfB.jpg" alt="草莓" style="width:200px;height:200px;"/></div><span class="image-caption">草莓</span></div><hr><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><p><code>&#123;% audio 音频链接 %&#125;</code></p><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line">*   对其方向：left, center, right</span><br><span class="line">*   列数：逗号后面直接写列数，支持 1 ～ 4 列。</span><br><span class="line">*   100%宽度</span><br></pre></td></tr></table></figure><div class="video"><video controls preload><source src='https://baikevideo.cdn.bcebos.com/media/mda-O0F30U7ehu4iIlST/d2c61d5f04b6ea36c3cd8d07b940f228.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><hr><h2 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.gallerygroup 相册图库</span><br><span class="line">&lt;div class\=&quot;gallery-group-main&quot;\&gt;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;  </span><br><span class="line">&lt;/div\&gt;</span><br><span class="line">2.gallery 相册</span><br><span class="line">&#123;% gallery %&#125;  </span><br><span class="line">markdown 图片格式  </span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">11</div>  <p>111</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">22</div>  <p>222</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.imgtg.com/2022/11/21/tCRfB.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">33</div>  <p>333</p>  <a href='https://www.baidu.com'></a>  </figcaption>  </figure>    <hr><h2 id="隐藏折叠-tag-hide"><a href="#隐藏折叠-tag-hide" class="headerlink" title="隐藏折叠 tag-hide"></a>隐藏折叠 tag-hide</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline 描述,按钮颜色,字体颜色 %&#125;  </span><br><span class="line">&#123;% hideInline 描述 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% hideBlock 描述 %&#125;  </span><br><span class="line">  </span><br><span class="line">......  </span><br><span class="line">  </span><br><span class="line">&#123;% endhideBlock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% hideToggle 描述 %&#125;  </span><br><span class="line">  </span><br><span class="line">......  </span><br><span class="line">  </span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><span class="hide-inline"><button type="button" class="hide-button" style="background-color: red;">green  </button><span class="hide-content">描述1</span></span>  <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">描述2</span></span><div class="hide-block"><button type="button" class="hide-button" style="">描述3    </button><div class="hide-content"><p>……  </p></div></div><details class="toggle" ><summary class="toggle-button" style="">描述4</summary><div class="toggle-content"><p>……  </p></div></details>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;按钮-Button&quot;&gt;&lt;a href=&quot;#按钮-Button&quot; class=&quot;headerlink&quot; title=&quot;按钮 Button&quot;&gt;&lt;/a&gt;按钮 Button&lt;/h2&gt;&lt;a class=&quot;btn-beautify &quot; href=&quot;#&quot; 
  title=&quot;#</summary>
      
    
    
    
    <category term="test" scheme="https://daixueshengt.github.io/categories/test/"/>
    
    
    <category term="学习记录" scheme="https://daixueshengt.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>五一假期开始了</title>
    <link href="https://daixueshengt.github.io/posts/1465c773.html"/>
    <id>https://daixueshengt.github.io/posts/1465c773.html</id>
    <published>2024-04-29T23:31:55.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<p>做完今天工作量 就润了，首先先看一下效果。</p><img no-lazy class="inline" src="https://img2.imgtp.com/2024/04/29/CF3ayoEm.png" style="height:1.5em"/><img no-lazy class="inline" src="https://img2.imgtp.com/2024/04/29/J5fnp2wI.png" style="height:1.5em"/><hr><p>虽然很多原生css+js都不记得了，但是借助gpt的帮助，还是顺利做出设计图效果</p><p>不得不说从gpt身上学到了很多</p><hr><p>以下附上笔记 懂得都懂</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">494px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 平滑过渡效果 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">object-fit</span>: cover;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 保持图片宽高比，同时覆盖整个容器 */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">32%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .image-wrapper:not(:hover) img &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      transform: scale(0.9);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125; */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hover-effect</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">32%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hide-overflow</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*  溢出用省略号显示 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 作为弹性伸缩盒子模型显示。 */</span></span></span><br><span class="line"><span class="language-css">      -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 设置伸缩盒子的子元素排列方式：从上到下垂直排列 */</span></span></span><br><span class="line"><span class="language-css">      -webkit-line-clamp: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 显示的行数 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 黑色半透明背景 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 初始状态透明 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 平滑过渡效果 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 确保点击事件可以穿透到图片上 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.image-wrapper</span><span class="selector-class">.active</span> <span class="selector-class">.overlay</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 激活状态下显示蒙版 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- background: linear-gradient(to right, rgba(20, 72, 141,.6), rgba(20, 72, 141,.1)); --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>石臼湖特大桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span></span><br><span class="line">        结构健康监测系统升级改造项目<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>南京市城市生命线<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>一期建设试点项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>司马港桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>G204如海河大桥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/origin/6-5.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;position: absolute;bottom:20px; background:linear-gradient(to right, rgba(20, 72, 141,.6) 60%, rgba(20, 72, 141,.2),rgba(20, 72, 141,.0));height: 80px;width: 100%;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24px;color:#fff;position: absolute;bottom:60px;left:38px;&quot;</span>&gt;</span>双桥门立交<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hide-overflow&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 18px;color:#fff;position: absolute;bottom: 35px;left:38px;&quot;</span>&gt;</span>结构健康监测项目</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的.image-wrapper元素  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageWrappers = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.image-wrapper&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.image-container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给第一个.image-wrapper添加active类  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    imageWrappers.<span class="title function_">forEach</span>(<span class="function"><span class="params">container</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移除所有容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        imageWrappers.<span class="title function_">forEach</span>(<span class="function"><span class="params">c</span> =&gt;</span> c.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 添加当前容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      container.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移除当前容器的激活状态  </span></span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给第一个.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听每个.image-wrapper的mouseenter事件  </span></span></span><br><span class="line"><span class="language-javascript">    imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">wrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      wrapper.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 给当前鼠标进入的.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 清除所有.image-wrapper上的hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">        imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">otherWrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          otherWrapper.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听每个.image-wrapper的mouseleave事件（如果需要的话）  </span></span></span><br><span class="line"><span class="language-javascript">      wrapper.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在鼠标离开时清除hover-effect类，如果需要的话  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    imageContainer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清除所有.image-wrapper上的hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">      imageWrappers.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">wrapper</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        wrapper.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 给第一个.image-wrapper添加hover-effect类  </span></span></span><br><span class="line"><span class="language-javascript">      imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      imageWrappers[<span class="number">0</span>].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没想到就就已经到家了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;做完今天工作量 就润了，首先先看一下效果。&lt;/p&gt;
&lt;img no-lazy class=&quot;inline&quot; src=&quot;https://img2.imgtp.com/2024/04/29/CF3ayoEm.png&quot; style=&quot;height:1.5em&quot;/&gt;
&lt;img no</summary>
      
    
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="学习记录" scheme="https://daixueshengt.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>五一倒计时 3</title>
    <link href="https://daixueshengt.github.io/posts/8cf5ddd9.html"/>
    <id>https://daixueshengt.github.io/posts/8cf5ddd9.html</id>
    <published>2024-04-28T16:26:55.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="111"><a href="#111" class="headerlink" title="111"></a>111</h1><p>快速做完工作，能完善网站了 还是挺有意思的</p><p>从0开始 空杯心态 边学边记</p><p>记录，让生活留下痕迹。</p><p>种一棵树最好的时间是十年前,其次是现在。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;111&quot;&gt;&lt;a href=&quot;#111&quot; class=&quot;headerlink&quot; title=&quot;111&quot;&gt;&lt;/a&gt;111&lt;/h1&gt;&lt;p&gt;快速做完工作，能完善网站了 还是挺有意思的&lt;/p&gt;
&lt;p&gt;从0开始 空杯心态 边学边记&lt;/p&gt;
&lt;p&gt;记录，让生活留下痕迹。&lt;/p&gt;</summary>
      
    
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客建成 开始记录</title>
    <link href="https://daixueshengt.github.io/posts/da03094c.html"/>
    <id>https://daixueshengt.github.io/posts/da03094c.html</id>
    <published>2024-04-27T19:20:49.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><ul><li>ah</li><li>ahh</li><li>ahhh</li><li>ahhhh</li><li>ahhhhh</li><li>ahhhhhh</li></ul><p>脚手架创建vue2项目：create vue<br>脚手架创建vue3项目：npm init vue@latest</p><p> <img src="https://img2.imgtp.com/2024/05/08/7g6Yqcbp.png" alt="111"></p><p> <img src="https://img1.baidu.com/it/u=2850108062,2186206047&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=197" alt="text"></p><p> 人生属实处处是围城</p><p> 很难有不焦虑的，不妨做个快乐的人吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ah&lt;/li&gt;
&lt;li&gt;ahh&lt;/li&gt;
&lt;li&gt;ahh</summary>
      
    
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="随记" scheme="https://daixueshengt.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://daixueshengt.github.io/posts/4a17b156.html"/>
    <id>https://daixueshengt.github.io/posts/4a17b156.html</id>
    <published>2024-04-26T00:00:00.000Z</published>
    <updated>2024-05-23T14:55:27.359Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="test" scheme="https://daixueshengt.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://daixueshengt.github.io/tags/test/"/>
    
  </entry>
  
</feed>
